insert 

## ENTITIES #####################################
function sub entity
	plays in-function
	has name
	has asm-address
	has stack;

basic-block sub entity
	plays from-basic-block 
	plays to-basic-block
	plays in-basic-block 
	plays contains-basic-block
	has bb-start
	has bb-end;

instruction sub entity
	plays from-node
	plays to-node
	plays in-instruction
	plays contains-instruction
	has hash
	has il-index
	has asm-address
	has ins-text
	has operation-type;

operation sub entity
	plays from-node
	plays to-node
	plays in-operation
	plays contains-operation
	has hash
	has edge-label;

constant sub entity
	plays from-node
	plays to-node
	has hash
	has constant-value
	has edge-label;

variable sub entity
	plays from-node
	plays to-node
	has hash
	has var
	has edge-label
	has var-type
	has var-size
	has var-func;

variable-ssa sub entity
	plays from-node
	plays to-node
	plays trace
	has hash
	has var
	has version
	has edge-label
	has var-type
	has var-size
	has var-func;

list sub entity
	plays from-node
	plays to-node
	has hash
	has list-size
	has edge-label;


## SUB ENTITIES #################################
#### OPERATIONS #################################
MLIL_NOP sub operation;
MLIL_SET_VAR sub operation;
MLIL_SET_VAR_FIELD sub operation;
MLIL_SET_VAR_SPLIT sub operation;
MLIL_LOAD sub operation;
MLIL_STORE sub operation;
MLIL_VAR sub operation
	has var;
MLIL_VAR_FIELD sub operation;
MLIL_ADDRESS_OF sub operation;
MLIL_ADDRESS_OF_FIELD sub operation;
MLIL_CONST sub operation;
MLIL_CONST_PTR sub operation;
MLIL_ADD sub operation;
MLIL_ADC sub operation;
MLIL_SUB sub operation;
MLIL_SBB sub operation;
MLIL_AND sub operation;
MLIL_OR sub operation;
MLIL_XOR sub operation;
MLIL_LSL sub operation;
MLIL_LSR sub operation;
MLIL_ASR sub operation;
MLIL_ROL sub operation;
MLIL_RLC sub operation;
MLIL_ROR sub operation;
MLIL_RRC sub operation;
MLIL_MUL sub operation;
MLIL_MULU_DP sub operation;
MLIL_MULS_DP sub operation;
MLIL_DIVU sub operation;
MLIL_DIVU_DP sub operation;
MLIL_DIVS sub operation;
MLIL_DIVS_DP sub operation;
MLIL_MODU sub operation;
MLIL_MODU_DP sub operation;
MLIL_MODS sub operation;
MLIL_MODS_DP sub operation;
MLIL_NEG sub operation;
MLIL_NOT sub operation;
MLIL_SX sub operation;
MLIL_ZX sub operation;
MLIL_LOW_PART sub operation;
MLIL_JUMP sub operation;
MLIL_JUMP_TO sub operation;
MLIL_CALL sub operation;
MLIL_CALL_UNTYPED sub operation;
MLIL_CALL_OUTPUT sub operation;
MLIL_CALL_PARAM sub operation;
MLIL_RET sub operation;
MLIL_NORET sub operation;
MLIL_IF sub operation;
MLIL_GOTO sub operation;
MLIL_CMP_E sub operation;
MLIL_CMP_NE sub operation;
MLIL_CMP_SLT sub operation;
MLIL_CMP_ULT sub operation;
MLIL_CMP_SLE sub operation;
MLIL_CMP_ULE sub operation;
MLIL_CMP_SGE sub operation;
MLIL_CMP_UGE sub operation;
MLIL_CMP_SGT sub operation;
MLIL_CMP_UGT sub operation;
MLIL_TEST_BIT sub operation;
MLIL_BOOL_TO_INT sub operation;
MLIL_ADD_OVERFLOW sub operation;
MLIL_SYSCALL sub operation;
MLIL_SYSCALL_UNTYPED sub operation;
MLIL_BP sub operation;
MLIL_TRAP sub operation;
MLIL_UNDEF sub operation;
MLIL_UNIMPL sub operation;
MLIL_UNIMPL_MEM sub operation;
MLIL_IMPORT sub operation;
MLIL_SET_VAR_SSA sub operation;
MLIL_SET_VAR_SSA_FIELD sub operation;
MLIL_SET_VAR_SPLIT_SSA sub operation;
MLIL_SET_VAR_ALIASED sub operation;
MLIL_SET_VAR_ALIASED_FIELD sub operation;
MLIL_VAR_SSA sub operation;
MLIL_VAR_SSA_FIELD sub operation;
MLIL_VAR_ALIASED sub operation;
MLIL_VAR_ALIASED_FIELD sub operation;
MLIL_CALL_SSA sub operation;
MLIL_CALL_UNTYPED_SSA sub operation;
MLIL_SYSCALL_SSA sub operation;
MLIL_SYSCALL_UNTYPED_SSA sub operation;
MLIL_CALL_OUTPUT_SSA sub operation;
MLIL_CALL_PARAM_SSA sub operation;
MLIL_LOAD_SSA sub operation;
MLIL_STORE_SSA sub operation;
MLIL_VAR_PHI sub operation;
MLIL_MEM_PHI sub operation;


## RESOURCES (has) ##############################
stack			sub resource datatype string;
operation-type 		sub resource datatype string;
ins-text		sub resource datatype string;
name			sub resource datatype string;
asm-address 		sub resource datatype string;
edge-label 		sub resource datatype string;
constant-value 		sub resource datatype string;
hash 			sub resource datatype string;
var 			sub resource datatype string;
var-type 		sub resource datatype string;
var-func 		sub resource datatype string;
var-size		sub resource datatype long;
bb-start		sub resource datatype long;
bb-end			sub resource datatype long;
il-index 		sub resource datatype long;
list-size 		sub resource datatype long;
int 			sub resource datatype long;
version 		sub resource datatype long;
size			sub resource datatype long;
if-true 		sub resource datatype long;
if-false 		sub resource datatype long;


## ROLES (plays) ################################
in-function 			sub role;

from-basic-block 		sub role;
to-basic-block			sub role;
in-basic-block 			sub role;
contains-basic-block 	sub role;

in-instruction 			sub role;
contains-instruction 	sub role;

in-operation 			sub role;
contains-operation 		sub role;

from-node 				sub role;
to-node					sub role;

trace					sub role;
## RELATIONS ####################################
has-basic-block sub relation
	relates in-function
	relates contains-basic-block;

basic-block-edge sub relation
	relates from-basic-block
	relates to-basic-block;

has-instruction sub relation
    relates contains-instruction
    relates in-basic-block;

instruction-has-operation sub relation
	relates contains-operation
	relates in-instruction;

operation-has-operation sub relation
	relates contains-operation
	relates in-operation;

node-link sub relation
	relates from-node
	relates to-node;

trace-link sub relation
	relates trace;

trace-instruction sub relation
	relates trace;

trace-full sub relation
	relates trace;
## INFERRENCE RULES #############################
$share-var isa inference-rule
when {
	$v1 isa variable-ssa, has var $var;
	$v2 isa variable-ssa, has var $var;
	$v1 != $v2;
},
then {
	(trace:$v1, trace:$v2) isa trace-link;
};
$share-instruction isa inference-rule
when {
	$v1 isa variable-ssa;
	$v2 isa MLIL_VAR_SSA;
	(to-node:$v1, from-node:$v2);
	$v4 isa variable-ssa;
	$v3 isa MLIL_VAR_SSA;
	(to-node:$v4, from-node:$v3);
	(from-node:$inst, to-node:$v2);
	(from-node:$inst, to-node:$v3);
	$inst isa instruction;
	$v1 != $v2;$v2 != $v3;$v3 != $v4;$v1 != $v4;$v2 != $v4;$v1 != $v3;
},
then {
	(trace:$v1, trace:$v4) isa trace-instruction;
};
$trace-goal isa inference-rule
when {
	(trace:$v1,trace:$v2) isa trace-link;
	(trace:$v2,trace:$v3) isa trace-instruction;
	$v1 != $v2;$v2 != $v3;$v1 != $v3;
},
then {
	(trace:$v1, trace:$v3) isa trace-full;
};    

insert 
$func__init isa function, has name "_init", has asm-address "0x400428", has stack "[<var void var_8>, <var void* const __return_addr>]"; 

match 
$func__init isa function, has name "_init"; 

insert 
$bb isa basic-block, has bb-start 0, has bb-end 1; 
(contains-basic-block: $bb, in-function: $func__init) isa has-basic-block; 

match 
$func__init isa function, has name "_init"; 
$bb isa basic-block, has bb-start 0, has bb-end 1; 
(in-function: $func__init, contains-basic-block: $bb) isa has-basic-block; 

match
$func__init isa function, has name "_init"; 
$bb isa basic-block, has bb-start 0, has bb-end 1; 
(in-function: $func__init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827902557_4195372c isa instruction, has hash "N_8755827902557_4195372c", has il-index 0, has asm-address "0x40042c", has operation-type "MLIL_SET_VAR_SSA", has ins-text "rax#1 = __gmon_start__";
(contains-instruction: $N_8755827902557_4195372c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827902557_4195372c isa instruction, has hash "N_8755827902557_4195372c"; 

insert
$N_8755827902557_4195372c_0 isa variable-ssa, has hash "N_8755827902557_4195372c_0", has var "rax", has version 1, has edge-label "dest", has var-type "void* const", has var-size 4, has var-func "_init";
(to-node: $N_8755827902557_4195372c_0, from-node: $N_8755827902557_4195372c) isa node-link; 

match
$N_8755827902557_4195372c isa instruction, has hash "N_8755827902557_4195372c"; 

insert
$N_8755827902557_4195372c_1 isa MLIL_IMPORT, has hash "N_8755827902557_4195372c_1", has edge-label "src";
(to-node: $N_8755827902557_4195372c_1, from-node: $N_8755827902557_4195372c) isa node-link; 

match
$N_8755827902557_4195372c_1 isa operation, has hash "N_8755827902557_4195372c_1"; 

insert
$N_8755827902557_4195372c_1_0 isa constant, has hash "N_8755827902557_4195372c_1_0", has constant-value "6295544", has edge-label "constant";
(to-node: $N_8755827902557_4195372c_1_0, from-node: $N_8755827902557_4195372c_1) isa node-link; 

match 
$func__init isa function, has name "_init"; 
$bb isa basic-block, has bb-start 0, has bb-end 1; 
(in-function: $func__init, contains-basic-block: $bb) isa has-basic-block; 

match
$func__init isa function, has name "_init"; 
$bb isa basic-block, has bb-start 0, has bb-end 1; 
(in-function: $func__init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827903381_4195382c isa instruction, has hash "N_8755827903381_4195382c", has il-index 1, has asm-address "0x400436", has operation-type "MLIL_IF", has ins-text "if (__gmon_start__ == 0) then 2 @ 0x0 else 3 @ 0x400438";
(contains-instruction: $N_8755827903381_4195382c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827903381_4195382c isa instruction, has hash "N_8755827903381_4195382c"; 

insert
$N_8755827903381_4195382c_0 isa MLIL_CMP_E, has hash "N_8755827903381_4195382c_0", has edge-label "condition";
(to-node: $N_8755827903381_4195382c_0, from-node: $N_8755827903381_4195382c) isa node-link; 

match
$N_8755827903381_4195382c_0 isa operation, has hash "N_8755827903381_4195382c_0"; 

insert
$N_8755827903381_4195382c_0_0 isa MLIL_IMPORT, has hash "N_8755827903381_4195382c_0_0", has edge-label "left";
(to-node: $N_8755827903381_4195382c_0_0, from-node: $N_8755827903381_4195382c_0) isa node-link; 

match
$N_8755827903381_4195382c_0_0 isa operation, has hash "N_8755827903381_4195382c_0_0"; 

insert
$N_8755827903381_4195382c_0_0_0 isa constant, has hash "N_8755827903381_4195382c_0_0_0", has constant-value "6295544", has edge-label "constant";
(to-node: $N_8755827903381_4195382c_0_0_0, from-node: $N_8755827903381_4195382c_0_0) isa node-link; 

match
$N_8755827903381_4195382c_0 isa operation, has hash "N_8755827903381_4195382c_0"; 

insert
$N_8755827903381_4195382c_0_1 isa MLIL_CONST, has hash "N_8755827903381_4195382c_0_1", has edge-label "right";
(to-node: $N_8755827903381_4195382c_0_1, from-node: $N_8755827903381_4195382c_0) isa node-link; 

match
$N_8755827903381_4195382c_0_1 isa operation, has hash "N_8755827903381_4195382c_0_1"; 

insert
$N_8755827903381_4195382c_0_1_0 isa constant, has hash "N_8755827903381_4195382c_0_1_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8755827903381_4195382c_0_1_0, from-node: $N_8755827903381_4195382c_0_1) isa node-link; 

match
$N_8755827903381_4195382c isa instruction, has hash "N_8755827903381_4195382c"; 

insert
$N_8755827903381_4195382c_1 isa constant, has hash "N_8755827903381_4195382c_1", has constant-value "2", has edge-label "true";
(to-node: $N_8755827903381_4195382c_1, from-node: $N_8755827903381_4195382c) isa node-link; 

match
$N_8755827903381_4195382c isa instruction, has hash "N_8755827903381_4195382c"; 

insert
$N_8755827903381_4195382c_2 isa constant, has hash "N_8755827903381_4195382c_2", has constant-value "3", has edge-label "false";
(to-node: $N_8755827903381_4195382c_2, from-node: $N_8755827903381_4195382c) isa node-link; 

match 
$func__init isa function, has name "_init"; 

insert 
$bb isa basic-block, has bb-start 2, has bb-end 2; 
(contains-basic-block: $bb, in-function: $func__init) isa has-basic-block; 

match 
$func__init isa function, has name "_init"; 
$bb isa basic-block, has bb-start 2, has bb-end 2; 
(in-function: $func__init, contains-basic-block: $bb) isa has-basic-block; 

match
$func__init isa function, has name "_init"; 
$bb isa basic-block, has bb-start 2, has bb-end 2; 
(in-function: $func__init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827906965_0c isa instruction, has hash "N_8755827906965_0c", has il-index 2, has asm-address "0x0", has operation-type "MLIL_GOTO", has ins-text "goto 5 @ 0x400441";
(contains-instruction: $N_8755827906965_0c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827906965_0c isa instruction, has hash "N_8755827906965_0c"; 

insert
$N_8755827906965_0c_0 isa constant, has hash "N_8755827906965_0c_0", has constant-value "5", has edge-label "dest";
(to-node: $N_8755827906965_0c_0, from-node: $N_8755827906965_0c) isa node-link; 

match 
$func__init isa function, has name "_init"; 

insert 
$bb isa basic-block, has bb-start 3, has bb-end 4; 
(contains-basic-block: $bb, in-function: $func__init) isa has-basic-block; 

match 
$func__init isa function, has name "_init"; 
$bb isa basic-block, has bb-start 3, has bb-end 4; 
(in-function: $func__init, contains-basic-block: $bb) isa has-basic-block; 

match
$func__init isa function, has name "_init"; 
$bb isa basic-block, has bb-start 3, has bb-end 4; 
(in-function: $func__init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827894849_4195384c isa instruction, has hash "N_8755827894849_4195384c", has il-index 4, has asm-address "0x400438", has operation-type "MLIL_GOTO", has ins-text "goto 5 @ 0x400441";
(contains-instruction: $N_8755827894849_4195384c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827894849_4195384c isa instruction, has hash "N_8755827894849_4195384c"; 

insert
$N_8755827894849_4195384c_0 isa constant, has hash "N_8755827894849_4195384c_0", has constant-value "5", has edge-label "dest";
(to-node: $N_8755827894849_4195384c_0, from-node: $N_8755827894849_4195384c) isa node-link; 

match
$func__init isa function, has name "_init"; 
$bb isa basic-block, has bb-start 3, has bb-end 4; 
(in-function: $func__init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827894869_4195384c isa instruction, has hash "N_8755827894869_4195384c", has il-index 3, has asm-address "0x400438", has operation-type "MLIL_CALL_SSA", has ins-text "rax#2, mem#1 = 0x400490() @ mem#0";
(contains-instruction: $N_8755827894869_4195384c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827894869_4195384c isa instruction, has hash "N_8755827894869_4195384c"; 

insert
$N_8755827894869_4195384c_0 isa MLIL_CALL_OUTPUT_SSA, has hash "N_8755827894869_4195384c_0", has edge-label "output";
(to-node: $N_8755827894869_4195384c_0, from-node: $N_8755827894869_4195384c) isa node-link; 

match
$N_8755827894869_4195384c_0 isa operation, has hash "N_8755827894869_4195384c_0"; 

insert
$N_8755827894869_4195384c_0_0 isa constant, has hash "N_8755827894869_4195384c_0_0", has constant-value "1", has edge-label "dest_memory";
(to-node: $N_8755827894869_4195384c_0_0, from-node: $N_8755827894869_4195384c_0) isa node-link; 

match
$N_8755827894869_4195384c_0 isa operation, has hash "N_8755827894869_4195384c_0"; 

insert
$L_8755827894869_4195384c_0_1 isa list, has hash "L_8755827894869_4195384c_0_1", has list-size 1, has edge-label "dest";
(to-node: $L_8755827894869_4195384c_0_1, from-node: $N_8755827894869_4195384c_0) isa node-link; 

match
$L_8755827894869_4195384c_0_1 isa list, has hash "L_8755827894869_4195384c_0_1"; 

insert
$N_8755827894869_4195384c_0_1_0 isa variable-ssa, has hash "N_8755827894869_4195384c_0_1_0", has var "rax", has version 2, has edge-label "0", has var-type "void* const", has var-size 4, has var-func "_init";
(to-node: $N_8755827894869_4195384c_0_1_0, from-node: $L_8755827894869_4195384c_0_1) isa node-link; 

match
$N_8755827894869_4195384c isa instruction, has hash "N_8755827894869_4195384c"; 

insert
$N_8755827894869_4195384c_1 isa MLIL_CONST_PTR, has hash "N_8755827894869_4195384c_1", has edge-label "dest";
(to-node: $N_8755827894869_4195384c_1, from-node: $N_8755827894869_4195384c) isa node-link; 

match
$N_8755827894869_4195384c_1 isa operation, has hash "N_8755827894869_4195384c_1"; 

insert
$N_8755827894869_4195384c_1_0 isa constant, has hash "N_8755827894869_4195384c_1_0", has constant-value "4195472", has edge-label "constant";
(to-node: $N_8755827894869_4195384c_1_0, from-node: $N_8755827894869_4195384c_1) isa node-link; 

match
$N_8755827894869_4195384c isa instruction, has hash "N_8755827894869_4195384c"; 

insert
$L_8755827894869_4195384c_2 isa list, has hash "L_8755827894869_4195384c_2", has list-size 0, has edge-label "params";
(to-node: $L_8755827894869_4195384c_2, from-node: $N_8755827894869_4195384c) isa node-link; 

match
$N_8755827894869_4195384c isa instruction, has hash "N_8755827894869_4195384c"; 

insert
$N_8755827894869_4195384c_3 isa constant, has hash "N_8755827894869_4195384c_3", has constant-value "0", has edge-label "src_memory";
(to-node: $N_8755827894869_4195384c_3, from-node: $N_8755827894869_4195384c) isa node-link; 

match 
$func__init isa function, has name "_init"; 

insert 
$bb isa basic-block, has bb-start 5, has bb-end 7; 
(contains-basic-block: $bb, in-function: $func__init) isa has-basic-block; 

match 
$func__init isa function, has name "_init"; 
$bb isa basic-block, has bb-start 5, has bb-end 7; 
(in-function: $func__init, contains-basic-block: $bb) isa has-basic-block; 

match
$func__init isa function, has name "_init"; 
$bb isa basic-block, has bb-start 5, has bb-end 7; 
(in-function: $func__init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827869485_4195393c isa instruction, has hash "N_8755827869485_4195393c", has il-index 7, has asm-address "0x400441", has operation-type "MLIL_RET", has ins-text "return rax#3";
(contains-instruction: $N_8755827869485_4195393c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827869485_4195393c isa instruction, has hash "N_8755827869485_4195393c"; 

insert
$L_8755827869485_4195393c_0 isa list, has hash "L_8755827869485_4195393c_0", has list-size 1, has edge-label "src";
(to-node: $L_8755827869485_4195393c_0, from-node: $N_8755827869485_4195393c) isa node-link; 

match
$L_8755827869485_4195393c_0 isa list, has hash "L_8755827869485_4195393c_0"; 

insert
$N_8755827869485_4195393c_0_0 isa MLIL_VAR_SSA, has hash "N_8755827869485_4195393c_0_0", has edge-label "0";
(to-node: $N_8755827869485_4195393c_0_0, from-node: $L_8755827869485_4195393c_0) isa node-link; 

match
$N_8755827869485_4195393c_0_0 isa operation, has hash "N_8755827869485_4195393c_0_0"; 

insert
$N_8755827869485_4195393c_0_0_0 isa variable-ssa, has hash "N_8755827869485_4195393c_0_0_0", has var "rax", has version 3, has edge-label "src", has var-type "void* const", has var-size 4, has var-func "_init";
(to-node: $N_8755827869485_4195393c_0_0_0, from-node: $N_8755827869485_4195393c_0_0) isa node-link; 

match
$func__init isa function, has name "_init"; 
$bb isa basic-block, has bb-start 5, has bb-end 7; 
(in-function: $func__init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827894181_4195393c isa instruction, has hash "N_8755827894181_4195393c", has il-index 6, has asm-address "0x400441", has operation-type "MLIL_MEM_PHI", has ins-text "mem#2 = ϕ(mem#0, mem#1)";
(contains-instruction: $N_8755827894181_4195393c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827894181_4195393c isa instruction, has hash "N_8755827894181_4195393c"; 

insert
$N_8755827894181_4195393c_0 isa constant, has hash "N_8755827894181_4195393c_0", has constant-value "2", has edge-label "dest_memory";
(to-node: $N_8755827894181_4195393c_0, from-node: $N_8755827894181_4195393c) isa node-link; 

match
$N_8755827894181_4195393c isa instruction, has hash "N_8755827894181_4195393c"; 

insert
$L_8755827894181_4195393c_1 isa list, has hash "L_8755827894181_4195393c_1", has list-size 2, has edge-label "src_memory";
(to-node: $L_8755827894181_4195393c_1, from-node: $N_8755827894181_4195393c) isa node-link; 

match
$L_8755827894181_4195393c_1 isa list, has hash "L_8755827894181_4195393c_1"; 

insert
$N_8755827894181_4195393c_1_0 isa constant, has hash "N_8755827894181_4195393c_1_0", has constant-value "0", has edge-label "0";
(to-node: $N_8755827894181_4195393c_1_0, from-node: $L_8755827894181_4195393c_1) isa node-link; 

match
$L_8755827894181_4195393c_1 isa list, has hash "L_8755827894181_4195393c_1"; 

insert
$N_8755827894181_4195393c_1_1 isa constant, has hash "N_8755827894181_4195393c_1_1", has constant-value "1", has edge-label "1";
(to-node: $N_8755827894181_4195393c_1_1, from-node: $L_8755827894181_4195393c_1) isa node-link; 

match
$func__init isa function, has name "_init"; 
$bb isa basic-block, has bb-start 5, has bb-end 7; 
(in-function: $func__init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827906009_4195393c isa instruction, has hash "N_8755827906009_4195393c", has il-index 5, has asm-address "0x400441", has operation-type "MLIL_VAR_PHI", has ins-text "rax#3 = ϕ(rax#1, rax#2)";
(contains-instruction: $N_8755827906009_4195393c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827906009_4195393c isa instruction, has hash "N_8755827906009_4195393c"; 

insert
$N_8755827906009_4195393c_0 isa variable-ssa, has hash "N_8755827906009_4195393c_0", has var "rax", has version 3, has edge-label "dest", has var-type "void* const", has var-size 4, has var-func "_init";
(to-node: $N_8755827906009_4195393c_0, from-node: $N_8755827906009_4195393c) isa node-link; 

match
$N_8755827906009_4195393c isa instruction, has hash "N_8755827906009_4195393c"; 

insert
$L_8755827906009_4195393c_1 isa list, has hash "L_8755827906009_4195393c_1", has list-size 2, has edge-label "src";
(to-node: $L_8755827906009_4195393c_1, from-node: $N_8755827906009_4195393c) isa node-link; 

match
$L_8755827906009_4195393c_1 isa list, has hash "L_8755827906009_4195393c_1"; 

insert
$N_8755827906009_4195393c_1_0 isa variable-ssa, has hash "N_8755827906009_4195393c_1_0", has var "rax", has version 1, has edge-label "0", has var-type "void* const", has var-size 4, has var-func "_init";
(to-node: $N_8755827906009_4195393c_1_0, from-node: $L_8755827906009_4195393c_1) isa node-link; 

match
$L_8755827906009_4195393c_1 isa list, has hash "L_8755827906009_4195393c_1"; 

insert
$N_8755827906009_4195393c_1_1 isa variable-ssa, has hash "N_8755827906009_4195393c_1_1", has var "rax", has version 2, has edge-label "1", has var-type "void* const", has var-size 4, has var-func "_init";
(to-node: $N_8755827906009_4195393c_1_1, from-node: $L_8755827906009_4195393c_1) isa node-link; 

match 
$func__init isa function, has name "_init"; 
$frombb isa basic-block, has bb-end 1, has bb-start 0; 
$tobb   isa basic-block, has bb-end 2, has bb-start 2; 
(contains-basic-block: $frombb, in-function: $func__init) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func__init) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func__init isa function, has name "_init"; 
$frombb isa basic-block, has bb-end 1, has bb-start 0; 
$tobb   isa basic-block, has bb-end 4, has bb-start 3; 
(contains-basic-block: $frombb, in-function: $func__init) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func__init) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func__init isa function, has name "_init"; 
$frombb isa basic-block, has bb-end 2, has bb-start 2; 
$tobb   isa basic-block, has bb-end 7, has bb-start 5; 
(contains-basic-block: $frombb, in-function: $func__init) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func__init) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func__init isa function, has name "_init"; 
$frombb isa basic-block, has bb-end 4, has bb-start 3; 
$tobb   isa basic-block, has bb-end 7, has bb-start 5; 
(contains-basic-block: $frombb, in-function: $func__init) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func__init) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

insert 
$func___stack_chk_fail isa function, has name "__stack_chk_fail", has asm-address "0x400460", has stack "[<var void* const __return_addr>]"; 

match 
$func___stack_chk_fail isa function, has name "__stack_chk_fail"; 

insert 
$bb isa basic-block, has bb-start 0, has bb-end 0; 
(contains-basic-block: $bb, in-function: $func___stack_chk_fail) isa has-basic-block; 

match 
$func___stack_chk_fail isa function, has name "__stack_chk_fail"; 
$bb isa basic-block, has bb-start 0, has bb-end 0; 
(in-function: $func___stack_chk_fail, contains-basic-block: $bb) isa has-basic-block; 

match
$func___stack_chk_fail isa function, has name "__stack_chk_fail"; 
$bb isa basic-block, has bb-start 0, has bb-end 0; 
(in-function: $func___stack_chk_fail, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827913105_4195424c isa instruction, has hash "N_8755827913105_4195424c", has il-index 0, has asm-address "0x400460", has operation-type "MLIL_JUMP", has ins-text "jump(__stack_chk_fail)";
(contains-instruction: $N_8755827913105_4195424c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827913105_4195424c isa instruction, has hash "N_8755827913105_4195424c"; 

insert
$N_8755827913105_4195424c_0 isa MLIL_IMPORT, has hash "N_8755827913105_4195424c_0", has edge-label "dest";
(to-node: $N_8755827913105_4195424c_0, from-node: $N_8755827913105_4195424c) isa node-link; 

match
$N_8755827913105_4195424c_0 isa operation, has hash "N_8755827913105_4195424c_0"; 

insert
$N_8755827913105_4195424c_0_0 isa constant, has hash "N_8755827913105_4195424c_0_0", has constant-value "6295576", has edge-label "constant";
(to-node: $N_8755827913105_4195424c_0_0, from-node: $N_8755827913105_4195424c_0) isa node-link; 

insert 
$func_printf isa function, has name "printf", has asm-address "0x400470", has stack "[<var void* const __return_addr>]"; 

match 
$func_printf isa function, has name "printf"; 

insert 
$bb isa basic-block, has bb-start 0, has bb-end 0; 
(contains-basic-block: $bb, in-function: $func_printf) isa has-basic-block; 

match 
$func_printf isa function, has name "printf"; 
$bb isa basic-block, has bb-start 0, has bb-end 0; 
(in-function: $func_printf, contains-basic-block: $bb) isa has-basic-block; 

match
$func_printf isa function, has name "printf"; 
$bb isa basic-block, has bb-start 0, has bb-end 0; 
(in-function: $func_printf, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755828976529_4195440c isa instruction, has hash "N_8755828976529_4195440c", has il-index 0, has asm-address "0x400470", has operation-type "MLIL_JUMP", has ins-text "jump(printf)";
(contains-instruction: $N_8755828976529_4195440c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755828976529_4195440c isa instruction, has hash "N_8755828976529_4195440c"; 

insert
$N_8755828976529_4195440c_0 isa MLIL_IMPORT, has hash "N_8755828976529_4195440c_0", has edge-label "dest";
(to-node: $N_8755828976529_4195440c_0, from-node: $N_8755828976529_4195440c) isa node-link; 

match
$N_8755828976529_4195440c_0 isa operation, has hash "N_8755828976529_4195440c_0"; 

insert
$N_8755828976529_4195440c_0_0 isa constant, has hash "N_8755828976529_4195440c_0_0", has constant-value "6295584", has edge-label "constant";
(to-node: $N_8755828976529_4195440c_0_0, from-node: $N_8755828976529_4195440c_0) isa node-link; 

insert 
$func___libc_start_main isa function, has name "__libc_start_main", has asm-address "0x400480", has stack "[<var void* const __return_addr>, <var void* stack_end>]"; 

match 
$func___libc_start_main isa function, has name "__libc_start_main"; 

insert 
$bb isa basic-block, has bb-start 0, has bb-end 0; 
(contains-basic-block: $bb, in-function: $func___libc_start_main) isa has-basic-block; 

match 
$func___libc_start_main isa function, has name "__libc_start_main"; 
$bb isa basic-block, has bb-start 0, has bb-end 0; 
(in-function: $func___libc_start_main, contains-basic-block: $bb) isa has-basic-block; 

match
$func___libc_start_main isa function, has name "__libc_start_main"; 
$bb isa basic-block, has bb-start 0, has bb-end 0; 
(in-function: $func___libc_start_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827913105_4195456c isa instruction, has hash "N_8755827913105_4195456c", has il-index 0, has asm-address "0x400480", has operation-type "MLIL_JUMP", has ins-text "jump(__libc_start_main)";
(contains-instruction: $N_8755827913105_4195456c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827913105_4195456c isa instruction, has hash "N_8755827913105_4195456c"; 

insert
$N_8755827913105_4195456c_0 isa MLIL_IMPORT, has hash "N_8755827913105_4195456c_0", has edge-label "dest";
(to-node: $N_8755827913105_4195456c_0, from-node: $N_8755827913105_4195456c) isa node-link; 

match
$N_8755827913105_4195456c_0 isa operation, has hash "N_8755827913105_4195456c_0"; 

insert
$N_8755827913105_4195456c_0_0 isa constant, has hash "N_8755827913105_4195456c_0_0", has constant-value "6295592", has edge-label "constant";
(to-node: $N_8755827913105_4195456c_0_0, from-node: $N_8755827913105_4195456c_0) isa node-link; 

insert 
$func___gmon_start__ isa function, has name "__gmon_start__", has asm-address "0x400490", has stack "[<var void* const __return_addr>]"; 

match 
$func___gmon_start__ isa function, has name "__gmon_start__"; 

insert 
$bb isa basic-block, has bb-start 0, has bb-end 0; 
(contains-basic-block: $bb, in-function: $func___gmon_start__) isa has-basic-block; 

match 
$func___gmon_start__ isa function, has name "__gmon_start__"; 
$bb isa basic-block, has bb-start 0, has bb-end 0; 
(in-function: $func___gmon_start__, contains-basic-block: $bb) isa has-basic-block; 

match
$func___gmon_start__ isa function, has name "__gmon_start__"; 
$bb isa basic-block, has bb-start 0, has bb-end 0; 
(in-function: $func___gmon_start__, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755828979073_4195472c isa instruction, has hash "N_8755828979073_4195472c", has il-index 0, has asm-address "0x400490", has operation-type "MLIL_JUMP", has ins-text "jump(__gmon_start__)";
(contains-instruction: $N_8755828979073_4195472c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755828979073_4195472c isa instruction, has hash "N_8755828979073_4195472c"; 

insert
$N_8755828979073_4195472c_0 isa MLIL_IMPORT, has hash "N_8755828979073_4195472c_0", has edge-label "dest";
(to-node: $N_8755828979073_4195472c_0, from-node: $N_8755828979073_4195472c) isa node-link; 

match
$N_8755828979073_4195472c_0 isa operation, has hash "N_8755828979073_4195472c_0"; 

insert
$N_8755828979073_4195472c_0_0 isa constant, has hash "N_8755828979073_4195472c_0_0", has constant-value "6295544", has edge-label "constant";
(to-node: $N_8755828979073_4195472c_0_0, from-node: $N_8755828979073_4195472c_0) isa node-link; 

insert 
$func__start isa function, has name "_start", has asm-address "0x4004a0", has stack "[<var void* var_10>, <var int64_t var_8>, <var void* const __return_addr>, <var void arg_8>]"; 

match 
$func__start isa function, has name "_start"; 

insert 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(contains-basic-block: $bb, in-function: $func__start) isa has-basic-block; 

match 
$func__start isa function, has name "_start"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func__start, contains-basic-block: $bb) isa has-basic-block; 

match
$func__start isa function, has name "_start"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func__start, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755828978853_4195490c isa instruction, has hash "N_8755828978853_4195490c", has il-index 0, has asm-address "0x4004a2", has operation-type "MLIL_SET_VAR_SSA", has ins-text "r9#1 = arg3#0";
(contains-instruction: $N_8755828978853_4195490c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755828978853_4195490c isa instruction, has hash "N_8755828978853_4195490c"; 

insert
$N_8755828978853_4195490c_0 isa variable-ssa, has hash "N_8755828978853_4195490c_0", has var "r9", has version 1, has edge-label "dest", has var-type "void (*)()", has var-size 4, has var-func "_start";
(to-node: $N_8755828978853_4195490c_0, from-node: $N_8755828978853_4195490c) isa node-link; 

match
$N_8755828978853_4195490c isa instruction, has hash "N_8755828978853_4195490c"; 

insert
$N_8755828978853_4195490c_1 isa MLIL_VAR_SSA, has hash "N_8755828978853_4195490c_1", has edge-label "src";
(to-node: $N_8755828978853_4195490c_1, from-node: $N_8755828978853_4195490c) isa node-link; 

match
$N_8755828978853_4195490c_1 isa operation, has hash "N_8755828978853_4195490c_1"; 

insert
$N_8755828978853_4195490c_1_0 isa variable-ssa, has hash "N_8755828978853_4195490c_1_0", has var "arg3", has version 0, has edge-label "src", has var-type "void (*)()", has var-size 4, has var-func "_start";
(to-node: $N_8755828978853_4195490c_1_0, from-node: $N_8755828978853_4195490c_1) isa node-link; 

match 
$func__start isa function, has name "_start"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func__start, contains-basic-block: $bb) isa has-basic-block; 

match
$func__start isa function, has name "_start"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func__start, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755828975377_4195493c isa instruction, has hash "N_8755828975377_4195493c", has il-index 1, has asm-address "0x4004a5", has operation-type "MLIL_SET_VAR_SSA", has ins-text "rsi#1 = __return_addr#0";
(contains-instruction: $N_8755828975377_4195493c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755828975377_4195493c isa instruction, has hash "N_8755828975377_4195493c"; 

insert
$N_8755828975377_4195493c_0 isa variable-ssa, has hash "N_8755828975377_4195493c_0", has var "rsi", has version 1, has edge-label "dest", has var-type "void* const", has var-size 4, has var-func "_start";
(to-node: $N_8755828975377_4195493c_0, from-node: $N_8755828975377_4195493c) isa node-link; 

match
$N_8755828975377_4195493c isa instruction, has hash "N_8755828975377_4195493c"; 

insert
$N_8755828975377_4195493c_1 isa MLIL_VAR_SSA, has hash "N_8755828975377_4195493c_1", has edge-label "src";
(to-node: $N_8755828975377_4195493c_1, from-node: $N_8755828975377_4195493c) isa node-link; 

match
$N_8755828975377_4195493c_1 isa operation, has hash "N_8755828975377_4195493c_1"; 

insert
$N_8755828975377_4195493c_1_0 isa variable-ssa, has hash "N_8755828975377_4195493c_1_0", has var "__return_addr", has version 0, has edge-label "src", has var-type "void* const", has var-size 4, has var-func "_start";
(to-node: $N_8755828975377_4195493c_1_0, from-node: $N_8755828975377_4195493c_1) isa node-link; 

match 
$func__start isa function, has name "_start"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func__start, contains-basic-block: $bb) isa has-basic-block; 

match
$func__start isa function, has name "_start"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func__start, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827880197_4195494c isa instruction, has hash "N_8755827880197_4195494c", has il-index 2, has asm-address "0x4004a6", has operation-type "MLIL_SET_VAR_SSA", has ins-text "rdx#1 = &arg_8";
(contains-instruction: $N_8755827880197_4195494c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827880197_4195494c isa instruction, has hash "N_8755827880197_4195494c"; 

insert
$N_8755827880197_4195494c_0 isa variable-ssa, has hash "N_8755827880197_4195494c_0", has var "rdx", has version 1, has edge-label "dest", has var-type "char**", has var-size 4, has var-func "_start";
(to-node: $N_8755827880197_4195494c_0, from-node: $N_8755827880197_4195494c) isa node-link; 

match
$N_8755827880197_4195494c isa instruction, has hash "N_8755827880197_4195494c"; 

insert
$N_8755827880197_4195494c_1 isa MLIL_ADDRESS_OF, has hash "N_8755827880197_4195494c_1", has edge-label "src";
(to-node: $N_8755827880197_4195494c_1, from-node: $N_8755827880197_4195494c) isa node-link; 

match
$N_8755827880197_4195494c_1 isa operation, has hash "N_8755827880197_4195494c_1"; 

insert
$N_8755827880197_4195494c_1_0 isa variable, has hash "N_8755827880197_4195494c_1_0", has var "arg_8", has edge-label "src", has var-type "void", has var-size 4, has var-func "_start";
(to-node: $N_8755827880197_4195494c_1_0, from-node: $N_8755827880197_4195494c_1) isa node-link; 

match 
$func__start isa function, has name "_start"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func__start, contains-basic-block: $bb) isa has-basic-block; 

match
$func__start isa function, has name "_start"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func__start, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827892485_4195501c isa instruction, has hash "N_8755827892485_4195501c", has il-index 3, has asm-address "0x4004ad", has operation-type "MLIL_SET_VAR_ALIASED", has ins-text "var_8 @ mem#0 -> mem#1 = arg4#0";
(contains-instruction: $N_8755827892485_4195501c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827892485_4195501c isa instruction, has hash "N_8755827892485_4195501c"; 

insert
$N_8755827892485_4195501c_0 isa variable-ssa, has hash "N_8755827892485_4195501c_0", has var "var_8", has version 1, has edge-label "prev", has var-type "int64_t", has var-size 8, has var-func "_start";
(to-node: $N_8755827892485_4195501c_0, from-node: $N_8755827892485_4195501c) isa node-link; 

match
$N_8755827892485_4195501c isa instruction, has hash "N_8755827892485_4195501c"; 

insert
$N_8755827892485_4195501c_1 isa variable-ssa, has hash "N_8755827892485_4195501c_1", has var "var_8", has version 0, has edge-label "src", has var-type "int64_t", has var-size 8, has var-func "_start";
(to-node: $N_8755827892485_4195501c_1, from-node: $N_8755827892485_4195501c) isa node-link; 

match
$N_8755827892485_4195501c isa instruction, has hash "N_8755827892485_4195501c"; 

insert
$N_8755827892485_4195501c_2 isa MLIL_VAR_SSA, has hash "N_8755827892485_4195501c_2", has edge-label "unimplemented";
(to-node: $N_8755827892485_4195501c_2, from-node: $N_8755827892485_4195501c) isa node-link; 

match
$N_8755827892485_4195501c_2 isa operation, has hash "N_8755827892485_4195501c_2"; 

insert
$N_8755827892485_4195501c_2_0 isa variable-ssa, has hash "N_8755827892485_4195501c_2_0", has var "arg4", has version 0, has edge-label "src", has var-type "int64_t", has var-size 4, has var-func "_start";
(to-node: $N_8755827892485_4195501c_2_0, from-node: $N_8755827892485_4195501c_2) isa node-link; 

match 
$func__start isa function, has name "_start"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func__start, contains-basic-block: $bb) isa has-basic-block; 

match
$func__start isa function, has name "_start"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func__start, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827877317_4195502c isa instruction, has hash "N_8755827877317_4195502c", has il-index 4, has asm-address "0x4004ae", has operation-type "MLIL_SET_VAR_SSA", has ins-text "var_10#1 = &var_8";
(contains-instruction: $N_8755827877317_4195502c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827877317_4195502c isa instruction, has hash "N_8755827877317_4195502c"; 

insert
$N_8755827877317_4195502c_0 isa variable-ssa, has hash "N_8755827877317_4195502c_0", has var "var_10", has version 1, has edge-label "dest", has var-type "void*", has var-size -9, has var-func "_start";
(to-node: $N_8755827877317_4195502c_0, from-node: $N_8755827877317_4195502c) isa node-link; 

match
$N_8755827877317_4195502c isa instruction, has hash "N_8755827877317_4195502c"; 

insert
$N_8755827877317_4195502c_1 isa MLIL_ADDRESS_OF, has hash "N_8755827877317_4195502c_1", has edge-label "src";
(to-node: $N_8755827877317_4195502c_1, from-node: $N_8755827877317_4195502c) isa node-link; 

match
$N_8755827877317_4195502c_1 isa operation, has hash "N_8755827877317_4195502c_1"; 

insert
$N_8755827877317_4195502c_1_0 isa variable, has hash "N_8755827877317_4195502c_1_0", has var "var_8", has edge-label "src", has var-type "int64_t", has var-size 8, has var-func "_start";
(to-node: $N_8755827877317_4195502c_1_0, from-node: $N_8755827877317_4195502c_1) isa node-link; 

match 
$func__start isa function, has name "_start"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func__start, contains-basic-block: $bb) isa has-basic-block; 

match
$func__start isa function, has name "_start"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func__start, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827844213_4195524c isa instruction, has hash "N_8755827844213_4195524c", has il-index 6, has asm-address "0x4004c4", has operation-type "MLIL_NORET", has ins-text "noreturn";
(contains-instruction: $N_8755827844213_4195524c, in-basic-block: $bb) isa has-instruction; 

match
$func__start isa function, has name "_start"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func__start, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827864581_4195524c isa instruction, has hash "N_8755827864581_4195524c", has il-index 5, has asm-address "0x4004c4", has operation-type "MLIL_CALL_SSA", has ins-text "mem#2 = 0x400480(0x400596, rsi#1, rdx#1, 0x400630, 0x4006a0, r9#1, var_10#1) @ mem#1";
(contains-instruction: $N_8755827864581_4195524c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827864581_4195524c isa instruction, has hash "N_8755827864581_4195524c"; 

insert
$N_8755827864581_4195524c_0 isa MLIL_CALL_OUTPUT_SSA, has hash "N_8755827864581_4195524c_0", has edge-label "output";
(to-node: $N_8755827864581_4195524c_0, from-node: $N_8755827864581_4195524c) isa node-link; 

match
$N_8755827864581_4195524c_0 isa operation, has hash "N_8755827864581_4195524c_0"; 

insert
$N_8755827864581_4195524c_0_0 isa constant, has hash "N_8755827864581_4195524c_0_0", has constant-value "2", has edge-label "dest_memory";
(to-node: $N_8755827864581_4195524c_0_0, from-node: $N_8755827864581_4195524c_0) isa node-link; 

match
$N_8755827864581_4195524c_0 isa operation, has hash "N_8755827864581_4195524c_0"; 

insert
$L_8755827864581_4195524c_0_1 isa list, has hash "L_8755827864581_4195524c_0_1", has list-size 0, has edge-label "dest";
(to-node: $L_8755827864581_4195524c_0_1, from-node: $N_8755827864581_4195524c_0) isa node-link; 

match
$N_8755827864581_4195524c isa instruction, has hash "N_8755827864581_4195524c"; 

insert
$N_8755827864581_4195524c_1 isa MLIL_CONST_PTR, has hash "N_8755827864581_4195524c_1", has edge-label "dest";
(to-node: $N_8755827864581_4195524c_1, from-node: $N_8755827864581_4195524c) isa node-link; 

match
$N_8755827864581_4195524c_1 isa operation, has hash "N_8755827864581_4195524c_1"; 

insert
$N_8755827864581_4195524c_1_0 isa constant, has hash "N_8755827864581_4195524c_1_0", has constant-value "4195456", has edge-label "constant";
(to-node: $N_8755827864581_4195524c_1_0, from-node: $N_8755827864581_4195524c_1) isa node-link; 

match
$N_8755827864581_4195524c isa instruction, has hash "N_8755827864581_4195524c"; 

insert
$L_8755827864581_4195524c_2 isa list, has hash "L_8755827864581_4195524c_2", has list-size 7, has edge-label "params";
(to-node: $L_8755827864581_4195524c_2, from-node: $N_8755827864581_4195524c) isa node-link; 

match
$L_8755827864581_4195524c_2 isa list, has hash "L_8755827864581_4195524c_2"; 

insert
$N_8755827864581_4195524c_2_0 isa MLIL_CONST_PTR, has hash "N_8755827864581_4195524c_2_0", has edge-label "0";
(to-node: $N_8755827864581_4195524c_2_0, from-node: $L_8755827864581_4195524c_2) isa node-link; 

match
$N_8755827864581_4195524c_2_0 isa operation, has hash "N_8755827864581_4195524c_2_0"; 

insert
$N_8755827864581_4195524c_2_0_0 isa constant, has hash "N_8755827864581_4195524c_2_0_0", has constant-value "4195734", has edge-label "constant";
(to-node: $N_8755827864581_4195524c_2_0_0, from-node: $N_8755827864581_4195524c_2_0) isa node-link; 

match
$L_8755827864581_4195524c_2 isa list, has hash "L_8755827864581_4195524c_2"; 

insert
$N_8755827864581_4195524c_2_1 isa MLIL_VAR_SSA, has hash "N_8755827864581_4195524c_2_1", has edge-label "1";
(to-node: $N_8755827864581_4195524c_2_1, from-node: $L_8755827864581_4195524c_2) isa node-link; 

match
$N_8755827864581_4195524c_2_1 isa operation, has hash "N_8755827864581_4195524c_2_1"; 

insert
$N_8755827864581_4195524c_2_1_0 isa variable-ssa, has hash "N_8755827864581_4195524c_2_1_0", has var "rsi", has version 1, has edge-label "src", has var-type "void* const", has var-size 4, has var-func "_start";
(to-node: $N_8755827864581_4195524c_2_1_0, from-node: $N_8755827864581_4195524c_2_1) isa node-link; 

match
$L_8755827864581_4195524c_2 isa list, has hash "L_8755827864581_4195524c_2"; 

insert
$N_8755827864581_4195524c_2_2 isa MLIL_VAR_SSA, has hash "N_8755827864581_4195524c_2_2", has edge-label "2";
(to-node: $N_8755827864581_4195524c_2_2, from-node: $L_8755827864581_4195524c_2) isa node-link; 

match
$N_8755827864581_4195524c_2_2 isa operation, has hash "N_8755827864581_4195524c_2_2"; 

insert
$N_8755827864581_4195524c_2_2_0 isa variable-ssa, has hash "N_8755827864581_4195524c_2_2_0", has var "rdx", has version 1, has edge-label "src", has var-type "char**", has var-size 4, has var-func "_start";
(to-node: $N_8755827864581_4195524c_2_2_0, from-node: $N_8755827864581_4195524c_2_2) isa node-link; 

match
$L_8755827864581_4195524c_2 isa list, has hash "L_8755827864581_4195524c_2"; 

insert
$N_8755827864581_4195524c_2_3 isa MLIL_CONST_PTR, has hash "N_8755827864581_4195524c_2_3", has edge-label "3";
(to-node: $N_8755827864581_4195524c_2_3, from-node: $L_8755827864581_4195524c_2) isa node-link; 

match
$N_8755827864581_4195524c_2_3 isa operation, has hash "N_8755827864581_4195524c_2_3"; 

insert
$N_8755827864581_4195524c_2_3_0 isa constant, has hash "N_8755827864581_4195524c_2_3_0", has constant-value "4195888", has edge-label "constant";
(to-node: $N_8755827864581_4195524c_2_3_0, from-node: $N_8755827864581_4195524c_2_3) isa node-link; 

match
$L_8755827864581_4195524c_2 isa list, has hash "L_8755827864581_4195524c_2"; 

insert
$N_8755827864581_4195524c_2_4 isa MLIL_CONST_PTR, has hash "N_8755827864581_4195524c_2_4", has edge-label "4";
(to-node: $N_8755827864581_4195524c_2_4, from-node: $L_8755827864581_4195524c_2) isa node-link; 

match
$N_8755827864581_4195524c_2_4 isa operation, has hash "N_8755827864581_4195524c_2_4"; 

insert
$N_8755827864581_4195524c_2_4_0 isa constant, has hash "N_8755827864581_4195524c_2_4_0", has constant-value "4196000", has edge-label "constant";
(to-node: $N_8755827864581_4195524c_2_4_0, from-node: $N_8755827864581_4195524c_2_4) isa node-link; 

match
$L_8755827864581_4195524c_2 isa list, has hash "L_8755827864581_4195524c_2"; 

insert
$N_8755827864581_4195524c_2_5 isa MLIL_VAR_SSA, has hash "N_8755827864581_4195524c_2_5", has edge-label "5";
(to-node: $N_8755827864581_4195524c_2_5, from-node: $L_8755827864581_4195524c_2) isa node-link; 

match
$N_8755827864581_4195524c_2_5 isa operation, has hash "N_8755827864581_4195524c_2_5"; 

insert
$N_8755827864581_4195524c_2_5_0 isa variable-ssa, has hash "N_8755827864581_4195524c_2_5_0", has var "r9", has version 1, has edge-label "src", has var-type "void (*)()", has var-size 4, has var-func "_start";
(to-node: $N_8755827864581_4195524c_2_5_0, from-node: $N_8755827864581_4195524c_2_5) isa node-link; 

match
$L_8755827864581_4195524c_2 isa list, has hash "L_8755827864581_4195524c_2"; 

insert
$N_8755827864581_4195524c_2_6 isa MLIL_VAR_SSA, has hash "N_8755827864581_4195524c_2_6", has edge-label "6";
(to-node: $N_8755827864581_4195524c_2_6, from-node: $L_8755827864581_4195524c_2) isa node-link; 

match
$N_8755827864581_4195524c_2_6 isa operation, has hash "N_8755827864581_4195524c_2_6"; 

insert
$N_8755827864581_4195524c_2_6_0 isa variable-ssa, has hash "N_8755827864581_4195524c_2_6_0", has var "var_10", has version 1, has edge-label "src", has var-type "void*", has var-size -9, has var-func "_start";
(to-node: $N_8755827864581_4195524c_2_6_0, from-node: $N_8755827864581_4195524c_2_6) isa node-link; 

match
$N_8755827864581_4195524c isa instruction, has hash "N_8755827864581_4195524c"; 

insert
$N_8755827864581_4195524c_3 isa constant, has hash "N_8755827864581_4195524c_3", has constant-value "1", has edge-label "src_memory";
(to-node: $N_8755827864581_4195524c_3, from-node: $N_8755827864581_4195524c) isa node-link; 

insert 
$func_deregister_tm_clones isa function, has name "deregister_tm_clones", has asm-address "0x4004d0", has stack "[<var int64_t __saved_rbp>, <var void* const __return_addr>]"; 

match 
$func_deregister_tm_clones isa function, has name "deregister_tm_clones"; 

insert 
$bb isa basic-block, has bb-start 0, has bb-end 2; 
(contains-basic-block: $bb, in-function: $func_deregister_tm_clones) isa has-basic-block; 

match 
$func_deregister_tm_clones isa function, has name "deregister_tm_clones"; 
$bb isa basic-block, has bb-start 0, has bb-end 2; 
(in-function: $func_deregister_tm_clones, contains-basic-block: $bb) isa has-basic-block; 

match
$func_deregister_tm_clones isa function, has name "deregister_tm_clones"; 
$bb isa basic-block, has bb-start 0, has bb-end 2; 
(in-function: $func_deregister_tm_clones, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755828974421_4195542c isa instruction, has hash "N_8755828974421_4195542c", has il-index 0, has asm-address "0x4004d6", has operation-type "MLIL_SET_VAR_SSA", has ins-text "rax#1 = 7";
(contains-instruction: $N_8755828974421_4195542c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755828974421_4195542c isa instruction, has hash "N_8755828974421_4195542c"; 

insert
$N_8755828974421_4195542c_0 isa variable-ssa, has hash "N_8755828974421_4195542c_0", has var "rax", has version 1, has edge-label "dest", has var-type "int64_t", has var-size 4, has var-func "deregister_tm_clones";
(to-node: $N_8755828974421_4195542c_0, from-node: $N_8755828974421_4195542c) isa node-link; 

match
$N_8755828974421_4195542c isa instruction, has hash "N_8755828974421_4195542c"; 

insert
$N_8755828974421_4195542c_1 isa MLIL_CONST, has hash "N_8755828974421_4195542c_1", has edge-label "src";
(to-node: $N_8755828974421_4195542c_1, from-node: $N_8755828974421_4195542c) isa node-link; 

match
$N_8755828974421_4195542c_1 isa operation, has hash "N_8755828974421_4195542c_1"; 

insert
$N_8755828974421_4195542c_1_0 isa constant, has hash "N_8755828974421_4195542c_1_0", has constant-value "7", has edge-label "constant";
(to-node: $N_8755828974421_4195542c_1_0, from-node: $N_8755828974421_4195542c_1) isa node-link; 

match 
$func_deregister_tm_clones isa function, has name "deregister_tm_clones"; 
$bb isa basic-block, has bb-start 0, has bb-end 2; 
(in-function: $func_deregister_tm_clones, contains-basic-block: $bb) isa has-basic-block; 

match
$func_deregister_tm_clones isa function, has name "deregister_tm_clones"; 
$bb isa basic-block, has bb-start 0, has bb-end 2; 
(in-function: $func_deregister_tm_clones, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755828972461_4195548c isa instruction, has hash "N_8755828972461_4195548c", has il-index 1, has asm-address "0x4004dc", has operation-type "MLIL_SET_VAR_SSA", has ins-text "cond:0#1 = 7 u<= 0xe";
(contains-instruction: $N_8755828972461_4195548c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755828972461_4195548c isa instruction, has hash "N_8755828972461_4195548c"; 

insert
$N_8755828972461_4195548c_0 isa variable-ssa, has hash "N_8755828972461_4195548c_0", has var "cond:0", has version 1, has edge-label "dest", has var-type "bool", has var-size 4, has var-func "deregister_tm_clones";
(to-node: $N_8755828972461_4195548c_0, from-node: $N_8755828972461_4195548c) isa node-link; 

match
$N_8755828972461_4195548c isa instruction, has hash "N_8755828972461_4195548c"; 

insert
$N_8755828972461_4195548c_1 isa MLIL_CMP_ULE, has hash "N_8755828972461_4195548c_1", has edge-label "src";
(to-node: $N_8755828972461_4195548c_1, from-node: $N_8755828972461_4195548c) isa node-link; 

match
$N_8755828972461_4195548c_1 isa operation, has hash "N_8755828972461_4195548c_1"; 

insert
$N_8755828972461_4195548c_1_0 isa MLIL_CONST, has hash "N_8755828972461_4195548c_1_0", has edge-label "left";
(to-node: $N_8755828972461_4195548c_1_0, from-node: $N_8755828972461_4195548c_1) isa node-link; 

match
$N_8755828972461_4195548c_1_0 isa operation, has hash "N_8755828972461_4195548c_1_0"; 

insert
$N_8755828972461_4195548c_1_0_0 isa constant, has hash "N_8755828972461_4195548c_1_0_0", has constant-value "7", has edge-label "constant";
(to-node: $N_8755828972461_4195548c_1_0_0, from-node: $N_8755828972461_4195548c_1_0) isa node-link; 

match
$N_8755828972461_4195548c_1 isa operation, has hash "N_8755828972461_4195548c_1"; 

insert
$N_8755828972461_4195548c_1_1 isa MLIL_CONST, has hash "N_8755828972461_4195548c_1_1", has edge-label "right";
(to-node: $N_8755828972461_4195548c_1_1, from-node: $N_8755828972461_4195548c_1) isa node-link; 

match
$N_8755828972461_4195548c_1_1 isa operation, has hash "N_8755828972461_4195548c_1_1"; 

insert
$N_8755828972461_4195548c_1_1_0 isa constant, has hash "N_8755828972461_4195548c_1_1_0", has constant-value "14", has edge-label "constant";
(to-node: $N_8755828972461_4195548c_1_1_0, from-node: $N_8755828972461_4195548c_1_1) isa node-link; 

match 
$func_deregister_tm_clones isa function, has name "deregister_tm_clones"; 
$bb isa basic-block, has bb-start 0, has bb-end 2; 
(in-function: $func_deregister_tm_clones, contains-basic-block: $bb) isa has-basic-block; 

match
$func_deregister_tm_clones isa function, has name "deregister_tm_clones"; 
$bb isa basic-block, has bb-start 0, has bb-end 2; 
(in-function: $func_deregister_tm_clones, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755828965893_4195555c isa instruction, has hash "N_8755828965893_4195555c", has il-index 2, has asm-address "0x4004e3", has operation-type "MLIL_IF", has ins-text "if (cond:0#1) then 3 @ 0x0 else 4 @ 0x4004e5";
(contains-instruction: $N_8755828965893_4195555c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755828965893_4195555c isa instruction, has hash "N_8755828965893_4195555c"; 

insert
$N_8755828965893_4195555c_0 isa MLIL_VAR_SSA, has hash "N_8755828965893_4195555c_0", has edge-label "condition";
(to-node: $N_8755828965893_4195555c_0, from-node: $N_8755828965893_4195555c) isa node-link; 

match
$N_8755828965893_4195555c_0 isa operation, has hash "N_8755828965893_4195555c_0"; 

insert
$N_8755828965893_4195555c_0_0 isa variable-ssa, has hash "N_8755828965893_4195555c_0_0", has var "cond:0", has version 1, has edge-label "src", has var-type "bool", has var-size 4, has var-func "deregister_tm_clones";
(to-node: $N_8755828965893_4195555c_0_0, from-node: $N_8755828965893_4195555c_0) isa node-link; 

match
$N_8755828965893_4195555c isa instruction, has hash "N_8755828965893_4195555c"; 

insert
$N_8755828965893_4195555c_1 isa constant, has hash "N_8755828965893_4195555c_1", has constant-value "3", has edge-label "true";
(to-node: $N_8755828965893_4195555c_1, from-node: $N_8755828965893_4195555c) isa node-link; 

match
$N_8755828965893_4195555c isa instruction, has hash "N_8755828965893_4195555c"; 

insert
$N_8755828965893_4195555c_2 isa constant, has hash "N_8755828965893_4195555c_2", has constant-value "4", has edge-label "false";
(to-node: $N_8755828965893_4195555c_2, from-node: $N_8755828965893_4195555c) isa node-link; 

match 
$func_deregister_tm_clones isa function, has name "deregister_tm_clones"; 

insert 
$bb isa basic-block, has bb-start 3, has bb-end 3; 
(contains-basic-block: $bb, in-function: $func_deregister_tm_clones) isa has-basic-block; 

match 
$func_deregister_tm_clones isa function, has name "deregister_tm_clones"; 
$bb isa basic-block, has bb-start 3, has bb-end 3; 
(in-function: $func_deregister_tm_clones, contains-basic-block: $bb) isa has-basic-block; 

match
$func_deregister_tm_clones isa function, has name "deregister_tm_clones"; 
$bb isa basic-block, has bb-start 3, has bb-end 3; 
(in-function: $func_deregister_tm_clones, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827847777_0c isa instruction, has hash "N_8755827847777_0c", has il-index 8, has asm-address "0x0", has operation-type "MLIL_GOTO", has ins-text "goto 6 @ 0x400501";
(contains-instruction: $N_8755827847777_0c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827847777_0c isa instruction, has hash "N_8755827847777_0c"; 

insert
$N_8755827847777_0c_0 isa constant, has hash "N_8755827847777_0c_0", has constant-value "6", has edge-label "dest";
(to-node: $N_8755827847777_0c_0, from-node: $N_8755827847777_0c) isa node-link; 

match
$func_deregister_tm_clones isa function, has name "deregister_tm_clones"; 
$bb isa basic-block, has bb-start 3, has bb-end 3; 
(in-function: $func_deregister_tm_clones, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755828968765_0c isa instruction, has hash "N_8755828968765_0c", has il-index 3, has asm-address "0x0", has operation-type "MLIL_GOTO", has ins-text "goto 6 @ 0x400501";
(contains-instruction: $N_8755828968765_0c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755828968765_0c isa instruction, has hash "N_8755828968765_0c"; 

insert
$N_8755828968765_0c_0 isa constant, has hash "N_8755828968765_0c_0", has constant-value "6", has edge-label "dest";
(to-node: $N_8755828968765_0c_0, from-node: $N_8755828968765_0c) isa node-link; 

match 
$func_deregister_tm_clones isa function, has name "deregister_tm_clones"; 

insert 
$bb isa basic-block, has bb-start 4, has bb-end 5; 
(contains-basic-block: $bb, in-function: $func_deregister_tm_clones) isa has-basic-block; 

match 
$func_deregister_tm_clones isa function, has name "deregister_tm_clones"; 
$bb isa basic-block, has bb-start 4, has bb-end 5; 
(in-function: $func_deregister_tm_clones, contains-basic-block: $bb) isa has-basic-block; 

match
$func_deregister_tm_clones isa function, has name "deregister_tm_clones"; 
$bb isa basic-block, has bb-start 4, has bb-end 5; 
(in-function: $func_deregister_tm_clones, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755828979501_4195557c isa instruction, has hash "N_8755828979501_4195557c", has il-index 4, has asm-address "0x4004e5", has operation-type "MLIL_SET_VAR_SSA", has ins-text "rax#2 = 0";
(contains-instruction: $N_8755828979501_4195557c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755828979501_4195557c isa instruction, has hash "N_8755828979501_4195557c"; 

insert
$N_8755828979501_4195557c_0 isa variable-ssa, has hash "N_8755828979501_4195557c_0", has var "rax", has version 2, has edge-label "dest", has var-type "int64_t", has var-size 4, has var-func "deregister_tm_clones";
(to-node: $N_8755828979501_4195557c_0, from-node: $N_8755828979501_4195557c) isa node-link; 

match
$N_8755828979501_4195557c isa instruction, has hash "N_8755828979501_4195557c"; 

insert
$N_8755828979501_4195557c_1 isa MLIL_CONST, has hash "N_8755828979501_4195557c_1", has edge-label "src";
(to-node: $N_8755828979501_4195557c_1, from-node: $N_8755828979501_4195557c) isa node-link; 

match
$N_8755828979501_4195557c_1 isa operation, has hash "N_8755828979501_4195557c_1"; 

insert
$N_8755828979501_4195557c_1_0 isa constant, has hash "N_8755828979501_4195557c_1_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8755828979501_4195557c_1_0, from-node: $N_8755828979501_4195557c_1) isa node-link; 

match 
$func_deregister_tm_clones isa function, has name "deregister_tm_clones"; 
$bb isa basic-block, has bb-start 4, has bb-end 5; 
(in-function: $func_deregister_tm_clones, contains-basic-block: $bb) isa has-basic-block; 

match
$func_deregister_tm_clones isa function, has name "deregister_tm_clones"; 
$bb isa basic-block, has bb-start 4, has bb-end 5; 
(in-function: $func_deregister_tm_clones, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755828968733_4195565c isa instruction, has hash "N_8755828968733_4195565c", has il-index 5, has asm-address "0x4004ed", has operation-type "MLIL_IF", has ins-text "if (0 == 0) then 8 @ 0x0 else 9 @ 0x4004f5";
(contains-instruction: $N_8755828968733_4195565c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755828968733_4195565c isa instruction, has hash "N_8755828968733_4195565c"; 

insert
$N_8755828968733_4195565c_0 isa MLIL_CMP_E, has hash "N_8755828968733_4195565c_0", has edge-label "condition";
(to-node: $N_8755828968733_4195565c_0, from-node: $N_8755828968733_4195565c) isa node-link; 

match
$N_8755828968733_4195565c_0 isa operation, has hash "N_8755828968733_4195565c_0"; 

insert
$N_8755828968733_4195565c_0_0 isa MLIL_CONST, has hash "N_8755828968733_4195565c_0_0", has edge-label "left";
(to-node: $N_8755828968733_4195565c_0_0, from-node: $N_8755828968733_4195565c_0) isa node-link; 

match
$N_8755828968733_4195565c_0_0 isa operation, has hash "N_8755828968733_4195565c_0_0"; 

insert
$N_8755828968733_4195565c_0_0_0 isa constant, has hash "N_8755828968733_4195565c_0_0_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8755828968733_4195565c_0_0_0, from-node: $N_8755828968733_4195565c_0_0) isa node-link; 

match
$N_8755828968733_4195565c_0 isa operation, has hash "N_8755828968733_4195565c_0"; 

insert
$N_8755828968733_4195565c_0_1 isa MLIL_CONST, has hash "N_8755828968733_4195565c_0_1", has edge-label "right";
(to-node: $N_8755828968733_4195565c_0_1, from-node: $N_8755828968733_4195565c_0) isa node-link; 

match
$N_8755828968733_4195565c_0_1 isa operation, has hash "N_8755828968733_4195565c_0_1"; 

insert
$N_8755828968733_4195565c_0_1_0 isa constant, has hash "N_8755828968733_4195565c_0_1_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8755828968733_4195565c_0_1_0, from-node: $N_8755828968733_4195565c_0_1) isa node-link; 

match
$N_8755828968733_4195565c isa instruction, has hash "N_8755828968733_4195565c"; 

insert
$N_8755828968733_4195565c_1 isa constant, has hash "N_8755828968733_4195565c_1", has constant-value "8", has edge-label "true";
(to-node: $N_8755828968733_4195565c_1, from-node: $N_8755828968733_4195565c) isa node-link; 

match
$N_8755828968733_4195565c isa instruction, has hash "N_8755828968733_4195565c"; 

insert
$N_8755828968733_4195565c_2 isa constant, has hash "N_8755828968733_4195565c_2", has constant-value "9", has edge-label "false";
(to-node: $N_8755828968733_4195565c_2, from-node: $N_8755828968733_4195565c) isa node-link; 

match 
$func_deregister_tm_clones isa function, has name "deregister_tm_clones"; 

insert 
$bb isa basic-block, has bb-start 6, has bb-end 7; 
(contains-basic-block: $bb, in-function: $func_deregister_tm_clones) isa has-basic-block; 

match 
$func_deregister_tm_clones isa function, has name "deregister_tm_clones"; 
$bb isa basic-block, has bb-start 6, has bb-end 7; 
(in-function: $func_deregister_tm_clones, contains-basic-block: $bb) isa has-basic-block; 

match
$func_deregister_tm_clones isa function, has name "deregister_tm_clones"; 
$bb isa basic-block, has bb-start 6, has bb-end 7; 
(in-function: $func_deregister_tm_clones, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827843157_4195585c isa instruction, has hash "N_8755827843157_4195585c", has il-index 7, has asm-address "0x400501", has operation-type "MLIL_RET", has ins-text "return rax#3";
(contains-instruction: $N_8755827843157_4195585c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827843157_4195585c isa instruction, has hash "N_8755827843157_4195585c"; 

insert
$L_8755827843157_4195585c_0 isa list, has hash "L_8755827843157_4195585c_0", has list-size 1, has edge-label "src";
(to-node: $L_8755827843157_4195585c_0, from-node: $N_8755827843157_4195585c) isa node-link; 

match
$L_8755827843157_4195585c_0 isa list, has hash "L_8755827843157_4195585c_0"; 

insert
$N_8755827843157_4195585c_0_0 isa MLIL_VAR_SSA, has hash "N_8755827843157_4195585c_0_0", has edge-label "0";
(to-node: $N_8755827843157_4195585c_0_0, from-node: $L_8755827843157_4195585c_0) isa node-link; 

match
$N_8755827843157_4195585c_0_0 isa operation, has hash "N_8755827843157_4195585c_0_0"; 

insert
$N_8755827843157_4195585c_0_0_0 isa variable-ssa, has hash "N_8755827843157_4195585c_0_0_0", has var "rax", has version 3, has edge-label "src", has var-type "int64_t", has var-size 4, has var-func "deregister_tm_clones";
(to-node: $N_8755827843157_4195585c_0_0_0, from-node: $N_8755827843157_4195585c_0_0) isa node-link; 

match
$func_deregister_tm_clones isa function, has name "deregister_tm_clones"; 
$bb isa basic-block, has bb-start 6, has bb-end 7; 
(in-function: $func_deregister_tm_clones, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755828972529_4195585c isa instruction, has hash "N_8755828972529_4195585c", has il-index 6, has asm-address "0x400501", has operation-type "MLIL_VAR_PHI", has ins-text "rax#3 = ϕ(rax#1, rax#2)";
(contains-instruction: $N_8755828972529_4195585c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755828972529_4195585c isa instruction, has hash "N_8755828972529_4195585c"; 

insert
$N_8755828972529_4195585c_0 isa variable-ssa, has hash "N_8755828972529_4195585c_0", has var "rax", has version 3, has edge-label "dest", has var-type "int64_t", has var-size 4, has var-func "deregister_tm_clones";
(to-node: $N_8755828972529_4195585c_0, from-node: $N_8755828972529_4195585c) isa node-link; 

match
$N_8755828972529_4195585c isa instruction, has hash "N_8755828972529_4195585c"; 

insert
$L_8755828972529_4195585c_1 isa list, has hash "L_8755828972529_4195585c_1", has list-size 2, has edge-label "src";
(to-node: $L_8755828972529_4195585c_1, from-node: $N_8755828972529_4195585c) isa node-link; 

match
$L_8755828972529_4195585c_1 isa list, has hash "L_8755828972529_4195585c_1"; 

insert
$N_8755828972529_4195585c_1_0 isa variable-ssa, has hash "N_8755828972529_4195585c_1_0", has var "rax", has version 1, has edge-label "0", has var-type "int64_t", has var-size 4, has var-func "deregister_tm_clones";
(to-node: $N_8755828972529_4195585c_1_0, from-node: $L_8755828972529_4195585c_1) isa node-link; 

match
$L_8755828972529_4195585c_1 isa list, has hash "L_8755828972529_4195585c_1"; 

insert
$N_8755828972529_4195585c_1_1 isa variable-ssa, has hash "N_8755828972529_4195585c_1_1", has var "rax", has version 2, has edge-label "1", has var-type "int64_t", has var-size 4, has var-func "deregister_tm_clones";
(to-node: $N_8755828972529_4195585c_1_1, from-node: $L_8755828972529_4195585c_1) isa node-link; 

match 
$func_deregister_tm_clones isa function, has name "deregister_tm_clones"; 

insert 
$bb isa basic-block, has bb-start 8, has bb-end 8; 
(contains-basic-block: $bb, in-function: $func_deregister_tm_clones) isa has-basic-block; 

match 
$func_deregister_tm_clones isa function, has name "deregister_tm_clones"; 

insert 
$bb isa basic-block, has bb-start 9, has bb-end 9; 
(contains-basic-block: $bb, in-function: $func_deregister_tm_clones) isa has-basic-block; 

match 
$func_deregister_tm_clones isa function, has name "deregister_tm_clones"; 
$bb isa basic-block, has bb-start 9, has bb-end 9; 
(in-function: $func_deregister_tm_clones, contains-basic-block: $bb) isa has-basic-block; 

match
$func_deregister_tm_clones isa function, has name "deregister_tm_clones"; 
$bb isa basic-block, has bb-start 9, has bb-end 9; 
(in-function: $func_deregister_tm_clones, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755828968965_4195573c isa instruction, has hash "N_8755828968965_4195573c", has il-index 9, has asm-address "0x4004f5", has operation-type "MLIL_JUMP", has ins-text "jump(0)";
(contains-instruction: $N_8755828968965_4195573c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755828968965_4195573c isa instruction, has hash "N_8755828968965_4195573c"; 

insert
$N_8755828968965_4195573c_0 isa MLIL_CONST_PTR, has hash "N_8755828968965_4195573c_0", has edge-label "dest";
(to-node: $N_8755828968965_4195573c_0, from-node: $N_8755828968965_4195573c) isa node-link; 

match
$N_8755828968965_4195573c_0 isa operation, has hash "N_8755828968965_4195573c_0"; 

insert
$N_8755828968965_4195573c_0_0 isa constant, has hash "N_8755828968965_4195573c_0_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8755828968965_4195573c_0_0, from-node: $N_8755828968965_4195573c_0) isa node-link; 

match 
$func_deregister_tm_clones isa function, has name "deregister_tm_clones"; 
$frombb isa basic-block, has bb-end 2, has bb-start 0; 
$tobb   isa basic-block, has bb-end 3, has bb-start 3; 
(contains-basic-block: $frombb, in-function: $func_deregister_tm_clones) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_deregister_tm_clones) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_deregister_tm_clones isa function, has name "deregister_tm_clones"; 
$frombb isa basic-block, has bb-end 2, has bb-start 0; 
$tobb   isa basic-block, has bb-end 5, has bb-start 4; 
(contains-basic-block: $frombb, in-function: $func_deregister_tm_clones) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_deregister_tm_clones) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_deregister_tm_clones isa function, has name "deregister_tm_clones"; 
$frombb isa basic-block, has bb-end 3, has bb-start 3; 
$tobb   isa basic-block, has bb-end 7, has bb-start 6; 
(contains-basic-block: $frombb, in-function: $func_deregister_tm_clones) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_deregister_tm_clones) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_deregister_tm_clones isa function, has name "deregister_tm_clones"; 
$frombb isa basic-block, has bb-end 5, has bb-start 4; 
$tobb   isa basic-block, has bb-end 8, has bb-start 8; 
(contains-basic-block: $frombb, in-function: $func_deregister_tm_clones) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_deregister_tm_clones) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_deregister_tm_clones isa function, has name "deregister_tm_clones"; 
$frombb isa basic-block, has bb-end 5, has bb-start 4; 
$tobb   isa basic-block, has bb-end 9, has bb-start 9; 
(contains-basic-block: $frombb, in-function: $func_deregister_tm_clones) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_deregister_tm_clones) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_deregister_tm_clones isa function, has name "deregister_tm_clones"; 
$frombb isa basic-block, has bb-end 8, has bb-start 8; 
$tobb   isa basic-block, has bb-end 7, has bb-start 6; 
(contains-basic-block: $frombb, in-function: $func_deregister_tm_clones) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_deregister_tm_clones) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

insert 
$func_register_tm_clones isa function, has name "register_tm_clones", has asm-address "0x400510", has stack "[<var int64_t __saved_rbp>, <var void* const __return_addr>]"; 

match 
$func_register_tm_clones isa function, has name "register_tm_clones"; 

insert 
$bb isa basic-block, has bb-start 0, has bb-end 0; 
(contains-basic-block: $bb, in-function: $func_register_tm_clones) isa has-basic-block; 

match 
$func_register_tm_clones isa function, has name "register_tm_clones"; 
$bb isa basic-block, has bb-start 0, has bb-end 0; 
(in-function: $func_register_tm_clones, contains-basic-block: $bb) isa has-basic-block; 

match
$func_register_tm_clones isa function, has name "register_tm_clones"; 
$bb isa basic-block, has bb-start 0, has bb-end 0; 
(in-function: $func_register_tm_clones, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827913073_4195633c isa instruction, has hash "N_8755827913073_4195633c", has il-index 0, has asm-address "0x400531", has operation-type "MLIL_IF", has ins-text "if (0 == 0) then 1 @ 0x0 else 2 @ 0x40053b";
(contains-instruction: $N_8755827913073_4195633c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827913073_4195633c isa instruction, has hash "N_8755827913073_4195633c"; 

insert
$N_8755827913073_4195633c_0 isa MLIL_CMP_E, has hash "N_8755827913073_4195633c_0", has edge-label "condition";
(to-node: $N_8755827913073_4195633c_0, from-node: $N_8755827913073_4195633c) isa node-link; 

match
$N_8755827913073_4195633c_0 isa operation, has hash "N_8755827913073_4195633c_0"; 

insert
$N_8755827913073_4195633c_0_0 isa MLIL_CONST, has hash "N_8755827913073_4195633c_0_0", has edge-label "left";
(to-node: $N_8755827913073_4195633c_0_0, from-node: $N_8755827913073_4195633c_0) isa node-link; 

match
$N_8755827913073_4195633c_0_0 isa operation, has hash "N_8755827913073_4195633c_0_0"; 

insert
$N_8755827913073_4195633c_0_0_0 isa constant, has hash "N_8755827913073_4195633c_0_0_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8755827913073_4195633c_0_0_0, from-node: $N_8755827913073_4195633c_0_0) isa node-link; 

match
$N_8755827913073_4195633c_0 isa operation, has hash "N_8755827913073_4195633c_0"; 

insert
$N_8755827913073_4195633c_0_1 isa MLIL_CONST, has hash "N_8755827913073_4195633c_0_1", has edge-label "right";
(to-node: $N_8755827913073_4195633c_0_1, from-node: $N_8755827913073_4195633c_0) isa node-link; 

match
$N_8755827913073_4195633c_0_1 isa operation, has hash "N_8755827913073_4195633c_0_1"; 

insert
$N_8755827913073_4195633c_0_1_0 isa constant, has hash "N_8755827913073_4195633c_0_1_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8755827913073_4195633c_0_1_0, from-node: $N_8755827913073_4195633c_0_1) isa node-link; 

match
$N_8755827913073_4195633c isa instruction, has hash "N_8755827913073_4195633c"; 

insert
$N_8755827913073_4195633c_1 isa constant, has hash "N_8755827913073_4195633c_1", has constant-value "1", has edge-label "true";
(to-node: $N_8755827913073_4195633c_1, from-node: $N_8755827913073_4195633c) isa node-link; 

match
$N_8755827913073_4195633c isa instruction, has hash "N_8755827913073_4195633c"; 

insert
$N_8755827913073_4195633c_2 isa constant, has hash "N_8755827913073_4195633c_2", has constant-value "2", has edge-label "false";
(to-node: $N_8755827913073_4195633c_2, from-node: $N_8755827913073_4195633c) isa node-link; 

match 
$func_register_tm_clones isa function, has name "register_tm_clones"; 

insert 
$bb isa basic-block, has bb-start 1, has bb-end 1; 
(contains-basic-block: $bb, in-function: $func_register_tm_clones) isa has-basic-block; 

match 
$func_register_tm_clones isa function, has name "register_tm_clones"; 
$bb isa basic-block, has bb-start 1, has bb-end 1; 
(in-function: $func_register_tm_clones, contains-basic-block: $bb) isa has-basic-block; 

match
$func_register_tm_clones isa function, has name "register_tm_clones"; 
$bb isa basic-block, has bb-start 1, has bb-end 1; 
(in-function: $func_register_tm_clones, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827913101_0c isa instruction, has hash "N_8755827913101_0c", has il-index 1, has asm-address "0x0", has operation-type "MLIL_GOTO", has ins-text "goto 3 @ 0x400549";
(contains-instruction: $N_8755827913101_0c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827913101_0c isa instruction, has hash "N_8755827913101_0c"; 

insert
$N_8755827913101_0c_0 isa constant, has hash "N_8755827913101_0c_0", has constant-value "3", has edge-label "dest";
(to-node: $N_8755827913101_0c_0, from-node: $N_8755827913101_0c) isa node-link; 

match
$func_register_tm_clones isa function, has name "register_tm_clones"; 
$bb isa basic-block, has bb-start 1, has bb-end 1; 
(in-function: $func_register_tm_clones, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827913205_0c isa instruction, has hash "N_8755827913205_0c", has il-index 4, has asm-address "0x0", has operation-type "MLIL_GOTO", has ins-text "goto 3 @ 0x400549";
(contains-instruction: $N_8755827913205_0c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827913205_0c isa instruction, has hash "N_8755827913205_0c"; 

insert
$N_8755827913205_0c_0 isa constant, has hash "N_8755827913205_0c_0", has constant-value "3", has edge-label "dest";
(to-node: $N_8755827913205_0c_0, from-node: $N_8755827913205_0c) isa node-link; 

match 
$func_register_tm_clones isa function, has name "register_tm_clones"; 

insert 
$bb isa basic-block, has bb-start 2, has bb-end 2; 
(contains-basic-block: $bb, in-function: $func_register_tm_clones) isa has-basic-block; 

match 
$func_register_tm_clones isa function, has name "register_tm_clones"; 
$bb isa basic-block, has bb-start 2, has bb-end 2; 
(in-function: $func_register_tm_clones, contains-basic-block: $bb) isa has-basic-block; 

match
$func_register_tm_clones isa function, has name "register_tm_clones"; 
$bb isa basic-block, has bb-start 2, has bb-end 2; 
(in-function: $func_register_tm_clones, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827913053_4195643c isa instruction, has hash "N_8755827913053_4195643c", has il-index 2, has asm-address "0x40053b", has operation-type "MLIL_IF", has ins-text "if (0 == 0) then 4 @ 0x0 else 5 @ 0x400543";
(contains-instruction: $N_8755827913053_4195643c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827913053_4195643c isa instruction, has hash "N_8755827913053_4195643c"; 

insert
$N_8755827913053_4195643c_0 isa MLIL_CMP_E, has hash "N_8755827913053_4195643c_0", has edge-label "condition";
(to-node: $N_8755827913053_4195643c_0, from-node: $N_8755827913053_4195643c) isa node-link; 

match
$N_8755827913053_4195643c_0 isa operation, has hash "N_8755827913053_4195643c_0"; 

insert
$N_8755827913053_4195643c_0_0 isa MLIL_CONST, has hash "N_8755827913053_4195643c_0_0", has edge-label "left";
(to-node: $N_8755827913053_4195643c_0_0, from-node: $N_8755827913053_4195643c_0) isa node-link; 

match
$N_8755827913053_4195643c_0_0 isa operation, has hash "N_8755827913053_4195643c_0_0"; 

insert
$N_8755827913053_4195643c_0_0_0 isa constant, has hash "N_8755827913053_4195643c_0_0_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8755827913053_4195643c_0_0_0, from-node: $N_8755827913053_4195643c_0_0) isa node-link; 

match
$N_8755827913053_4195643c_0 isa operation, has hash "N_8755827913053_4195643c_0"; 

insert
$N_8755827913053_4195643c_0_1 isa MLIL_CONST, has hash "N_8755827913053_4195643c_0_1", has edge-label "right";
(to-node: $N_8755827913053_4195643c_0_1, from-node: $N_8755827913053_4195643c_0) isa node-link; 

match
$N_8755827913053_4195643c_0_1 isa operation, has hash "N_8755827913053_4195643c_0_1"; 

insert
$N_8755827913053_4195643c_0_1_0 isa constant, has hash "N_8755827913053_4195643c_0_1_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8755827913053_4195643c_0_1_0, from-node: $N_8755827913053_4195643c_0_1) isa node-link; 

match
$N_8755827913053_4195643c isa instruction, has hash "N_8755827913053_4195643c"; 

insert
$N_8755827913053_4195643c_1 isa constant, has hash "N_8755827913053_4195643c_1", has constant-value "4", has edge-label "true";
(to-node: $N_8755827913053_4195643c_1, from-node: $N_8755827913053_4195643c) isa node-link; 

match
$N_8755827913053_4195643c isa instruction, has hash "N_8755827913053_4195643c"; 

insert
$N_8755827913053_4195643c_2 isa constant, has hash "N_8755827913053_4195643c_2", has constant-value "5", has edge-label "false";
(to-node: $N_8755827913053_4195643c_2, from-node: $N_8755827913053_4195643c) isa node-link; 

match 
$func_register_tm_clones isa function, has name "register_tm_clones"; 

insert 
$bb isa basic-block, has bb-start 3, has bb-end 3; 
(contains-basic-block: $bb, in-function: $func_register_tm_clones) isa has-basic-block; 

match 
$func_register_tm_clones isa function, has name "register_tm_clones"; 
$bb isa basic-block, has bb-start 3, has bb-end 3; 
(in-function: $func_register_tm_clones, contains-basic-block: $bb) isa has-basic-block; 

match
$func_register_tm_clones isa function, has name "register_tm_clones"; 
$bb isa basic-block, has bb-start 3, has bb-end 3; 
(in-function: $func_register_tm_clones, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827913037_4195657c isa instruction, has hash "N_8755827913037_4195657c", has il-index 3, has asm-address "0x400549", has operation-type "MLIL_RET", has ins-text "return 0";
(contains-instruction: $N_8755827913037_4195657c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827913037_4195657c isa instruction, has hash "N_8755827913037_4195657c"; 

insert
$L_8755827913037_4195657c_0 isa list, has hash "L_8755827913037_4195657c_0", has list-size 1, has edge-label "src";
(to-node: $L_8755827913037_4195657c_0, from-node: $N_8755827913037_4195657c) isa node-link; 

match
$L_8755827913037_4195657c_0 isa list, has hash "L_8755827913037_4195657c_0"; 

insert
$N_8755827913037_4195657c_0_0 isa MLIL_CONST, has hash "N_8755827913037_4195657c_0_0", has edge-label "0";
(to-node: $N_8755827913037_4195657c_0_0, from-node: $L_8755827913037_4195657c_0) isa node-link; 

match
$N_8755827913037_4195657c_0_0 isa operation, has hash "N_8755827913037_4195657c_0_0"; 

insert
$N_8755827913037_4195657c_0_0_0 isa constant, has hash "N_8755827913037_4195657c_0_0_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8755827913037_4195657c_0_0_0, from-node: $N_8755827913037_4195657c_0_0) isa node-link; 

match 
$func_register_tm_clones isa function, has name "register_tm_clones"; 

insert 
$bb isa basic-block, has bb-start 4, has bb-end 4; 
(contains-basic-block: $bb, in-function: $func_register_tm_clones) isa has-basic-block; 

match 
$func_register_tm_clones isa function, has name "register_tm_clones"; 

insert 
$bb isa basic-block, has bb-start 5, has bb-end 5; 
(contains-basic-block: $bb, in-function: $func_register_tm_clones) isa has-basic-block; 

match 
$func_register_tm_clones isa function, has name "register_tm_clones"; 
$bb isa basic-block, has bb-start 5, has bb-end 5; 
(in-function: $func_register_tm_clones, contains-basic-block: $bb) isa has-basic-block; 

match
$func_register_tm_clones isa function, has name "register_tm_clones"; 
$bb isa basic-block, has bb-start 5, has bb-end 5; 
(in-function: $func_register_tm_clones, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827913069_4195651c isa instruction, has hash "N_8755827913069_4195651c", has il-index 5, has asm-address "0x400543", has operation-type "MLIL_JUMP", has ins-text "jump(0)";
(contains-instruction: $N_8755827913069_4195651c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827913069_4195651c isa instruction, has hash "N_8755827913069_4195651c"; 

insert
$N_8755827913069_4195651c_0 isa MLIL_CONST_PTR, has hash "N_8755827913069_4195651c_0", has edge-label "dest";
(to-node: $N_8755827913069_4195651c_0, from-node: $N_8755827913069_4195651c) isa node-link; 

match
$N_8755827913069_4195651c_0 isa operation, has hash "N_8755827913069_4195651c_0"; 

insert
$N_8755827913069_4195651c_0_0 isa constant, has hash "N_8755827913069_4195651c_0_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8755827913069_4195651c_0_0, from-node: $N_8755827913069_4195651c_0) isa node-link; 

match 
$func_register_tm_clones isa function, has name "register_tm_clones"; 
$frombb isa basic-block, has bb-end 0, has bb-start 0; 
$tobb   isa basic-block, has bb-end 1, has bb-start 1; 
(contains-basic-block: $frombb, in-function: $func_register_tm_clones) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_register_tm_clones) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_register_tm_clones isa function, has name "register_tm_clones"; 
$frombb isa basic-block, has bb-end 0, has bb-start 0; 
$tobb   isa basic-block, has bb-end 2, has bb-start 2; 
(contains-basic-block: $frombb, in-function: $func_register_tm_clones) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_register_tm_clones) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_register_tm_clones isa function, has name "register_tm_clones"; 
$frombb isa basic-block, has bb-end 1, has bb-start 1; 
$tobb   isa basic-block, has bb-end 3, has bb-start 3; 
(contains-basic-block: $frombb, in-function: $func_register_tm_clones) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_register_tm_clones) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_register_tm_clones isa function, has name "register_tm_clones"; 
$frombb isa basic-block, has bb-end 2, has bb-start 2; 
$tobb   isa basic-block, has bb-end 4, has bb-start 4; 
(contains-basic-block: $frombb, in-function: $func_register_tm_clones) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_register_tm_clones) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_register_tm_clones isa function, has name "register_tm_clones"; 
$frombb isa basic-block, has bb-end 2, has bb-start 2; 
$tobb   isa basic-block, has bb-end 5, has bb-start 5; 
(contains-basic-block: $frombb, in-function: $func_register_tm_clones) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_register_tm_clones) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_register_tm_clones isa function, has name "register_tm_clones"; 
$frombb isa basic-block, has bb-end 4, has bb-start 4; 
$tobb   isa basic-block, has bb-end 3, has bb-start 3; 
(contains-basic-block: $frombb, in-function: $func_register_tm_clones) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_register_tm_clones) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

insert 
$func___do_global_dtors_aux isa function, has name "__do_global_dtors_aux", has asm-address "0x400550", has stack "[<var int64_t var_8>, <var void* const __return_addr>]"; 

match 
$func___do_global_dtors_aux isa function, has name "__do_global_dtors_aux"; 

insert 
$bb isa basic-block, has bb-start 0, has bb-end 0; 
(contains-basic-block: $bb, in-function: $func___do_global_dtors_aux) isa has-basic-block; 

match 
$func___do_global_dtors_aux isa function, has name "__do_global_dtors_aux"; 
$bb isa basic-block, has bb-start 0, has bb-end 0; 
(in-function: $func___do_global_dtors_aux, contains-basic-block: $bb) isa has-basic-block; 

match
$func___do_global_dtors_aux isa function, has name "__do_global_dtors_aux"; 
$bb isa basic-block, has bb-start 0, has bb-end 0; 
(in-function: $func___do_global_dtors_aux, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827913157_4195671c isa instruction, has hash "N_8755827913157_4195671c", has il-index 0, has asm-address "0x400557", has operation-type "MLIL_IF", has ins-text "if ([0x601040].b @ mem#0 != 0) then 1 @ 0x0 else 2 @ 0x40055d";
(contains-instruction: $N_8755827913157_4195671c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827913157_4195671c isa instruction, has hash "N_8755827913157_4195671c"; 

insert
$N_8755827913157_4195671c_0 isa MLIL_CMP_NE, has hash "N_8755827913157_4195671c_0", has edge-label "condition";
(to-node: $N_8755827913157_4195671c_0, from-node: $N_8755827913157_4195671c) isa node-link; 

match
$N_8755827913157_4195671c_0 isa operation, has hash "N_8755827913157_4195671c_0"; 

insert
$N_8755827913157_4195671c_0_0 isa MLIL_LOAD_SSA, has hash "N_8755827913157_4195671c_0_0", has edge-label "left";
(to-node: $N_8755827913157_4195671c_0_0, from-node: $N_8755827913157_4195671c_0) isa node-link; 

match
$N_8755827913157_4195671c_0_0 isa operation, has hash "N_8755827913157_4195671c_0_0"; 

insert
$N_8755827913157_4195671c_0_0_0 isa MLIL_CONST_PTR, has hash "N_8755827913157_4195671c_0_0_0", has edge-label "src";
(to-node: $N_8755827913157_4195671c_0_0_0, from-node: $N_8755827913157_4195671c_0_0) isa node-link; 

match
$N_8755827913157_4195671c_0_0_0 isa operation, has hash "N_8755827913157_4195671c_0_0_0"; 

insert
$N_8755827913157_4195671c_0_0_0_0 isa constant, has hash "N_8755827913157_4195671c_0_0_0_0", has constant-value "6295616", has edge-label "constant";
(to-node: $N_8755827913157_4195671c_0_0_0_0, from-node: $N_8755827913157_4195671c_0_0_0) isa node-link; 

match
$N_8755827913157_4195671c_0_0 isa operation, has hash "N_8755827913157_4195671c_0_0"; 

insert
$N_8755827913157_4195671c_0_0_1 isa constant, has hash "N_8755827913157_4195671c_0_0_1", has constant-value "0", has edge-label "src_memory";
(to-node: $N_8755827913157_4195671c_0_0_1, from-node: $N_8755827913157_4195671c_0_0) isa node-link; 

match
$N_8755827913157_4195671c_0 isa operation, has hash "N_8755827913157_4195671c_0"; 

insert
$N_8755827913157_4195671c_0_1 isa MLIL_CONST, has hash "N_8755827913157_4195671c_0_1", has edge-label "right";
(to-node: $N_8755827913157_4195671c_0_1, from-node: $N_8755827913157_4195671c_0) isa node-link; 

match
$N_8755827913157_4195671c_0_1 isa operation, has hash "N_8755827913157_4195671c_0_1"; 

insert
$N_8755827913157_4195671c_0_1_0 isa constant, has hash "N_8755827913157_4195671c_0_1_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8755827913157_4195671c_0_1_0, from-node: $N_8755827913157_4195671c_0_1) isa node-link; 

match
$N_8755827913157_4195671c isa instruction, has hash "N_8755827913157_4195671c"; 

insert
$N_8755827913157_4195671c_1 isa constant, has hash "N_8755827913157_4195671c_1", has constant-value "1", has edge-label "true";
(to-node: $N_8755827913157_4195671c_1, from-node: $N_8755827913157_4195671c) isa node-link; 

match
$N_8755827913157_4195671c isa instruction, has hash "N_8755827913157_4195671c"; 

insert
$N_8755827913157_4195671c_2 isa constant, has hash "N_8755827913157_4195671c_2", has constant-value "2", has edge-label "false";
(to-node: $N_8755827913157_4195671c_2, from-node: $N_8755827913157_4195671c) isa node-link; 

match 
$func___do_global_dtors_aux isa function, has name "__do_global_dtors_aux"; 

insert 
$bb isa basic-block, has bb-start 1, has bb-end 1; 
(contains-basic-block: $bb, in-function: $func___do_global_dtors_aux) isa has-basic-block; 

match 
$func___do_global_dtors_aux isa function, has name "__do_global_dtors_aux"; 
$bb isa basic-block, has bb-start 1, has bb-end 1; 
(in-function: $func___do_global_dtors_aux, contains-basic-block: $bb) isa has-basic-block; 

match
$func___do_global_dtors_aux isa function, has name "__do_global_dtors_aux"; 
$bb isa basic-block, has bb-start 1, has bb-end 1; 
(in-function: $func___do_global_dtors_aux, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827848065_0c isa instruction, has hash "N_8755827848065_0c", has il-index 1, has asm-address "0x0", has operation-type "MLIL_GOTO", has ins-text "goto 5 @ 0x40056a";
(contains-instruction: $N_8755827848065_0c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827848065_0c isa instruction, has hash "N_8755827848065_0c"; 

insert
$N_8755827848065_0c_0 isa constant, has hash "N_8755827848065_0c_0", has constant-value "5", has edge-label "dest";
(to-node: $N_8755827848065_0c_0, from-node: $N_8755827848065_0c) isa node-link; 

match 
$func___do_global_dtors_aux isa function, has name "__do_global_dtors_aux"; 

insert 
$bb isa basic-block, has bb-start 2, has bb-end 4; 
(contains-basic-block: $bb, in-function: $func___do_global_dtors_aux) isa has-basic-block; 

match 
$func___do_global_dtors_aux isa function, has name "__do_global_dtors_aux"; 
$bb isa basic-block, has bb-start 2, has bb-end 4; 
(in-function: $func___do_global_dtors_aux, contains-basic-block: $bb) isa has-basic-block; 

match
$func___do_global_dtors_aux isa function, has name "__do_global_dtors_aux"; 
$bb isa basic-block, has bb-start 2, has bb-end 4; 
(in-function: $func___do_global_dtors_aux, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755828977529_4195677c isa instruction, has hash "N_8755828977529_4195677c", has il-index 2, has asm-address "0x40055d", has operation-type "MLIL_CALL_SSA", has ins-text "rax#1, mem#1 = 0x4004d0() @ mem#0";
(contains-instruction: $N_8755828977529_4195677c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755828977529_4195677c isa instruction, has hash "N_8755828977529_4195677c"; 

insert
$N_8755828977529_4195677c_0 isa MLIL_CALL_OUTPUT_SSA, has hash "N_8755828977529_4195677c_0", has edge-label "output";
(to-node: $N_8755828977529_4195677c_0, from-node: $N_8755828977529_4195677c) isa node-link; 

match
$N_8755828977529_4195677c_0 isa operation, has hash "N_8755828977529_4195677c_0"; 

insert
$N_8755828977529_4195677c_0_0 isa constant, has hash "N_8755828977529_4195677c_0_0", has constant-value "1", has edge-label "dest_memory";
(to-node: $N_8755828977529_4195677c_0_0, from-node: $N_8755828977529_4195677c_0) isa node-link; 

match
$N_8755828977529_4195677c_0 isa operation, has hash "N_8755828977529_4195677c_0"; 

insert
$L_8755828977529_4195677c_0_1 isa list, has hash "L_8755828977529_4195677c_0_1", has list-size 1, has edge-label "dest";
(to-node: $L_8755828977529_4195677c_0_1, from-node: $N_8755828977529_4195677c_0) isa node-link; 

match
$L_8755828977529_4195677c_0_1 isa list, has hash "L_8755828977529_4195677c_0_1"; 

insert
$N_8755828977529_4195677c_0_1_0 isa variable-ssa, has hash "N_8755828977529_4195677c_0_1_0", has var "rax", has version 1, has edge-label "0", has var-type "int64_t", has var-size 4, has var-func "__do_global_dtors_aux";
(to-node: $N_8755828977529_4195677c_0_1_0, from-node: $L_8755828977529_4195677c_0_1) isa node-link; 

match
$N_8755828977529_4195677c isa instruction, has hash "N_8755828977529_4195677c"; 

insert
$N_8755828977529_4195677c_1 isa MLIL_CONST_PTR, has hash "N_8755828977529_4195677c_1", has edge-label "dest";
(to-node: $N_8755828977529_4195677c_1, from-node: $N_8755828977529_4195677c) isa node-link; 

match
$N_8755828977529_4195677c_1 isa operation, has hash "N_8755828977529_4195677c_1"; 

insert
$N_8755828977529_4195677c_1_0 isa constant, has hash "N_8755828977529_4195677c_1_0", has constant-value "4195536", has edge-label "constant";
(to-node: $N_8755828977529_4195677c_1_0, from-node: $N_8755828977529_4195677c_1) isa node-link; 

match
$N_8755828977529_4195677c isa instruction, has hash "N_8755828977529_4195677c"; 

insert
$L_8755828977529_4195677c_2 isa list, has hash "L_8755828977529_4195677c_2", has list-size 0, has edge-label "params";
(to-node: $L_8755828977529_4195677c_2, from-node: $N_8755828977529_4195677c) isa node-link; 

match
$N_8755828977529_4195677c isa instruction, has hash "N_8755828977529_4195677c"; 

insert
$N_8755828977529_4195677c_3 isa constant, has hash "N_8755828977529_4195677c_3", has constant-value "0", has edge-label "src_memory";
(to-node: $N_8755828977529_4195677c_3, from-node: $N_8755828977529_4195677c) isa node-link; 

match 
$func___do_global_dtors_aux isa function, has name "__do_global_dtors_aux"; 
$bb isa basic-block, has bb-start 2, has bb-end 4; 
(in-function: $func___do_global_dtors_aux, contains-basic-block: $bb) isa has-basic-block; 

match
$func___do_global_dtors_aux isa function, has name "__do_global_dtors_aux"; 
$bb isa basic-block, has bb-start 2, has bb-end 4; 
(in-function: $func___do_global_dtors_aux, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827838337_4195683c isa instruction, has hash "N_8755827838337_4195683c", has il-index 4, has asm-address "0x400563", has operation-type "MLIL_GOTO", has ins-text "goto 5 @ 0x40056a";
(contains-instruction: $N_8755827838337_4195683c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827838337_4195683c isa instruction, has hash "N_8755827838337_4195683c"; 

insert
$N_8755827838337_4195683c_0 isa constant, has hash "N_8755827838337_4195683c_0", has constant-value "5", has edge-label "dest";
(to-node: $N_8755827838337_4195683c_0, from-node: $N_8755827838337_4195683c) isa node-link; 

match
$func___do_global_dtors_aux isa function, has name "__do_global_dtors_aux"; 
$bb isa basic-block, has bb-start 2, has bb-end 4; 
(in-function: $func___do_global_dtors_aux, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827913045_4195683c isa instruction, has hash "N_8755827913045_4195683c", has il-index 3, has asm-address "0x400563", has operation-type "MLIL_STORE_SSA", has ins-text "[0x601040].b = 1 @ mem#1 -> mem#2";
(contains-instruction: $N_8755827913045_4195683c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827913045_4195683c isa instruction, has hash "N_8755827913045_4195683c"; 

insert
$N_8755827913045_4195683c_0 isa MLIL_CONST_PTR, has hash "N_8755827913045_4195683c_0", has edge-label "dest";
(to-node: $N_8755827913045_4195683c_0, from-node: $N_8755827913045_4195683c) isa node-link; 

match
$N_8755827913045_4195683c_0 isa operation, has hash "N_8755827913045_4195683c_0"; 

insert
$N_8755827913045_4195683c_0_0 isa constant, has hash "N_8755827913045_4195683c_0_0", has constant-value "6295616", has edge-label "constant";
(to-node: $N_8755827913045_4195683c_0_0, from-node: $N_8755827913045_4195683c_0) isa node-link; 

match
$N_8755827913045_4195683c isa instruction, has hash "N_8755827913045_4195683c"; 

insert
$N_8755827913045_4195683c_1 isa constant, has hash "N_8755827913045_4195683c_1", has constant-value "2", has edge-label "dest_memory";
(to-node: $N_8755827913045_4195683c_1, from-node: $N_8755827913045_4195683c) isa node-link; 

match
$N_8755827913045_4195683c isa instruction, has hash "N_8755827913045_4195683c"; 

insert
$N_8755827913045_4195683c_2 isa constant, has hash "N_8755827913045_4195683c_2", has constant-value "1", has edge-label "src_memory";
(to-node: $N_8755827913045_4195683c_2, from-node: $N_8755827913045_4195683c) isa node-link; 

match
$N_8755827913045_4195683c isa instruction, has hash "N_8755827913045_4195683c"; 

insert
$N_8755827913045_4195683c_3 isa MLIL_CONST, has hash "N_8755827913045_4195683c_3", has edge-label "src";
(to-node: $N_8755827913045_4195683c_3, from-node: $N_8755827913045_4195683c) isa node-link; 

match
$N_8755827913045_4195683c_3 isa operation, has hash "N_8755827913045_4195683c_3"; 

insert
$N_8755827913045_4195683c_3_0 isa constant, has hash "N_8755827913045_4195683c_3_0", has constant-value "1", has edge-label "constant";
(to-node: $N_8755827913045_4195683c_3_0, from-node: $N_8755827913045_4195683c_3) isa node-link; 

match 
$func___do_global_dtors_aux isa function, has name "__do_global_dtors_aux"; 

insert 
$bb isa basic-block, has bb-start 5, has bb-end 7; 
(contains-basic-block: $bb, in-function: $func___do_global_dtors_aux) isa has-basic-block; 

match 
$func___do_global_dtors_aux isa function, has name "__do_global_dtors_aux"; 
$bb isa basic-block, has bb-start 5, has bb-end 7; 
(in-function: $func___do_global_dtors_aux, contains-basic-block: $bb) isa has-basic-block; 

match
$func___do_global_dtors_aux isa function, has name "__do_global_dtors_aux"; 
$bb isa basic-block, has bb-start 5, has bb-end 7; 
(in-function: $func___do_global_dtors_aux, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827837289_4195690c isa instruction, has hash "N_8755827837289_4195690c", has il-index 5, has asm-address "0x40056a", has operation-type "MLIL_VAR_PHI", has ins-text "rax#2 = ϕ(rax#0, rax#1)";
(contains-instruction: $N_8755827837289_4195690c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827837289_4195690c isa instruction, has hash "N_8755827837289_4195690c"; 

insert
$N_8755827837289_4195690c_0 isa variable-ssa, has hash "N_8755827837289_4195690c_0", has var "rax", has version 2, has edge-label "dest", has var-type "int64_t", has var-size 4, has var-func "__do_global_dtors_aux";
(to-node: $N_8755827837289_4195690c_0, from-node: $N_8755827837289_4195690c) isa node-link; 

match
$N_8755827837289_4195690c isa instruction, has hash "N_8755827837289_4195690c"; 

insert
$L_8755827837289_4195690c_1 isa list, has hash "L_8755827837289_4195690c_1", has list-size 2, has edge-label "src";
(to-node: $L_8755827837289_4195690c_1, from-node: $N_8755827837289_4195690c) isa node-link; 

match
$L_8755827837289_4195690c_1 isa list, has hash "L_8755827837289_4195690c_1"; 

insert
$N_8755827837289_4195690c_1_0 isa variable-ssa, has hash "N_8755827837289_4195690c_1_0", has var "rax", has version 0, has edge-label "0", has var-type "int64_t", has var-size 4, has var-func "__do_global_dtors_aux";
(to-node: $N_8755827837289_4195690c_1_0, from-node: $L_8755827837289_4195690c_1) isa node-link; 

match
$L_8755827837289_4195690c_1 isa list, has hash "L_8755827837289_4195690c_1"; 

insert
$N_8755827837289_4195690c_1_1 isa variable-ssa, has hash "N_8755827837289_4195690c_1_1", has var "rax", has version 1, has edge-label "1", has var-type "int64_t", has var-size 4, has var-func "__do_global_dtors_aux";
(to-node: $N_8755827837289_4195690c_1_1, from-node: $L_8755827837289_4195690c_1) isa node-link; 

match
$func___do_global_dtors_aux isa function, has name "__do_global_dtors_aux"; 
$bb isa basic-block, has bb-start 5, has bb-end 7; 
(in-function: $func___do_global_dtors_aux, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827868441_4195690c isa instruction, has hash "N_8755827868441_4195690c", has il-index 7, has asm-address "0x40056a", has operation-type "MLIL_RET", has ins-text "return ";
(contains-instruction: $N_8755827868441_4195690c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827868441_4195690c isa instruction, has hash "N_8755827868441_4195690c"; 

insert
$L_8755827868441_4195690c_0 isa list, has hash "L_8755827868441_4195690c_0", has list-size 0, has edge-label "src";
(to-node: $L_8755827868441_4195690c_0, from-node: $N_8755827868441_4195690c) isa node-link; 

match
$func___do_global_dtors_aux isa function, has name "__do_global_dtors_aux"; 
$bb isa basic-block, has bb-start 5, has bb-end 7; 
(in-function: $func___do_global_dtors_aux, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755828967657_4195690c isa instruction, has hash "N_8755828967657_4195690c", has il-index 6, has asm-address "0x40056a", has operation-type "MLIL_MEM_PHI", has ins-text "mem#3 = ϕ(mem#0, mem#2)";
(contains-instruction: $N_8755828967657_4195690c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755828967657_4195690c isa instruction, has hash "N_8755828967657_4195690c"; 

insert
$N_8755828967657_4195690c_0 isa constant, has hash "N_8755828967657_4195690c_0", has constant-value "3", has edge-label "dest_memory";
(to-node: $N_8755828967657_4195690c_0, from-node: $N_8755828967657_4195690c) isa node-link; 

match
$N_8755828967657_4195690c isa instruction, has hash "N_8755828967657_4195690c"; 

insert
$L_8755828967657_4195690c_1 isa list, has hash "L_8755828967657_4195690c_1", has list-size 2, has edge-label "src_memory";
(to-node: $L_8755828967657_4195690c_1, from-node: $N_8755828967657_4195690c) isa node-link; 

match
$L_8755828967657_4195690c_1 isa list, has hash "L_8755828967657_4195690c_1"; 

insert
$N_8755828967657_4195690c_1_0 isa constant, has hash "N_8755828967657_4195690c_1_0", has constant-value "0", has edge-label "0";
(to-node: $N_8755828967657_4195690c_1_0, from-node: $L_8755828967657_4195690c_1) isa node-link; 

match
$L_8755828967657_4195690c_1 isa list, has hash "L_8755828967657_4195690c_1"; 

insert
$N_8755828967657_4195690c_1_1 isa constant, has hash "N_8755828967657_4195690c_1_1", has constant-value "2", has edge-label "1";
(to-node: $N_8755828967657_4195690c_1_1, from-node: $L_8755828967657_4195690c_1) isa node-link; 

match 
$func___do_global_dtors_aux isa function, has name "__do_global_dtors_aux"; 
$frombb isa basic-block, has bb-end 0, has bb-start 0; 
$tobb   isa basic-block, has bb-end 1, has bb-start 1; 
(contains-basic-block: $frombb, in-function: $func___do_global_dtors_aux) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func___do_global_dtors_aux) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func___do_global_dtors_aux isa function, has name "__do_global_dtors_aux"; 
$frombb isa basic-block, has bb-end 0, has bb-start 0; 
$tobb   isa basic-block, has bb-end 4, has bb-start 2; 
(contains-basic-block: $frombb, in-function: $func___do_global_dtors_aux) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func___do_global_dtors_aux) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func___do_global_dtors_aux isa function, has name "__do_global_dtors_aux"; 
$frombb isa basic-block, has bb-end 1, has bb-start 1; 
$tobb   isa basic-block, has bb-end 7, has bb-start 5; 
(contains-basic-block: $frombb, in-function: $func___do_global_dtors_aux) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func___do_global_dtors_aux) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func___do_global_dtors_aux isa function, has name "__do_global_dtors_aux"; 
$frombb isa basic-block, has bb-end 4, has bb-start 2; 
$tobb   isa basic-block, has bb-end 7, has bb-start 5; 
(contains-basic-block: $frombb, in-function: $func___do_global_dtors_aux) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func___do_global_dtors_aux) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

insert 
$func_frame_dummy isa function, has name "frame_dummy", has asm-address "0x400570", has stack "[<var int64_t __saved_rbp>, <var void* const __return_addr>]"; 

match 
$func_frame_dummy isa function, has name "frame_dummy"; 

insert 
$bb isa basic-block, has bb-start 0, has bb-end 0; 
(contains-basic-block: $bb, in-function: $func_frame_dummy) isa has-basic-block; 

match 
$func_frame_dummy isa function, has name "frame_dummy"; 
$bb isa basic-block, has bb-start 0, has bb-end 0; 
(in-function: $func_frame_dummy, contains-basic-block: $bb) isa has-basic-block; 

match
$func_frame_dummy isa function, has name "frame_dummy"; 
$bb isa basic-block, has bb-start 0, has bb-end 0; 
(in-function: $func_frame_dummy, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827848105_4195705c isa instruction, has hash "N_8755827848105_4195705c", has il-index 0, has asm-address "0x400579", has operation-type "MLIL_IF", has ins-text "if ([0x600e20].q @ mem#0 != 0) then 1 @ 0x400588 else 2 @ 0x0";
(contains-instruction: $N_8755827848105_4195705c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827848105_4195705c isa instruction, has hash "N_8755827848105_4195705c"; 

insert
$N_8755827848105_4195705c_0 isa MLIL_CMP_NE, has hash "N_8755827848105_4195705c_0", has edge-label "condition";
(to-node: $N_8755827848105_4195705c_0, from-node: $N_8755827848105_4195705c) isa node-link; 

match
$N_8755827848105_4195705c_0 isa operation, has hash "N_8755827848105_4195705c_0"; 

insert
$N_8755827848105_4195705c_0_0 isa MLIL_LOAD_SSA, has hash "N_8755827848105_4195705c_0_0", has edge-label "left";
(to-node: $N_8755827848105_4195705c_0_0, from-node: $N_8755827848105_4195705c_0) isa node-link; 

match
$N_8755827848105_4195705c_0_0 isa operation, has hash "N_8755827848105_4195705c_0_0"; 

insert
$N_8755827848105_4195705c_0_0_0 isa MLIL_CONST_PTR, has hash "N_8755827848105_4195705c_0_0_0", has edge-label "src";
(to-node: $N_8755827848105_4195705c_0_0_0, from-node: $N_8755827848105_4195705c_0_0) isa node-link; 

match
$N_8755827848105_4195705c_0_0_0 isa operation, has hash "N_8755827848105_4195705c_0_0_0"; 

insert
$N_8755827848105_4195705c_0_0_0_0 isa constant, has hash "N_8755827848105_4195705c_0_0_0_0", has constant-value "6295072", has edge-label "constant";
(to-node: $N_8755827848105_4195705c_0_0_0_0, from-node: $N_8755827848105_4195705c_0_0_0) isa node-link; 

match
$N_8755827848105_4195705c_0_0 isa operation, has hash "N_8755827848105_4195705c_0_0"; 

insert
$N_8755827848105_4195705c_0_0_1 isa constant, has hash "N_8755827848105_4195705c_0_0_1", has constant-value "0", has edge-label "src_memory";
(to-node: $N_8755827848105_4195705c_0_0_1, from-node: $N_8755827848105_4195705c_0_0) isa node-link; 

match
$N_8755827848105_4195705c_0 isa operation, has hash "N_8755827848105_4195705c_0"; 

insert
$N_8755827848105_4195705c_0_1 isa MLIL_CONST, has hash "N_8755827848105_4195705c_0_1", has edge-label "right";
(to-node: $N_8755827848105_4195705c_0_1, from-node: $N_8755827848105_4195705c_0) isa node-link; 

match
$N_8755827848105_4195705c_0_1 isa operation, has hash "N_8755827848105_4195705c_0_1"; 

insert
$N_8755827848105_4195705c_0_1_0 isa constant, has hash "N_8755827848105_4195705c_0_1_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8755827848105_4195705c_0_1_0, from-node: $N_8755827848105_4195705c_0_1) isa node-link; 

match
$N_8755827848105_4195705c isa instruction, has hash "N_8755827848105_4195705c"; 

insert
$N_8755827848105_4195705c_1 isa constant, has hash "N_8755827848105_4195705c_1", has constant-value "1", has edge-label "true";
(to-node: $N_8755827848105_4195705c_1, from-node: $N_8755827848105_4195705c) isa node-link; 

match
$N_8755827848105_4195705c isa instruction, has hash "N_8755827848105_4195705c"; 

insert
$N_8755827848105_4195705c_2 isa constant, has hash "N_8755827848105_4195705c_2", has constant-value "2", has edge-label "false";
(to-node: $N_8755827848105_4195705c_2, from-node: $N_8755827848105_4195705c) isa node-link; 

match 
$func_frame_dummy isa function, has name "frame_dummy"; 

insert 
$bb isa basic-block, has bb-start 1, has bb-end 1; 
(contains-basic-block: $bb, in-function: $func_frame_dummy) isa has-basic-block; 

match 
$func_frame_dummy isa function, has name "frame_dummy"; 
$bb isa basic-block, has bb-start 1, has bb-end 1; 
(in-function: $func_frame_dummy, contains-basic-block: $bb) isa has-basic-block; 

match
$func_frame_dummy isa function, has name "frame_dummy"; 
$bb isa basic-block, has bb-start 1, has bb-end 1; 
(in-function: $func_frame_dummy, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827848181_4195720c isa instruction, has hash "N_8755827848181_4195720c", has il-index 1, has asm-address "0x400588", has operation-type "MLIL_IF", has ins-text "if (0 == 0) then 3 @ 0x0 else 4 @ 0x40058e";
(contains-instruction: $N_8755827848181_4195720c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827848181_4195720c isa instruction, has hash "N_8755827848181_4195720c"; 

insert
$N_8755827848181_4195720c_0 isa MLIL_CMP_E, has hash "N_8755827848181_4195720c_0", has edge-label "condition";
(to-node: $N_8755827848181_4195720c_0, from-node: $N_8755827848181_4195720c) isa node-link; 

match
$N_8755827848181_4195720c_0 isa operation, has hash "N_8755827848181_4195720c_0"; 

insert
$N_8755827848181_4195720c_0_0 isa MLIL_CONST, has hash "N_8755827848181_4195720c_0_0", has edge-label "left";
(to-node: $N_8755827848181_4195720c_0_0, from-node: $N_8755827848181_4195720c_0) isa node-link; 

match
$N_8755827848181_4195720c_0_0 isa operation, has hash "N_8755827848181_4195720c_0_0"; 

insert
$N_8755827848181_4195720c_0_0_0 isa constant, has hash "N_8755827848181_4195720c_0_0_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8755827848181_4195720c_0_0_0, from-node: $N_8755827848181_4195720c_0_0) isa node-link; 

match
$N_8755827848181_4195720c_0 isa operation, has hash "N_8755827848181_4195720c_0"; 

insert
$N_8755827848181_4195720c_0_1 isa MLIL_CONST, has hash "N_8755827848181_4195720c_0_1", has edge-label "right";
(to-node: $N_8755827848181_4195720c_0_1, from-node: $N_8755827848181_4195720c_0) isa node-link; 

match
$N_8755827848181_4195720c_0_1 isa operation, has hash "N_8755827848181_4195720c_0_1"; 

insert
$N_8755827848181_4195720c_0_1_0 isa constant, has hash "N_8755827848181_4195720c_0_1_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8755827848181_4195720c_0_1_0, from-node: $N_8755827848181_4195720c_0_1) isa node-link; 

match
$N_8755827848181_4195720c isa instruction, has hash "N_8755827848181_4195720c"; 

insert
$N_8755827848181_4195720c_1 isa constant, has hash "N_8755827848181_4195720c_1", has constant-value "3", has edge-label "true";
(to-node: $N_8755827848181_4195720c_1, from-node: $N_8755827848181_4195720c) isa node-link; 

match
$N_8755827848181_4195720c isa instruction, has hash "N_8755827848181_4195720c"; 

insert
$N_8755827848181_4195720c_2 isa constant, has hash "N_8755827848181_4195720c_2", has constant-value "4", has edge-label "false";
(to-node: $N_8755827848181_4195720c_2, from-node: $N_8755827848181_4195720c) isa node-link; 

match 
$func_frame_dummy isa function, has name "frame_dummy"; 

insert 
$bb isa basic-block, has bb-start 2, has bb-end 2; 
(contains-basic-block: $bb, in-function: $func_frame_dummy) isa has-basic-block; 

match 
$func_frame_dummy isa function, has name "frame_dummy"; 
$bb isa basic-block, has bb-start 2, has bb-end 2; 
(in-function: $func_frame_dummy, contains-basic-block: $bb) isa has-basic-block; 

match
$func_frame_dummy isa function, has name "frame_dummy"; 
$bb isa basic-block, has bb-start 2, has bb-end 2; 
(in-function: $func_frame_dummy, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827848109_0c isa instruction, has hash "N_8755827848109_0c", has il-index 3, has asm-address "0x0", has operation-type "MLIL_GOTO", has ins-text "goto 6 @ 0x40057b";
(contains-instruction: $N_8755827848109_0c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827848109_0c isa instruction, has hash "N_8755827848109_0c"; 

insert
$N_8755827848109_0c_0 isa constant, has hash "N_8755827848109_0c_0", has constant-value "6", has edge-label "dest";
(to-node: $N_8755827848109_0c_0, from-node: $N_8755827848109_0c) isa node-link; 

match
$func_frame_dummy isa function, has name "frame_dummy"; 
$bb isa basic-block, has bb-start 2, has bb-end 2; 
(in-function: $func_frame_dummy, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827848133_0c isa instruction, has hash "N_8755827848133_0c", has il-index 2, has asm-address "0x0", has operation-type "MLIL_GOTO", has ins-text "goto 6 @ 0x40057b";
(contains-instruction: $N_8755827848133_0c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827848133_0c isa instruction, has hash "N_8755827848133_0c"; 

insert
$N_8755827848133_0c_0 isa constant, has hash "N_8755827848133_0c_0", has constant-value "6", has edge-label "dest";
(to-node: $N_8755827848133_0c_0, from-node: $N_8755827848133_0c) isa node-link; 

match 
$func_frame_dummy isa function, has name "frame_dummy"; 

insert 
$bb isa basic-block, has bb-start 3, has bb-end 3; 
(contains-basic-block: $bb, in-function: $func_frame_dummy) isa has-basic-block; 

match 
$func_frame_dummy isa function, has name "frame_dummy"; 

insert 
$bb isa basic-block, has bb-start 4, has bb-end 5; 
(contains-basic-block: $bb, in-function: $func_frame_dummy) isa has-basic-block; 

match 
$func_frame_dummy isa function, has name "frame_dummy"; 
$bb isa basic-block, has bb-start 4, has bb-end 5; 
(in-function: $func_frame_dummy, contains-basic-block: $bb) isa has-basic-block; 

match
$func_frame_dummy isa function, has name "frame_dummy"; 
$bb isa basic-block, has bb-start 4, has bb-end 5; 
(in-function: $func_frame_dummy, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827847977_4195726c isa instruction, has hash "N_8755827847977_4195726c", has il-index 4, has asm-address "0x40058e", has operation-type "MLIL_CALL_SSA", has ins-text "mem#1 = 0(0x600e20) @ mem#0";
(contains-instruction: $N_8755827847977_4195726c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827847977_4195726c isa instruction, has hash "N_8755827847977_4195726c"; 

insert
$N_8755827847977_4195726c_0 isa MLIL_CALL_OUTPUT_SSA, has hash "N_8755827847977_4195726c_0", has edge-label "output";
(to-node: $N_8755827847977_4195726c_0, from-node: $N_8755827847977_4195726c) isa node-link; 

match
$N_8755827847977_4195726c_0 isa operation, has hash "N_8755827847977_4195726c_0"; 

insert
$N_8755827847977_4195726c_0_0 isa constant, has hash "N_8755827847977_4195726c_0_0", has constant-value "1", has edge-label "dest_memory";
(to-node: $N_8755827847977_4195726c_0_0, from-node: $N_8755827847977_4195726c_0) isa node-link; 

match
$N_8755827847977_4195726c_0 isa operation, has hash "N_8755827847977_4195726c_0"; 

insert
$L_8755827847977_4195726c_0_1 isa list, has hash "L_8755827847977_4195726c_0_1", has list-size 0, has edge-label "dest";
(to-node: $L_8755827847977_4195726c_0_1, from-node: $N_8755827847977_4195726c_0) isa node-link; 

match
$N_8755827847977_4195726c isa instruction, has hash "N_8755827847977_4195726c"; 

insert
$N_8755827847977_4195726c_1 isa MLIL_CONST_PTR, has hash "N_8755827847977_4195726c_1", has edge-label "dest";
(to-node: $N_8755827847977_4195726c_1, from-node: $N_8755827847977_4195726c) isa node-link; 

match
$N_8755827847977_4195726c_1 isa operation, has hash "N_8755827847977_4195726c_1"; 

insert
$N_8755827847977_4195726c_1_0 isa constant, has hash "N_8755827847977_4195726c_1_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8755827847977_4195726c_1_0, from-node: $N_8755827847977_4195726c_1) isa node-link; 

match
$N_8755827847977_4195726c isa instruction, has hash "N_8755827847977_4195726c"; 

insert
$L_8755827847977_4195726c_2 isa list, has hash "L_8755827847977_4195726c_2", has list-size 1, has edge-label "params";
(to-node: $L_8755827847977_4195726c_2, from-node: $N_8755827847977_4195726c) isa node-link; 

match
$L_8755827847977_4195726c_2 isa list, has hash "L_8755827847977_4195726c_2"; 

insert
$N_8755827847977_4195726c_2_0 isa MLIL_CONST, has hash "N_8755827847977_4195726c_2_0", has edge-label "0";
(to-node: $N_8755827847977_4195726c_2_0, from-node: $L_8755827847977_4195726c_2) isa node-link; 

match
$N_8755827847977_4195726c_2_0 isa operation, has hash "N_8755827847977_4195726c_2_0"; 

insert
$N_8755827847977_4195726c_2_0_0 isa constant, has hash "N_8755827847977_4195726c_2_0_0", has constant-value "6295072", has edge-label "constant";
(to-node: $N_8755827847977_4195726c_2_0_0, from-node: $N_8755827847977_4195726c_2_0) isa node-link; 

match
$N_8755827847977_4195726c isa instruction, has hash "N_8755827847977_4195726c"; 

insert
$N_8755827847977_4195726c_3 isa constant, has hash "N_8755827847977_4195726c_3", has constant-value "0", has edge-label "src_memory";
(to-node: $N_8755827847977_4195726c_3, from-node: $N_8755827847977_4195726c) isa node-link; 

match 
$func_frame_dummy isa function, has name "frame_dummy"; 
$bb isa basic-block, has bb-start 4, has bb-end 5; 
(in-function: $func_frame_dummy, contains-basic-block: $bb) isa has-basic-block; 

match
$func_frame_dummy isa function, has name "frame_dummy"; 
$bb isa basic-block, has bb-start 4, has bb-end 5; 
(in-function: $func_frame_dummy, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827847945_4195729c isa instruction, has hash "N_8755827847945_4195729c", has il-index 5, has asm-address "0x400591", has operation-type "MLIL_JUMP", has ins-text "jump(0x400510)";
(contains-instruction: $N_8755827847945_4195729c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827847945_4195729c isa instruction, has hash "N_8755827847945_4195729c"; 

insert
$N_8755827847945_4195729c_0 isa MLIL_CONST_PTR, has hash "N_8755827847945_4195729c_0", has edge-label "dest";
(to-node: $N_8755827847945_4195729c_0, from-node: $N_8755827847945_4195729c) isa node-link; 

match
$N_8755827847945_4195729c_0 isa operation, has hash "N_8755827847945_4195729c_0"; 

insert
$N_8755827847945_4195729c_0_0 isa constant, has hash "N_8755827847945_4195729c_0_0", has constant-value "4195600", has edge-label "constant";
(to-node: $N_8755827847945_4195729c_0_0, from-node: $N_8755827847945_4195729c_0) isa node-link; 

match 
$func_frame_dummy isa function, has name "frame_dummy"; 

insert 
$bb isa basic-block, has bb-start 6, has bb-end 6; 
(contains-basic-block: $bb, in-function: $func_frame_dummy) isa has-basic-block; 

match 
$func_frame_dummy isa function, has name "frame_dummy"; 
$bb isa basic-block, has bb-start 6, has bb-end 6; 
(in-function: $func_frame_dummy, contains-basic-block: $bb) isa has-basic-block; 

match
$func_frame_dummy isa function, has name "frame_dummy"; 
$bb isa basic-block, has bb-start 6, has bb-end 6; 
(in-function: $func_frame_dummy, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827848169_4195707c isa instruction, has hash "N_8755827848169_4195707c", has il-index 6, has asm-address "0x40057b", has operation-type "MLIL_JUMP", has ins-text "jump(0x400510)";
(contains-instruction: $N_8755827848169_4195707c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827848169_4195707c isa instruction, has hash "N_8755827848169_4195707c"; 

insert
$N_8755827848169_4195707c_0 isa MLIL_CONST_PTR, has hash "N_8755827848169_4195707c_0", has edge-label "dest";
(to-node: $N_8755827848169_4195707c_0, from-node: $N_8755827848169_4195707c) isa node-link; 

match
$N_8755827848169_4195707c_0 isa operation, has hash "N_8755827848169_4195707c_0"; 

insert
$N_8755827848169_4195707c_0_0 isa constant, has hash "N_8755827848169_4195707c_0_0", has constant-value "4195600", has edge-label "constant";
(to-node: $N_8755827848169_4195707c_0_0, from-node: $N_8755827848169_4195707c_0) isa node-link; 

match 
$func_frame_dummy isa function, has name "frame_dummy"; 
$frombb isa basic-block, has bb-end 0, has bb-start 0; 
$tobb   isa basic-block, has bb-end 1, has bb-start 1; 
(contains-basic-block: $frombb, in-function: $func_frame_dummy) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_frame_dummy) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_frame_dummy isa function, has name "frame_dummy"; 
$frombb isa basic-block, has bb-end 0, has bb-start 0; 
$tobb   isa basic-block, has bb-end 2, has bb-start 2; 
(contains-basic-block: $frombb, in-function: $func_frame_dummy) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_frame_dummy) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_frame_dummy isa function, has name "frame_dummy"; 
$frombb isa basic-block, has bb-end 1, has bb-start 1; 
$tobb   isa basic-block, has bb-end 3, has bb-start 3; 
(contains-basic-block: $frombb, in-function: $func_frame_dummy) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_frame_dummy) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_frame_dummy isa function, has name "frame_dummy"; 
$frombb isa basic-block, has bb-end 1, has bb-start 1; 
$tobb   isa basic-block, has bb-end 5, has bb-start 4; 
(contains-basic-block: $frombb, in-function: $func_frame_dummy) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_frame_dummy) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_frame_dummy isa function, has name "frame_dummy"; 
$frombb isa basic-block, has bb-end 2, has bb-start 2; 
$tobb   isa basic-block, has bb-end 6, has bb-start 6; 
(contains-basic-block: $frombb, in-function: $func_frame_dummy) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_frame_dummy) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_frame_dummy isa function, has name "frame_dummy"; 
$frombb isa basic-block, has bb-end 3, has bb-start 3; 
$tobb   isa basic-block, has bb-end 6, has bb-start 6; 
(contains-basic-block: $frombb, in-function: $func_frame_dummy) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_frame_dummy) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

insert 
$func_main isa function, has name "main", has asm-address "0x400596", has stack "[<var void var_128>, <var int32_t var_11c>, <var int64_t var_118>, <var void var_110>, <var int64_t var_10>, <var int64_t __saved_rbp>, <var void* const __return_addr>]"; 

match 
$func_main isa function, has name "main"; 

insert 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(contains-basic-block: $bb, in-function: $func_main) isa has-basic-block; 

match 
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827848137_4195745c isa instruction, has hash "N_8755827848137_4195745c", has il-index 0, has asm-address "0x4005a1", has operation-type "MLIL_SET_VAR_SSA", has ins-text "rax#1 = [fsbase#0 + 0x28].q @ mem#0";
(contains-instruction: $N_8755827848137_4195745c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827848137_4195745c isa instruction, has hash "N_8755827848137_4195745c"; 

insert
$N_8755827848137_4195745c_0 isa variable-ssa, has hash "N_8755827848137_4195745c_0", has var "rax", has version 1, has edge-label "dest", has var-type "int64_t", has var-size 4, has var-func "main";
(to-node: $N_8755827848137_4195745c_0, from-node: $N_8755827848137_4195745c) isa node-link; 

match
$N_8755827848137_4195745c isa instruction, has hash "N_8755827848137_4195745c"; 

insert
$N_8755827848137_4195745c_1 isa MLIL_LOAD_SSA, has hash "N_8755827848137_4195745c_1", has edge-label "src";
(to-node: $N_8755827848137_4195745c_1, from-node: $N_8755827848137_4195745c) isa node-link; 

match
$N_8755827848137_4195745c_1 isa operation, has hash "N_8755827848137_4195745c_1"; 

insert
$N_8755827848137_4195745c_1_0 isa MLIL_ADD, has hash "N_8755827848137_4195745c_1_0", has edge-label "src";
(to-node: $N_8755827848137_4195745c_1_0, from-node: $N_8755827848137_4195745c_1) isa node-link; 

match
$N_8755827848137_4195745c_1_0 isa operation, has hash "N_8755827848137_4195745c_1_0"; 

insert
$N_8755827848137_4195745c_1_0_0 isa MLIL_VAR_SSA, has hash "N_8755827848137_4195745c_1_0_0", has edge-label "left";
(to-node: $N_8755827848137_4195745c_1_0_0, from-node: $N_8755827848137_4195745c_1_0) isa node-link; 

match
$N_8755827848137_4195745c_1_0_0 isa operation, has hash "N_8755827848137_4195745c_1_0_0"; 

insert
$N_8755827848137_4195745c_1_0_0_0 isa variable-ssa, has hash "N_8755827848137_4195745c_1_0_0_0", has var "fsbase", has version 0, has edge-label "src", has var-type "int64_t", has var-size 4, has var-func "main";
(to-node: $N_8755827848137_4195745c_1_0_0_0, from-node: $N_8755827848137_4195745c_1_0_0) isa node-link; 

match
$N_8755827848137_4195745c_1_0 isa operation, has hash "N_8755827848137_4195745c_1_0"; 

insert
$N_8755827848137_4195745c_1_0_1 isa MLIL_CONST, has hash "N_8755827848137_4195745c_1_0_1", has edge-label "right";
(to-node: $N_8755827848137_4195745c_1_0_1, from-node: $N_8755827848137_4195745c_1_0) isa node-link; 

match
$N_8755827848137_4195745c_1_0_1 isa operation, has hash "N_8755827848137_4195745c_1_0_1"; 

insert
$N_8755827848137_4195745c_1_0_1_0 isa constant, has hash "N_8755827848137_4195745c_1_0_1_0", has constant-value "40", has edge-label "constant";
(to-node: $N_8755827848137_4195745c_1_0_1_0, from-node: $N_8755827848137_4195745c_1_0_1) isa node-link; 

match
$N_8755827848137_4195745c_1 isa operation, has hash "N_8755827848137_4195745c_1"; 

insert
$N_8755827848137_4195745c_1_1 isa constant, has hash "N_8755827848137_4195745c_1_1", has constant-value "0", has edge-label "src_memory";
(to-node: $N_8755827848137_4195745c_1_1, from-node: $N_8755827848137_4195745c_1) isa node-link; 

match 
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827840309_4195754c isa instruction, has hash "N_8755827840309_4195754c", has il-index 1, has asm-address "0x4005aa", has operation-type "MLIL_SET_VAR_SSA", has ins-text "var_10#1 = rax#1";
(contains-instruction: $N_8755827840309_4195754c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827840309_4195754c isa instruction, has hash "N_8755827840309_4195754c"; 

insert
$N_8755827840309_4195754c_0 isa variable-ssa, has hash "N_8755827840309_4195754c_0", has var "var_10", has version 1, has edge-label "dest", has var-type "int64_t", has var-size 8, has var-func "main";
(to-node: $N_8755827840309_4195754c_0, from-node: $N_8755827840309_4195754c) isa node-link; 

match
$N_8755827840309_4195754c isa instruction, has hash "N_8755827840309_4195754c"; 

insert
$N_8755827840309_4195754c_1 isa MLIL_VAR_SSA, has hash "N_8755827840309_4195754c_1", has edge-label "src";
(to-node: $N_8755827840309_4195754c_1, from-node: $N_8755827840309_4195754c) isa node-link; 

match
$N_8755827840309_4195754c_1 isa operation, has hash "N_8755827840309_4195754c_1"; 

insert
$N_8755827840309_4195754c_1_0 isa variable-ssa, has hash "N_8755827840309_4195754c_1_0", has var "rax", has version 1, has edge-label "src", has var-type "int64_t", has var-size 4, has var-func "main";
(to-node: $N_8755827840309_4195754c_1_0, from-node: $N_8755827840309_4195754c_1) isa node-link; 

match 
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755828966917_4195770c isa instruction, has hash "N_8755828966917_4195770c", has il-index 2, has asm-address "0x4005ba", has operation-type "MLIL_SET_VAR_ALIASED", has ins-text "var_118 @ mem#0 -> mem#1 = 0x7973706f6f6857";
(contains-instruction: $N_8755828966917_4195770c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755828966917_4195770c isa instruction, has hash "N_8755828966917_4195770c"; 

insert
$N_8755828966917_4195770c_0 isa variable-ssa, has hash "N_8755828966917_4195770c_0", has var "var_118", has version 1, has edge-label "prev", has var-type "int64_t", has var-size 8, has var-func "main";
(to-node: $N_8755828966917_4195770c_0, from-node: $N_8755828966917_4195770c) isa node-link; 

match
$N_8755828966917_4195770c isa instruction, has hash "N_8755828966917_4195770c"; 

insert
$N_8755828966917_4195770c_1 isa variable-ssa, has hash "N_8755828966917_4195770c_1", has var "var_118", has version 0, has edge-label "src", has var-type "int64_t", has var-size 8, has var-func "main";
(to-node: $N_8755828966917_4195770c_1, from-node: $N_8755828966917_4195770c) isa node-link; 

match
$N_8755828966917_4195770c isa instruction, has hash "N_8755828966917_4195770c"; 

insert
$N_8755828966917_4195770c_2 isa MLIL_CONST, has hash "N_8755828966917_4195770c_2", has edge-label "unimplemented";
(to-node: $N_8755828966917_4195770c_2, from-node: $N_8755828966917_4195770c) isa node-link; 

match
$N_8755828966917_4195770c_2 isa operation, has hash "N_8755828966917_4195770c_2"; 

insert
$N_8755828966917_4195770c_2_0 isa constant, has hash "N_8755828966917_4195770c_2_0", has constant-value "34185398925092951", has edge-label "constant";
(to-node: $N_8755828966917_4195770c_2_0, from-node: $N_8755828966917_4195770c_2) isa node-link; 

match 
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755828977789_4195777c isa instruction, has hash "N_8755828977789_4195777c", has il-index 3, has asm-address "0x4005c1", has operation-type "MLIL_SET_VAR_SSA", has ins-text "rdx#1 = &var_110";
(contains-instruction: $N_8755828977789_4195777c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755828977789_4195777c isa instruction, has hash "N_8755828977789_4195777c"; 

insert
$N_8755828977789_4195777c_0 isa variable-ssa, has hash "N_8755828977789_4195777c_0", has var "rdx", has version 1, has edge-label "dest", has var-type "void*", has var-size 4, has var-func "main";
(to-node: $N_8755828977789_4195777c_0, from-node: $N_8755828977789_4195777c) isa node-link; 

match
$N_8755828977789_4195777c isa instruction, has hash "N_8755828977789_4195777c"; 

insert
$N_8755828977789_4195777c_1 isa MLIL_ADDRESS_OF, has hash "N_8755828977789_4195777c_1", has edge-label "src";
(to-node: $N_8755828977789_4195777c_1, from-node: $N_8755828977789_4195777c) isa node-link; 

match
$N_8755828977789_4195777c_1 isa operation, has hash "N_8755828977789_4195777c_1"; 

insert
$N_8755828977789_4195777c_1_0 isa variable, has hash "N_8755828977789_4195777c_1_0", has var "var_110", has edge-label "src", has var-type "void", has var-size -17, has var-func "main";
(to-node: $N_8755828977789_4195777c_1_0, from-node: $N_8755828977789_4195777c_1) isa node-link; 

match 
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827821517_4195789c isa instruction, has hash "N_8755827821517_4195789c", has il-index 4, has asm-address "0x4005cd", has operation-type "MLIL_SET_VAR_SSA", has ins-text "rcx#1 = 0x1f";
(contains-instruction: $N_8755827821517_4195789c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827821517_4195789c isa instruction, has hash "N_8755827821517_4195789c"; 

insert
$N_8755827821517_4195789c_0 isa variable-ssa, has hash "N_8755827821517_4195789c_0", has var "rcx", has version 1, has edge-label "dest", has var-type "int64_t", has var-size 4, has var-func "main";
(to-node: $N_8755827821517_4195789c_0, from-node: $N_8755827821517_4195789c) isa node-link; 

match
$N_8755827821517_4195789c isa instruction, has hash "N_8755827821517_4195789c"; 

insert
$N_8755827821517_4195789c_1 isa MLIL_CONST, has hash "N_8755827821517_4195789c_1", has edge-label "src";
(to-node: $N_8755827821517_4195789c_1, from-node: $N_8755827821517_4195789c) isa node-link; 

match
$N_8755827821517_4195789c_1 isa operation, has hash "N_8755827821517_4195789c_1"; 

insert
$N_8755827821517_4195789c_1_0 isa constant, has hash "N_8755827821517_4195789c_1_0", has constant-value "31", has edge-label "constant";
(to-node: $N_8755827821517_4195789c_1_0, from-node: $N_8755827821517_4195789c_1) isa node-link; 

match 
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827838269_4195794c isa instruction, has hash "N_8755827838269_4195794c", has il-index 5, has asm-address "0x4005d2", has operation-type "MLIL_SET_VAR_SSA", has ins-text "rdi#1 = &var_110";
(contains-instruction: $N_8755827838269_4195794c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827838269_4195794c isa instruction, has hash "N_8755827838269_4195794c"; 

insert
$N_8755827838269_4195794c_0 isa variable-ssa, has hash "N_8755827838269_4195794c_0", has var "rdi", has version 1, has edge-label "dest", has var-type "void*", has var-size 4, has var-func "main";
(to-node: $N_8755827838269_4195794c_0, from-node: $N_8755827838269_4195794c) isa node-link; 

match
$N_8755827838269_4195794c isa instruction, has hash "N_8755827838269_4195794c"; 

insert
$N_8755827838269_4195794c_1 isa MLIL_ADDRESS_OF, has hash "N_8755827838269_4195794c_1", has edge-label "src";
(to-node: $N_8755827838269_4195794c_1, from-node: $N_8755827838269_4195794c) isa node-link; 

match
$N_8755827838269_4195794c_1 isa operation, has hash "N_8755827838269_4195794c_1"; 

insert
$N_8755827838269_4195794c_1_0 isa variable, has hash "N_8755827838269_4195794c_1_0", has var "var_110", has edge-label "src", has var-type "void", has var-size -17, has var-func "main";
(to-node: $N_8755827838269_4195794c_1_0, from-node: $N_8755827838269_4195794c_1) isa node-link; 

match 
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827740853_4195797c isa instruction, has hash "N_8755827740853_4195797c", has il-index 8, has asm-address "0x4005d5", has operation-type "MLIL_VAR_PHI", has ins-text "rdi#2 = ϕ(rdi#1, rdi#6)";
(contains-instruction: $N_8755827740853_4195797c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827740853_4195797c isa instruction, has hash "N_8755827740853_4195797c"; 

insert
$N_8755827740853_4195797c_0 isa variable-ssa, has hash "N_8755827740853_4195797c_0", has var "rdi", has version 2, has edge-label "dest", has var-type "void*", has var-size 4, has var-func "main";
(to-node: $N_8755827740853_4195797c_0, from-node: $N_8755827740853_4195797c) isa node-link; 

match
$N_8755827740853_4195797c isa instruction, has hash "N_8755827740853_4195797c"; 

insert
$L_8755827740853_4195797c_1 isa list, has hash "L_8755827740853_4195797c_1", has list-size 2, has edge-label "src";
(to-node: $L_8755827740853_4195797c_1, from-node: $N_8755827740853_4195797c) isa node-link; 

match
$L_8755827740853_4195797c_1 isa list, has hash "L_8755827740853_4195797c_1"; 

insert
$N_8755827740853_4195797c_1_0 isa variable-ssa, has hash "N_8755827740853_4195797c_1_0", has var "rdi", has version 1, has edge-label "0", has var-type "void*", has var-size 4, has var-func "main";
(to-node: $N_8755827740853_4195797c_1_0, from-node: $L_8755827740853_4195797c_1) isa node-link; 

match
$L_8755827740853_4195797c_1 isa list, has hash "L_8755827740853_4195797c_1"; 

insert
$N_8755827740853_4195797c_1_1 isa variable-ssa, has hash "N_8755827740853_4195797c_1_1", has var "rdi", has version 6, has edge-label "1", has var-type "void*", has var-size 4, has var-func "main";
(to-node: $N_8755827740853_4195797c_1_1, from-node: $L_8755827740853_4195797c_1) isa node-link; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827746053_4195797c isa instruction, has hash "N_8755827746053_4195797c", has il-index 9, has asm-address "0x4005d5", has operation-type "MLIL_MEM_PHI", has ins-text "mem#2 = ϕ(mem#1, mem#8)";
(contains-instruction: $N_8755827746053_4195797c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827746053_4195797c isa instruction, has hash "N_8755827746053_4195797c"; 

insert
$N_8755827746053_4195797c_0 isa constant, has hash "N_8755827746053_4195797c_0", has constant-value "2", has edge-label "dest_memory";
(to-node: $N_8755827746053_4195797c_0, from-node: $N_8755827746053_4195797c) isa node-link; 

match
$N_8755827746053_4195797c isa instruction, has hash "N_8755827746053_4195797c"; 

insert
$L_8755827746053_4195797c_1 isa list, has hash "L_8755827746053_4195797c_1", has list-size 2, has edge-label "src_memory";
(to-node: $L_8755827746053_4195797c_1, from-node: $N_8755827746053_4195797c) isa node-link; 

match
$L_8755827746053_4195797c_1 isa list, has hash "L_8755827746053_4195797c_1"; 

insert
$N_8755827746053_4195797c_1_0 isa constant, has hash "N_8755827746053_4195797c_1_0", has constant-value "1", has edge-label "0";
(to-node: $N_8755827746053_4195797c_1_0, from-node: $L_8755827746053_4195797c_1) isa node-link; 

match
$L_8755827746053_4195797c_1 isa list, has hash "L_8755827746053_4195797c_1"; 

insert
$N_8755827746053_4195797c_1_1 isa constant, has hash "N_8755827746053_4195797c_1_1", has constant-value "8", has edge-label "1";
(to-node: $N_8755827746053_4195797c_1_1, from-node: $L_8755827746053_4195797c_1) isa node-link; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827755781_4195797c isa instruction, has hash "N_8755827755781_4195797c", has il-index 28, has asm-address "0x4005d5", has operation-type "MLIL_VAR_PHI", has ins-text "rdi#6 = ϕ(rdi#4, rdi#5)";
(contains-instruction: $N_8755827755781_4195797c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827755781_4195797c isa instruction, has hash "N_8755827755781_4195797c"; 

insert
$N_8755827755781_4195797c_0 isa variable-ssa, has hash "N_8755827755781_4195797c_0", has var "rdi", has version 6, has edge-label "dest", has var-type "void*", has var-size 4, has var-func "main";
(to-node: $N_8755827755781_4195797c_0, from-node: $N_8755827755781_4195797c) isa node-link; 

match
$N_8755827755781_4195797c isa instruction, has hash "N_8755827755781_4195797c"; 

insert
$L_8755827755781_4195797c_1 isa list, has hash "L_8755827755781_4195797c_1", has list-size 2, has edge-label "src";
(to-node: $L_8755827755781_4195797c_1, from-node: $N_8755827755781_4195797c) isa node-link; 

match
$L_8755827755781_4195797c_1 isa list, has hash "L_8755827755781_4195797c_1"; 

insert
$N_8755827755781_4195797c_1_0 isa variable-ssa, has hash "N_8755827755781_4195797c_1_0", has var "rdi", has version 4, has edge-label "0", has var-type "void*", has var-size 4, has var-func "main";
(to-node: $N_8755827755781_4195797c_1_0, from-node: $L_8755827755781_4195797c_1) isa node-link; 

match
$L_8755827755781_4195797c_1 isa list, has hash "L_8755827755781_4195797c_1"; 

insert
$N_8755827755781_4195797c_1_1 isa variable-ssa, has hash "N_8755827755781_4195797c_1_1", has var "rdi", has version 5, has edge-label "1", has var-type "void*", has var-size 4, has var-func "main";
(to-node: $N_8755827755781_4195797c_1_1, from-node: $L_8755827755781_4195797c_1) isa node-link; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827757573_4195797c isa instruction, has hash "N_8755827757573_4195797c", has il-index 24, has asm-address "0x4005d5", has operation-type "MLIL_GOTO", has ins-text "goto 28";
(contains-instruction: $N_8755827757573_4195797c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827757573_4195797c isa instruction, has hash "N_8755827757573_4195797c"; 

insert
$N_8755827757573_4195797c_0 isa constant, has hash "N_8755827757573_4195797c_0", has constant-value "28", has edge-label "dest";
(to-node: $N_8755827757573_4195797c_0, from-node: $N_8755827757573_4195797c) isa node-link; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827763149_4195797c isa instruction, has hash "N_8755827763149_4195797c", has il-index 25, has asm-address "0x4005d5", has operation-type "MLIL_STORE_SSA", has ins-text "[rdi#2].q = 0 @ mem#2 -> mem#7";
(contains-instruction: $N_8755827763149_4195797c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827763149_4195797c isa instruction, has hash "N_8755827763149_4195797c"; 

insert
$N_8755827763149_4195797c_0 isa MLIL_VAR_SSA, has hash "N_8755827763149_4195797c_0", has edge-label "dest";
(to-node: $N_8755827763149_4195797c_0, from-node: $N_8755827763149_4195797c) isa node-link; 

match
$N_8755827763149_4195797c_0 isa operation, has hash "N_8755827763149_4195797c_0"; 

insert
$N_8755827763149_4195797c_0_0 isa variable-ssa, has hash "N_8755827763149_4195797c_0_0", has var "rdi", has version 2, has edge-label "src", has var-type "void*", has var-size 4, has var-func "main";
(to-node: $N_8755827763149_4195797c_0_0, from-node: $N_8755827763149_4195797c_0) isa node-link; 

match
$N_8755827763149_4195797c isa instruction, has hash "N_8755827763149_4195797c"; 

insert
$N_8755827763149_4195797c_1 isa constant, has hash "N_8755827763149_4195797c_1", has constant-value "7", has edge-label "dest_memory";
(to-node: $N_8755827763149_4195797c_1, from-node: $N_8755827763149_4195797c) isa node-link; 

match
$N_8755827763149_4195797c isa instruction, has hash "N_8755827763149_4195797c"; 

insert
$N_8755827763149_4195797c_2 isa constant, has hash "N_8755827763149_4195797c_2", has constant-value "2", has edge-label "src_memory";
(to-node: $N_8755827763149_4195797c_2, from-node: $N_8755827763149_4195797c) isa node-link; 

match
$N_8755827763149_4195797c isa instruction, has hash "N_8755827763149_4195797c"; 

insert
$N_8755827763149_4195797c_3 isa MLIL_CONST, has hash "N_8755827763149_4195797c_3", has edge-label "src";
(to-node: $N_8755827763149_4195797c_3, from-node: $N_8755827763149_4195797c) isa node-link; 

match
$N_8755827763149_4195797c_3 isa operation, has hash "N_8755827763149_4195797c_3"; 

insert
$N_8755827763149_4195797c_3_0 isa constant, has hash "N_8755827763149_4195797c_3_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8755827763149_4195797c_3_0, from-node: $N_8755827763149_4195797c_3) isa node-link; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827763153_4195797c isa instruction, has hash "N_8755827763153_4195797c", has il-index 23, has asm-address "0x4005d5", has operation-type "MLIL_SET_VAR_SSA", has ins-text "rdi#4 = rdi#2 - 8";
(contains-instruction: $N_8755827763153_4195797c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827763153_4195797c isa instruction, has hash "N_8755827763153_4195797c"; 

insert
$N_8755827763153_4195797c_0 isa variable-ssa, has hash "N_8755827763153_4195797c_0", has var "rdi", has version 4, has edge-label "dest", has var-type "void*", has var-size 4, has var-func "main";
(to-node: $N_8755827763153_4195797c_0, from-node: $N_8755827763153_4195797c) isa node-link; 

match
$N_8755827763153_4195797c isa instruction, has hash "N_8755827763153_4195797c"; 

insert
$N_8755827763153_4195797c_1 isa MLIL_SUB, has hash "N_8755827763153_4195797c_1", has edge-label "src";
(to-node: $N_8755827763153_4195797c_1, from-node: $N_8755827763153_4195797c) isa node-link; 

match
$N_8755827763153_4195797c_1 isa operation, has hash "N_8755827763153_4195797c_1"; 

insert
$N_8755827763153_4195797c_1_0 isa MLIL_VAR_SSA, has hash "N_8755827763153_4195797c_1_0", has edge-label "left";
(to-node: $N_8755827763153_4195797c_1_0, from-node: $N_8755827763153_4195797c_1) isa node-link; 

match
$N_8755827763153_4195797c_1_0 isa operation, has hash "N_8755827763153_4195797c_1_0"; 

insert
$N_8755827763153_4195797c_1_0_0 isa variable-ssa, has hash "N_8755827763153_4195797c_1_0_0", has var "rdi", has version 2, has edge-label "src", has var-type "void*", has var-size 4, has var-func "main";
(to-node: $N_8755827763153_4195797c_1_0_0, from-node: $N_8755827763153_4195797c_1_0) isa node-link; 

match
$N_8755827763153_4195797c_1 isa operation, has hash "N_8755827763153_4195797c_1"; 

insert
$N_8755827763153_4195797c_1_1 isa MLIL_CONST, has hash "N_8755827763153_4195797c_1_1", has edge-label "right";
(to-node: $N_8755827763153_4195797c_1_1, from-node: $N_8755827763153_4195797c_1) isa node-link; 

match
$N_8755827763153_4195797c_1_1 isa operation, has hash "N_8755827763153_4195797c_1_1"; 

insert
$N_8755827763153_4195797c_1_1_0 isa constant, has hash "N_8755827763153_4195797c_1_1_0", has constant-value "8", has edge-label "constant";
(to-node: $N_8755827763153_4195797c_1_1_0, from-node: $N_8755827763153_4195797c_1_1) isa node-link; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827763157_4195797c isa instruction, has hash "N_8755827763157_4195797c", has il-index 22, has asm-address "0x4005d5", has operation-type "MLIL_STORE_SSA", has ins-text "[rdi#2].q = 0 @ mem#2 -> mem#6";
(contains-instruction: $N_8755827763157_4195797c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827763157_4195797c isa instruction, has hash "N_8755827763157_4195797c"; 

insert
$N_8755827763157_4195797c_0 isa MLIL_VAR_SSA, has hash "N_8755827763157_4195797c_0", has edge-label "dest";
(to-node: $N_8755827763157_4195797c_0, from-node: $N_8755827763157_4195797c) isa node-link; 

match
$N_8755827763157_4195797c_0 isa operation, has hash "N_8755827763157_4195797c_0"; 

insert
$N_8755827763157_4195797c_0_0 isa variable-ssa, has hash "N_8755827763157_4195797c_0_0", has var "rdi", has version 2, has edge-label "src", has var-type "void*", has var-size 4, has var-func "main";
(to-node: $N_8755827763157_4195797c_0_0, from-node: $N_8755827763157_4195797c_0) isa node-link; 

match
$N_8755827763157_4195797c isa instruction, has hash "N_8755827763157_4195797c"; 

insert
$N_8755827763157_4195797c_1 isa constant, has hash "N_8755827763157_4195797c_1", has constant-value "6", has edge-label "dest_memory";
(to-node: $N_8755827763157_4195797c_1, from-node: $N_8755827763157_4195797c) isa node-link; 

match
$N_8755827763157_4195797c isa instruction, has hash "N_8755827763157_4195797c"; 

insert
$N_8755827763157_4195797c_2 isa constant, has hash "N_8755827763157_4195797c_2", has constant-value "2", has edge-label "src_memory";
(to-node: $N_8755827763157_4195797c_2, from-node: $N_8755827763157_4195797c) isa node-link; 

match
$N_8755827763157_4195797c isa instruction, has hash "N_8755827763157_4195797c"; 

insert
$N_8755827763157_4195797c_3 isa MLIL_CONST, has hash "N_8755827763157_4195797c_3", has edge-label "src";
(to-node: $N_8755827763157_4195797c_3, from-node: $N_8755827763157_4195797c) isa node-link; 

match
$N_8755827763157_4195797c_3 isa operation, has hash "N_8755827763157_4195797c_3"; 

insert
$N_8755827763157_4195797c_3_0 isa constant, has hash "N_8755827763157_4195797c_3_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8755827763157_4195797c_3_0, from-node: $N_8755827763157_4195797c_3) isa node-link; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827783497_4195797c isa instruction, has hash "N_8755827783497_4195797c", has il-index 30, has asm-address "0x4005d5", has operation-type "MLIL_SET_VAR_SSA", has ins-text "rcx#3 = rcx#2 - 1";
(contains-instruction: $N_8755827783497_4195797c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827783497_4195797c isa instruction, has hash "N_8755827783497_4195797c"; 

insert
$N_8755827783497_4195797c_0 isa variable-ssa, has hash "N_8755827783497_4195797c_0", has var "rcx", has version 3, has edge-label "dest", has var-type "int64_t", has var-size 4, has var-func "main";
(to-node: $N_8755827783497_4195797c_0, from-node: $N_8755827783497_4195797c) isa node-link; 

match
$N_8755827783497_4195797c isa instruction, has hash "N_8755827783497_4195797c"; 

insert
$N_8755827783497_4195797c_1 isa MLIL_SUB, has hash "N_8755827783497_4195797c_1", has edge-label "src";
(to-node: $N_8755827783497_4195797c_1, from-node: $N_8755827783497_4195797c) isa node-link; 

match
$N_8755827783497_4195797c_1 isa operation, has hash "N_8755827783497_4195797c_1"; 

insert
$N_8755827783497_4195797c_1_0 isa MLIL_VAR_SSA, has hash "N_8755827783497_4195797c_1_0", has edge-label "left";
(to-node: $N_8755827783497_4195797c_1_0, from-node: $N_8755827783497_4195797c_1) isa node-link; 

match
$N_8755827783497_4195797c_1_0 isa operation, has hash "N_8755827783497_4195797c_1_0"; 

insert
$N_8755827783497_4195797c_1_0_0 isa variable-ssa, has hash "N_8755827783497_4195797c_1_0_0", has var "rcx", has version 2, has edge-label "src", has var-type "int64_t", has var-size 4, has var-func "main";
(to-node: $N_8755827783497_4195797c_1_0_0, from-node: $N_8755827783497_4195797c_1_0) isa node-link; 

match
$N_8755827783497_4195797c_1 isa operation, has hash "N_8755827783497_4195797c_1"; 

insert
$N_8755827783497_4195797c_1_1 isa MLIL_CONST, has hash "N_8755827783497_4195797c_1_1", has edge-label "right";
(to-node: $N_8755827783497_4195797c_1_1, from-node: $N_8755827783497_4195797c_1) isa node-link; 

match
$N_8755827783497_4195797c_1_1 isa operation, has hash "N_8755827783497_4195797c_1_1"; 

insert
$N_8755827783497_4195797c_1_1_0 isa constant, has hash "N_8755827783497_4195797c_1_1_0", has constant-value "1", has edge-label "constant";
(to-node: $N_8755827783497_4195797c_1_1_0, from-node: $N_8755827783497_4195797c_1_1) isa node-link; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827787013_4195797c isa instruction, has hash "N_8755827787013_4195797c", has il-index 31, has asm-address "0x4005d5", has operation-type "MLIL_GOTO", has ins-text "goto 7";
(contains-instruction: $N_8755827787013_4195797c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827787013_4195797c isa instruction, has hash "N_8755827787013_4195797c"; 

insert
$N_8755827787013_4195797c_0 isa constant, has hash "N_8755827787013_4195797c_0", has constant-value "7", has edge-label "dest";
(to-node: $N_8755827787013_4195797c_0, from-node: $N_8755827787013_4195797c) isa node-link; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827837189_4195797c isa instruction, has hash "N_8755827837189_4195797c", has il-index 6, has asm-address "0x4005d5", has operation-type "MLIL_GOTO", has ins-text "goto 7";
(contains-instruction: $N_8755827837189_4195797c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827837189_4195797c isa instruction, has hash "N_8755827837189_4195797c"; 

insert
$N_8755827837189_4195797c_0 isa constant, has hash "N_8755827837189_4195797c_0", has constant-value "7", has edge-label "dest";
(to-node: $N_8755827837189_4195797c_0, from-node: $N_8755827837189_4195797c) isa node-link; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827848137_4195797c isa instruction, has hash "N_8755827848137_4195797c", has il-index 7, has asm-address "0x4005d5", has operation-type "MLIL_VAR_PHI", has ins-text "rcx#2 = ϕ(rcx#1, rcx#3)";
(contains-instruction: $N_8755827848137_4195797c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827848137_4195797c isa instruction, has hash "N_8755827848137_4195797c"; 

insert
$N_8755827848137_4195797c_0 isa variable-ssa, has hash "N_8755827848137_4195797c_0", has var "rcx", has version 2, has edge-label "dest", has var-type "int64_t", has var-size 4, has var-func "main";
(to-node: $N_8755827848137_4195797c_0, from-node: $N_8755827848137_4195797c) isa node-link; 

match
$N_8755827848137_4195797c isa instruction, has hash "N_8755827848137_4195797c"; 

insert
$L_8755827848137_4195797c_1 isa list, has hash "L_8755827848137_4195797c_1", has list-size 2, has edge-label "src";
(to-node: $L_8755827848137_4195797c_1, from-node: $N_8755827848137_4195797c) isa node-link; 

match
$L_8755827848137_4195797c_1 isa list, has hash "L_8755827848137_4195797c_1"; 

insert
$N_8755827848137_4195797c_1_0 isa variable-ssa, has hash "N_8755827848137_4195797c_1_0", has var "rcx", has version 1, has edge-label "0", has var-type "int64_t", has var-size 4, has var-func "main";
(to-node: $N_8755827848137_4195797c_1_0, from-node: $L_8755827848137_4195797c_1) isa node-link; 

match
$L_8755827848137_4195797c_1 isa list, has hash "L_8755827848137_4195797c_1"; 

insert
$N_8755827848137_4195797c_1_1 isa variable-ssa, has hash "N_8755827848137_4195797c_1_1", has var "rcx", has version 3, has edge-label "1", has var-type "int64_t", has var-size 4, has var-func "main";
(to-node: $N_8755827848137_4195797c_1_1, from-node: $L_8755827848137_4195797c_1) isa node-link; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827864073_4195797c isa instruction, has hash "N_8755827864073_4195797c", has il-index 18, has asm-address "0x4005d5", has operation-type "MLIL_IF", has ins-text "if (0) then 22 else 25";
(contains-instruction: $N_8755827864073_4195797c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827864073_4195797c isa instruction, has hash "N_8755827864073_4195797c"; 

insert
$N_8755827864073_4195797c_0 isa MLIL_CONST, has hash "N_8755827864073_4195797c_0", has edge-label "condition";
(to-node: $N_8755827864073_4195797c_0, from-node: $N_8755827864073_4195797c) isa node-link; 

match
$N_8755827864073_4195797c_0 isa operation, has hash "N_8755827864073_4195797c_0"; 

insert
$N_8755827864073_4195797c_0_0 isa constant, has hash "N_8755827864073_4195797c_0_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8755827864073_4195797c_0_0, from-node: $N_8755827864073_4195797c_0) isa node-link; 

match
$N_8755827864073_4195797c isa instruction, has hash "N_8755827864073_4195797c"; 

insert
$N_8755827864073_4195797c_1 isa constant, has hash "N_8755827864073_4195797c_1", has constant-value "22", has edge-label "true";
(to-node: $N_8755827864073_4195797c_1, from-node: $N_8755827864073_4195797c) isa node-link; 

match
$N_8755827864073_4195797c isa instruction, has hash "N_8755827864073_4195797c"; 

insert
$N_8755827864073_4195797c_2 isa constant, has hash "N_8755827864073_4195797c_2", has constant-value "25", has edge-label "false";
(to-node: $N_8755827864073_4195797c_2, from-node: $N_8755827864073_4195797c) isa node-link; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827869577_4195797c isa instruction, has hash "N_8755827869577_4195797c", has il-index 10, has asm-address "0x4005d5", has operation-type "MLIL_IF", has ins-text "if (rcx#2 == 0) then 11 @ 0x4005e9 else 18";
(contains-instruction: $N_8755827869577_4195797c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827869577_4195797c isa instruction, has hash "N_8755827869577_4195797c"; 

insert
$N_8755827869577_4195797c_0 isa MLIL_CMP_E, has hash "N_8755827869577_4195797c_0", has edge-label "condition";
(to-node: $N_8755827869577_4195797c_0, from-node: $N_8755827869577_4195797c) isa node-link; 

match
$N_8755827869577_4195797c_0 isa operation, has hash "N_8755827869577_4195797c_0"; 

insert
$N_8755827869577_4195797c_0_0 isa MLIL_VAR_SSA, has hash "N_8755827869577_4195797c_0_0", has edge-label "left";
(to-node: $N_8755827869577_4195797c_0_0, from-node: $N_8755827869577_4195797c_0) isa node-link; 

match
$N_8755827869577_4195797c_0_0 isa operation, has hash "N_8755827869577_4195797c_0_0"; 

insert
$N_8755827869577_4195797c_0_0_0 isa variable-ssa, has hash "N_8755827869577_4195797c_0_0_0", has var "rcx", has version 2, has edge-label "src", has var-type "int64_t", has var-size 4, has var-func "main";
(to-node: $N_8755827869577_4195797c_0_0_0, from-node: $N_8755827869577_4195797c_0_0) isa node-link; 

match
$N_8755827869577_4195797c_0 isa operation, has hash "N_8755827869577_4195797c_0"; 

insert
$N_8755827869577_4195797c_0_1 isa MLIL_CONST, has hash "N_8755827869577_4195797c_0_1", has edge-label "right";
(to-node: $N_8755827869577_4195797c_0_1, from-node: $N_8755827869577_4195797c_0) isa node-link; 

match
$N_8755827869577_4195797c_0_1 isa operation, has hash "N_8755827869577_4195797c_0_1"; 

insert
$N_8755827869577_4195797c_0_1_0 isa constant, has hash "N_8755827869577_4195797c_0_1_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8755827869577_4195797c_0_1_0, from-node: $N_8755827869577_4195797c_0_1) isa node-link; 

match
$N_8755827869577_4195797c isa instruction, has hash "N_8755827869577_4195797c"; 

insert
$N_8755827869577_4195797c_1 isa constant, has hash "N_8755827869577_4195797c_1", has constant-value "11", has edge-label "true";
(to-node: $N_8755827869577_4195797c_1, from-node: $N_8755827869577_4195797c) isa node-link; 

match
$N_8755827869577_4195797c isa instruction, has hash "N_8755827869577_4195797c"; 

insert
$N_8755827869577_4195797c_2 isa constant, has hash "N_8755827869577_4195797c_2", has constant-value "18", has edge-label "false";
(to-node: $N_8755827869577_4195797c_2, from-node: $N_8755827869577_4195797c) isa node-link; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827884805_4195797c isa instruction, has hash "N_8755827884805_4195797c", has il-index 27, has asm-address "0x4005d5", has operation-type "MLIL_GOTO", has ins-text "goto 28";
(contains-instruction: $N_8755827884805_4195797c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827884805_4195797c isa instruction, has hash "N_8755827884805_4195797c"; 

insert
$N_8755827884805_4195797c_0 isa constant, has hash "N_8755827884805_4195797c_0", has constant-value "28", has edge-label "dest";
(to-node: $N_8755827884805_4195797c_0, from-node: $N_8755827884805_4195797c) isa node-link; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827891461_4195797c isa instruction, has hash "N_8755827891461_4195797c", has il-index 26, has asm-address "0x4005d5", has operation-type "MLIL_SET_VAR_SSA", has ins-text "rdi#5 = rdi#2 + 8";
(contains-instruction: $N_8755827891461_4195797c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827891461_4195797c isa instruction, has hash "N_8755827891461_4195797c"; 

insert
$N_8755827891461_4195797c_0 isa variable-ssa, has hash "N_8755827891461_4195797c_0", has var "rdi", has version 5, has edge-label "dest", has var-type "void*", has var-size 4, has var-func "main";
(to-node: $N_8755827891461_4195797c_0, from-node: $N_8755827891461_4195797c) isa node-link; 

match
$N_8755827891461_4195797c isa instruction, has hash "N_8755827891461_4195797c"; 

insert
$N_8755827891461_4195797c_1 isa MLIL_ADD, has hash "N_8755827891461_4195797c_1", has edge-label "src";
(to-node: $N_8755827891461_4195797c_1, from-node: $N_8755827891461_4195797c) isa node-link; 

match
$N_8755827891461_4195797c_1 isa operation, has hash "N_8755827891461_4195797c_1"; 

insert
$N_8755827891461_4195797c_1_0 isa MLIL_VAR_SSA, has hash "N_8755827891461_4195797c_1_0", has edge-label "left";
(to-node: $N_8755827891461_4195797c_1_0, from-node: $N_8755827891461_4195797c_1) isa node-link; 

match
$N_8755827891461_4195797c_1_0 isa operation, has hash "N_8755827891461_4195797c_1_0"; 

insert
$N_8755827891461_4195797c_1_0_0 isa variable-ssa, has hash "N_8755827891461_4195797c_1_0_0", has var "rdi", has version 2, has edge-label "src", has var-type "void*", has var-size 4, has var-func "main";
(to-node: $N_8755827891461_4195797c_1_0_0, from-node: $N_8755827891461_4195797c_1_0) isa node-link; 

match
$N_8755827891461_4195797c_1 isa operation, has hash "N_8755827891461_4195797c_1"; 

insert
$N_8755827891461_4195797c_1_1 isa MLIL_CONST, has hash "N_8755827891461_4195797c_1_1", has edge-label "right";
(to-node: $N_8755827891461_4195797c_1_1, from-node: $N_8755827891461_4195797c_1) isa node-link; 

match
$N_8755827891461_4195797c_1_1 isa operation, has hash "N_8755827891461_4195797c_1_1"; 

insert
$N_8755827891461_4195797c_1_1_0 isa constant, has hash "N_8755827891461_4195797c_1_1_0", has constant-value "8", has edge-label "constant";
(to-node: $N_8755827891461_4195797c_1_1_0, from-node: $N_8755827891461_4195797c_1_1) isa node-link; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827895301_4195797c isa instruction, has hash "N_8755827895301_4195797c", has il-index 29, has asm-address "0x4005d5", has operation-type "MLIL_MEM_PHI", has ins-text "mem#8 = ϕ(mem#6, mem#7)";
(contains-instruction: $N_8755827895301_4195797c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827895301_4195797c isa instruction, has hash "N_8755827895301_4195797c"; 

insert
$N_8755827895301_4195797c_0 isa constant, has hash "N_8755827895301_4195797c_0", has constant-value "8", has edge-label "dest_memory";
(to-node: $N_8755827895301_4195797c_0, from-node: $N_8755827895301_4195797c) isa node-link; 

match
$N_8755827895301_4195797c isa instruction, has hash "N_8755827895301_4195797c"; 

insert
$L_8755827895301_4195797c_1 isa list, has hash "L_8755827895301_4195797c_1", has list-size 2, has edge-label "src_memory";
(to-node: $L_8755827895301_4195797c_1, from-node: $N_8755827895301_4195797c) isa node-link; 

match
$L_8755827895301_4195797c_1 isa list, has hash "L_8755827895301_4195797c_1"; 

insert
$N_8755827895301_4195797c_1_0 isa constant, has hash "N_8755827895301_4195797c_1_0", has constant-value "6", has edge-label "0";
(to-node: $N_8755827895301_4195797c_1_0, from-node: $L_8755827895301_4195797c_1) isa node-link; 

match
$L_8755827895301_4195797c_1 isa list, has hash "L_8755827895301_4195797c_1"; 

insert
$N_8755827895301_4195797c_1_1 isa constant, has hash "N_8755827895301_4195797c_1_1", has constant-value "7", has edge-label "1";
(to-node: $N_8755827895301_4195797c_1_1, from-node: $L_8755827895301_4195797c_1) isa node-link; 

match 
$func_main isa function, has name "main"; 

insert 
$bb isa basic-block, has bb-start 7, has bb-end 10; 
(contains-basic-block: $bb, in-function: $func_main) isa has-basic-block; 

match 
$func_main isa function, has name "main"; 

insert 
$bb isa basic-block, has bb-start 11, has bb-end 17; 
(contains-basic-block: $bb, in-function: $func_main) isa has-basic-block; 

match 
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 11, has bb-end 17; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 11, has bb-end 17; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755823504153_4195817c isa instruction, has hash "N_8755823504153_4195817c", has il-index 11, has asm-address "0x4005e9", has operation-type "MLIL_SET_VAR_SSA", has ins-text "rdi_1#3 = &var_118";
(contains-instruction: $N_8755823504153_4195817c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755823504153_4195817c isa instruction, has hash "N_8755823504153_4195817c"; 

insert
$N_8755823504153_4195817c_0 isa variable-ssa, has hash "N_8755823504153_4195817c_0", has var "rdi_1", has version 3, has edge-label "dest", has var-type "int64_t*", has var-size 4, has var-func "main";
(to-node: $N_8755823504153_4195817c_0, from-node: $N_8755823504153_4195817c) isa node-link; 

match
$N_8755823504153_4195817c isa instruction, has hash "N_8755823504153_4195817c"; 

insert
$N_8755823504153_4195817c_1 isa MLIL_ADDRESS_OF, has hash "N_8755823504153_4195817c_1", has edge-label "src";
(to-node: $N_8755823504153_4195817c_1, from-node: $N_8755823504153_4195817c) isa node-link; 

match
$N_8755823504153_4195817c_1 isa operation, has hash "N_8755823504153_4195817c_1"; 

insert
$N_8755823504153_4195817c_1_0 isa variable, has hash "N_8755823504153_4195817c_1_0", has var "var_118", has edge-label "src", has var-type "int64_t", has var-size 8, has var-func "main";
(to-node: $N_8755823504153_4195817c_1_0, from-node: $N_8755823504153_4195817c_1) isa node-link; 

match 
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 11, has bb-end 17; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 11, has bb-end 17; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827792961_4195825c isa instruction, has hash "N_8755827792961_4195825c", has il-index 12, has asm-address "0x4005f1", has operation-type "MLIL_CALL_SSA", has ins-text "mem#3 = 0x400470(rdi_1#3, argv#0, rdx#1, rcx#2) @ mem#2";
(contains-instruction: $N_8755827792961_4195825c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827792961_4195825c isa instruction, has hash "N_8755827792961_4195825c"; 

insert
$N_8755827792961_4195825c_0 isa MLIL_CALL_OUTPUT_SSA, has hash "N_8755827792961_4195825c_0", has edge-label "output";
(to-node: $N_8755827792961_4195825c_0, from-node: $N_8755827792961_4195825c) isa node-link; 

match
$N_8755827792961_4195825c_0 isa operation, has hash "N_8755827792961_4195825c_0"; 

insert
$N_8755827792961_4195825c_0_0 isa constant, has hash "N_8755827792961_4195825c_0_0", has constant-value "3", has edge-label "dest_memory";
(to-node: $N_8755827792961_4195825c_0_0, from-node: $N_8755827792961_4195825c_0) isa node-link; 

match
$N_8755827792961_4195825c_0 isa operation, has hash "N_8755827792961_4195825c_0"; 

insert
$L_8755827792961_4195825c_0_1 isa list, has hash "L_8755827792961_4195825c_0_1", has list-size 0, has edge-label "dest";
(to-node: $L_8755827792961_4195825c_0_1, from-node: $N_8755827792961_4195825c_0) isa node-link; 

match
$N_8755827792961_4195825c isa instruction, has hash "N_8755827792961_4195825c"; 

insert
$N_8755827792961_4195825c_1 isa MLIL_CONST_PTR, has hash "N_8755827792961_4195825c_1", has edge-label "dest";
(to-node: $N_8755827792961_4195825c_1, from-node: $N_8755827792961_4195825c) isa node-link; 

match
$N_8755827792961_4195825c_1 isa operation, has hash "N_8755827792961_4195825c_1"; 

insert
$N_8755827792961_4195825c_1_0 isa constant, has hash "N_8755827792961_4195825c_1_0", has constant-value "4195440", has edge-label "constant";
(to-node: $N_8755827792961_4195825c_1_0, from-node: $N_8755827792961_4195825c_1) isa node-link; 

match
$N_8755827792961_4195825c isa instruction, has hash "N_8755827792961_4195825c"; 

insert
$L_8755827792961_4195825c_2 isa list, has hash "L_8755827792961_4195825c_2", has list-size 4, has edge-label "params";
(to-node: $L_8755827792961_4195825c_2, from-node: $N_8755827792961_4195825c) isa node-link; 

match
$L_8755827792961_4195825c_2 isa list, has hash "L_8755827792961_4195825c_2"; 

insert
$N_8755827792961_4195825c_2_0 isa MLIL_VAR_SSA, has hash "N_8755827792961_4195825c_2_0", has edge-label "0";
(to-node: $N_8755827792961_4195825c_2_0, from-node: $L_8755827792961_4195825c_2) isa node-link; 

match
$N_8755827792961_4195825c_2_0 isa operation, has hash "N_8755827792961_4195825c_2_0"; 

insert
$N_8755827792961_4195825c_2_0_0 isa variable-ssa, has hash "N_8755827792961_4195825c_2_0_0", has var "rdi_1", has version 3, has edge-label "src", has var-type "int64_t*", has var-size 4, has var-func "main";
(to-node: $N_8755827792961_4195825c_2_0_0, from-node: $N_8755827792961_4195825c_2_0) isa node-link; 

match
$L_8755827792961_4195825c_2 isa list, has hash "L_8755827792961_4195825c_2"; 

insert
$N_8755827792961_4195825c_2_1 isa MLIL_VAR_SSA, has hash "N_8755827792961_4195825c_2_1", has edge-label "1";
(to-node: $N_8755827792961_4195825c_2_1, from-node: $L_8755827792961_4195825c_2) isa node-link; 

match
$N_8755827792961_4195825c_2_1 isa operation, has hash "N_8755827792961_4195825c_2_1"; 

insert
$N_8755827792961_4195825c_2_1_0 isa variable-ssa, has hash "N_8755827792961_4195825c_2_1_0", has var "argv", has version 0, has edge-label "src", has var-type "char**", has var-size 4, has var-func "main";
(to-node: $N_8755827792961_4195825c_2_1_0, from-node: $N_8755827792961_4195825c_2_1) isa node-link; 

match
$L_8755827792961_4195825c_2 isa list, has hash "L_8755827792961_4195825c_2"; 

insert
$N_8755827792961_4195825c_2_2 isa MLIL_VAR_SSA, has hash "N_8755827792961_4195825c_2_2", has edge-label "2";
(to-node: $N_8755827792961_4195825c_2_2, from-node: $L_8755827792961_4195825c_2) isa node-link; 

match
$N_8755827792961_4195825c_2_2 isa operation, has hash "N_8755827792961_4195825c_2_2"; 

insert
$N_8755827792961_4195825c_2_2_0 isa variable-ssa, has hash "N_8755827792961_4195825c_2_2_0", has var "rdx", has version 1, has edge-label "src", has var-type "void*", has var-size 4, has var-func "main";
(to-node: $N_8755827792961_4195825c_2_2_0, from-node: $N_8755827792961_4195825c_2_2) isa node-link; 

match
$L_8755827792961_4195825c_2 isa list, has hash "L_8755827792961_4195825c_2"; 

insert
$N_8755827792961_4195825c_2_3 isa MLIL_VAR_SSA, has hash "N_8755827792961_4195825c_2_3", has edge-label "3";
(to-node: $N_8755827792961_4195825c_2_3, from-node: $L_8755827792961_4195825c_2) isa node-link; 

match
$N_8755827792961_4195825c_2_3 isa operation, has hash "N_8755827792961_4195825c_2_3"; 

insert
$N_8755827792961_4195825c_2_3_0 isa variable-ssa, has hash "N_8755827792961_4195825c_2_3_0", has var "rcx", has version 2, has edge-label "src", has var-type "int64_t", has var-size 4, has var-func "main";
(to-node: $N_8755827792961_4195825c_2_3_0, from-node: $N_8755827792961_4195825c_2_3) isa node-link; 

match
$N_8755827792961_4195825c isa instruction, has hash "N_8755827792961_4195825c"; 

insert
$N_8755827792961_4195825c_3 isa constant, has hash "N_8755827792961_4195825c_3", has constant-value "2", has edge-label "src_memory";
(to-node: $N_8755827792961_4195825c_3, from-node: $N_8755827792961_4195825c) isa node-link; 

match 
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 11, has bb-end 17; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 11, has bb-end 17; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827863049_4195837c isa instruction, has hash "N_8755827863049_4195837c", has il-index 13, has asm-address "0x4005fd", has operation-type "MLIL_SET_VAR_SSA", has ins-text "rsi#1 = &var_118";
(contains-instruction: $N_8755827863049_4195837c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827863049_4195837c isa instruction, has hash "N_8755827863049_4195837c"; 

insert
$N_8755827863049_4195837c_0 isa variable-ssa, has hash "N_8755827863049_4195837c_0", has var "rsi", has version 1, has edge-label "dest", has var-type "int64_t*", has var-size 4, has var-func "main";
(to-node: $N_8755827863049_4195837c_0, from-node: $N_8755827863049_4195837c) isa node-link; 

match
$N_8755827863049_4195837c isa instruction, has hash "N_8755827863049_4195837c"; 

insert
$N_8755827863049_4195837c_1 isa MLIL_ADDRESS_OF, has hash "N_8755827863049_4195837c_1", has edge-label "src";
(to-node: $N_8755827863049_4195837c_1, from-node: $N_8755827863049_4195837c) isa node-link; 

match
$N_8755827863049_4195837c_1 isa operation, has hash "N_8755827863049_4195837c_1"; 

insert
$N_8755827863049_4195837c_1_0 isa variable, has hash "N_8755827863049_4195837c_1_0", has var "var_118", has edge-label "src", has var-type "int64_t", has var-size 8, has var-func "main";
(to-node: $N_8755827863049_4195837c_1_0, from-node: $N_8755827863049_4195837c_1) isa node-link; 

match 
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 11, has bb-end 17; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 11, has bb-end 17; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827911173_4195850c isa instruction, has hash "N_8755827911173_4195850c", has il-index 14, has asm-address "0x40060a", has operation-type "MLIL_CALL_SSA", has ins-text "mem#4 = 0x400470(0x4006b4, rsi#1) @ mem#3";
(contains-instruction: $N_8755827911173_4195850c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827911173_4195850c isa instruction, has hash "N_8755827911173_4195850c"; 

insert
$N_8755827911173_4195850c_0 isa MLIL_CALL_OUTPUT_SSA, has hash "N_8755827911173_4195850c_0", has edge-label "output";
(to-node: $N_8755827911173_4195850c_0, from-node: $N_8755827911173_4195850c) isa node-link; 

match
$N_8755827911173_4195850c_0 isa operation, has hash "N_8755827911173_4195850c_0"; 

insert
$N_8755827911173_4195850c_0_0 isa constant, has hash "N_8755827911173_4195850c_0_0", has constant-value "4", has edge-label "dest_memory";
(to-node: $N_8755827911173_4195850c_0_0, from-node: $N_8755827911173_4195850c_0) isa node-link; 

match
$N_8755827911173_4195850c_0 isa operation, has hash "N_8755827911173_4195850c_0"; 

insert
$L_8755827911173_4195850c_0_1 isa list, has hash "L_8755827911173_4195850c_0_1", has list-size 0, has edge-label "dest";
(to-node: $L_8755827911173_4195850c_0_1, from-node: $N_8755827911173_4195850c_0) isa node-link; 

match
$N_8755827911173_4195850c isa instruction, has hash "N_8755827911173_4195850c"; 

insert
$N_8755827911173_4195850c_1 isa MLIL_CONST_PTR, has hash "N_8755827911173_4195850c_1", has edge-label "dest";
(to-node: $N_8755827911173_4195850c_1, from-node: $N_8755827911173_4195850c) isa node-link; 

match
$N_8755827911173_4195850c_1 isa operation, has hash "N_8755827911173_4195850c_1"; 

insert
$N_8755827911173_4195850c_1_0 isa constant, has hash "N_8755827911173_4195850c_1_0", has constant-value "4195440", has edge-label "constant";
(to-node: $N_8755827911173_4195850c_1_0, from-node: $N_8755827911173_4195850c_1) isa node-link; 

match
$N_8755827911173_4195850c isa instruction, has hash "N_8755827911173_4195850c"; 

insert
$L_8755827911173_4195850c_2 isa list, has hash "L_8755827911173_4195850c_2", has list-size 2, has edge-label "params";
(to-node: $L_8755827911173_4195850c_2, from-node: $N_8755827911173_4195850c) isa node-link; 

match
$L_8755827911173_4195850c_2 isa list, has hash "L_8755827911173_4195850c_2"; 

insert
$N_8755827911173_4195850c_2_0 isa MLIL_CONST, has hash "N_8755827911173_4195850c_2_0", has edge-label "0";
(to-node: $N_8755827911173_4195850c_2_0, from-node: $L_8755827911173_4195850c_2) isa node-link; 

match
$N_8755827911173_4195850c_2_0 isa operation, has hash "N_8755827911173_4195850c_2_0"; 

insert
$N_8755827911173_4195850c_2_0_0 isa constant, has hash "N_8755827911173_4195850c_2_0_0", has constant-value "4196020", has edge-label "constant";
(to-node: $N_8755827911173_4195850c_2_0_0, from-node: $N_8755827911173_4195850c_2_0) isa node-link; 

match
$L_8755827911173_4195850c_2 isa list, has hash "L_8755827911173_4195850c_2"; 

insert
$N_8755827911173_4195850c_2_1 isa MLIL_VAR_SSA, has hash "N_8755827911173_4195850c_2_1", has edge-label "1";
(to-node: $N_8755827911173_4195850c_2_1, from-node: $L_8755827911173_4195850c_2) isa node-link; 

match
$N_8755827911173_4195850c_2_1 isa operation, has hash "N_8755827911173_4195850c_2_1"; 

insert
$N_8755827911173_4195850c_2_1_0 isa variable-ssa, has hash "N_8755827911173_4195850c_2_1_0", has var "rsi", has version 1, has edge-label "src", has var-type "int64_t*", has var-size 4, has var-func "main";
(to-node: $N_8755827911173_4195850c_2_1_0, from-node: $N_8755827911173_4195850c_2_1) isa node-link; 

match
$N_8755827911173_4195850c isa instruction, has hash "N_8755827911173_4195850c"; 

insert
$N_8755827911173_4195850c_3 isa constant, has hash "N_8755827911173_4195850c_3", has constant-value "3", has edge-label "src_memory";
(to-node: $N_8755827911173_4195850c_3, from-node: $N_8755827911173_4195850c) isa node-link; 

match 
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 11, has bb-end 17; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 11, has bb-end 17; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755823498373_4195860c isa instruction, has hash "N_8755823498373_4195860c", has il-index 15, has asm-address "0x400614", has operation-type "MLIL_SET_VAR_SSA", has ins-text "rsi_1#2 = var_10#1";
(contains-instruction: $N_8755823498373_4195860c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755823498373_4195860c isa instruction, has hash "N_8755823498373_4195860c"; 

insert
$N_8755823498373_4195860c_0 isa variable-ssa, has hash "N_8755823498373_4195860c_0", has var "rsi_1", has version 2, has edge-label "dest", has var-type "int64_t", has var-size 4, has var-func "main";
(to-node: $N_8755823498373_4195860c_0, from-node: $N_8755823498373_4195860c) isa node-link; 

match
$N_8755823498373_4195860c isa instruction, has hash "N_8755823498373_4195860c"; 

insert
$N_8755823498373_4195860c_1 isa MLIL_VAR_SSA, has hash "N_8755823498373_4195860c_1", has edge-label "src";
(to-node: $N_8755823498373_4195860c_1, from-node: $N_8755823498373_4195860c) isa node-link; 

match
$N_8755823498373_4195860c_1 isa operation, has hash "N_8755823498373_4195860c_1"; 

insert
$N_8755823498373_4195860c_1_0 isa variable-ssa, has hash "N_8755823498373_4195860c_1_0", has var "var_10", has version 1, has edge-label "src", has var-type "int64_t", has var-size 8, has var-func "main";
(to-node: $N_8755823498373_4195860c_1_0, from-node: $N_8755823498373_4195860c_1) isa node-link; 

match 
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 11, has bb-end 17; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 11, has bb-end 17; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827733765_4195864c isa instruction, has hash "N_8755827733765_4195864c", has il-index 16, has asm-address "0x400618", has operation-type "MLIL_SET_VAR_SSA", has ins-text "temp0#1 = rsi_1#2 ^ [fsbase#0 + 0x28].q @ mem#4";
(contains-instruction: $N_8755827733765_4195864c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827733765_4195864c isa instruction, has hash "N_8755827733765_4195864c"; 

insert
$N_8755827733765_4195864c_0 isa variable-ssa, has hash "N_8755827733765_4195864c_0", has var "temp0", has version 1, has edge-label "dest", has var-type "int64_t", has var-size 4, has var-func "main";
(to-node: $N_8755827733765_4195864c_0, from-node: $N_8755827733765_4195864c) isa node-link; 

match
$N_8755827733765_4195864c isa instruction, has hash "N_8755827733765_4195864c"; 

insert
$N_8755827733765_4195864c_1 isa MLIL_XOR, has hash "N_8755827733765_4195864c_1", has edge-label "src";
(to-node: $N_8755827733765_4195864c_1, from-node: $N_8755827733765_4195864c) isa node-link; 

match
$N_8755827733765_4195864c_1 isa operation, has hash "N_8755827733765_4195864c_1"; 

insert
$N_8755827733765_4195864c_1_0 isa MLIL_VAR_SSA, has hash "N_8755827733765_4195864c_1_0", has edge-label "left";
(to-node: $N_8755827733765_4195864c_1_0, from-node: $N_8755827733765_4195864c_1) isa node-link; 

match
$N_8755827733765_4195864c_1_0 isa operation, has hash "N_8755827733765_4195864c_1_0"; 

insert
$N_8755827733765_4195864c_1_0_0 isa variable-ssa, has hash "N_8755827733765_4195864c_1_0_0", has var "rsi_1", has version 2, has edge-label "src", has var-type "int64_t", has var-size 4, has var-func "main";
(to-node: $N_8755827733765_4195864c_1_0_0, from-node: $N_8755827733765_4195864c_1_0) isa node-link; 

match
$N_8755827733765_4195864c_1 isa operation, has hash "N_8755827733765_4195864c_1"; 

insert
$N_8755827733765_4195864c_1_1 isa MLIL_LOAD_SSA, has hash "N_8755827733765_4195864c_1_1", has edge-label "right";
(to-node: $N_8755827733765_4195864c_1_1, from-node: $N_8755827733765_4195864c_1) isa node-link; 

match
$N_8755827733765_4195864c_1_1 isa operation, has hash "N_8755827733765_4195864c_1_1"; 

insert
$N_8755827733765_4195864c_1_1_0 isa MLIL_ADD, has hash "N_8755827733765_4195864c_1_1_0", has edge-label "src";
(to-node: $N_8755827733765_4195864c_1_1_0, from-node: $N_8755827733765_4195864c_1_1) isa node-link; 

match
$N_8755827733765_4195864c_1_1_0 isa operation, has hash "N_8755827733765_4195864c_1_1_0"; 

insert
$N_8755827733765_4195864c_1_1_0_0 isa MLIL_VAR_SSA, has hash "N_8755827733765_4195864c_1_1_0_0", has edge-label "left";
(to-node: $N_8755827733765_4195864c_1_1_0_0, from-node: $N_8755827733765_4195864c_1_1_0) isa node-link; 

match
$N_8755827733765_4195864c_1_1_0_0 isa operation, has hash "N_8755827733765_4195864c_1_1_0_0"; 

insert
$N_8755827733765_4195864c_1_1_0_0_0 isa variable-ssa, has hash "N_8755827733765_4195864c_1_1_0_0_0", has var "fsbase", has version 0, has edge-label "src", has var-type "int64_t", has var-size 4, has var-func "main";
(to-node: $N_8755827733765_4195864c_1_1_0_0_0, from-node: $N_8755827733765_4195864c_1_1_0_0) isa node-link; 

match
$N_8755827733765_4195864c_1_1_0 isa operation, has hash "N_8755827733765_4195864c_1_1_0"; 

insert
$N_8755827733765_4195864c_1_1_0_1 isa MLIL_CONST, has hash "N_8755827733765_4195864c_1_1_0_1", has edge-label "right";
(to-node: $N_8755827733765_4195864c_1_1_0_1, from-node: $N_8755827733765_4195864c_1_1_0) isa node-link; 

match
$N_8755827733765_4195864c_1_1_0_1 isa operation, has hash "N_8755827733765_4195864c_1_1_0_1"; 

insert
$N_8755827733765_4195864c_1_1_0_1_0 isa constant, has hash "N_8755827733765_4195864c_1_1_0_1_0", has constant-value "40", has edge-label "constant";
(to-node: $N_8755827733765_4195864c_1_1_0_1_0, from-node: $N_8755827733765_4195864c_1_1_0_1) isa node-link; 

match
$N_8755827733765_4195864c_1_1 isa operation, has hash "N_8755827733765_4195864c_1_1"; 

insert
$N_8755827733765_4195864c_1_1_1 isa constant, has hash "N_8755827733765_4195864c_1_1_1", has constant-value "4", has edge-label "src_memory";
(to-node: $N_8755827733765_4195864c_1_1_1, from-node: $N_8755827733765_4195864c_1_1) isa node-link; 

match 
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 11, has bb-end 17; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 11, has bb-end 17; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827891717_4195873c isa instruction, has hash "N_8755827891717_4195873c", has il-index 17, has asm-address "0x400621", has operation-type "MLIL_IF", has ins-text "if (temp0#1 == 0) then 19 @ 0x400629 else 20 @ 0x400623";
(contains-instruction: $N_8755827891717_4195873c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827891717_4195873c isa instruction, has hash "N_8755827891717_4195873c"; 

insert
$N_8755827891717_4195873c_0 isa MLIL_CMP_E, has hash "N_8755827891717_4195873c_0", has edge-label "condition";
(to-node: $N_8755827891717_4195873c_0, from-node: $N_8755827891717_4195873c) isa node-link; 

match
$N_8755827891717_4195873c_0 isa operation, has hash "N_8755827891717_4195873c_0"; 

insert
$N_8755827891717_4195873c_0_0 isa MLIL_VAR_SSA, has hash "N_8755827891717_4195873c_0_0", has edge-label "left";
(to-node: $N_8755827891717_4195873c_0_0, from-node: $N_8755827891717_4195873c_0) isa node-link; 

match
$N_8755827891717_4195873c_0_0 isa operation, has hash "N_8755827891717_4195873c_0_0"; 

insert
$N_8755827891717_4195873c_0_0_0 isa variable-ssa, has hash "N_8755827891717_4195873c_0_0_0", has var "temp0", has version 1, has edge-label "src", has var-type "int64_t", has var-size 4, has var-func "main";
(to-node: $N_8755827891717_4195873c_0_0_0, from-node: $N_8755827891717_4195873c_0_0) isa node-link; 

match
$N_8755827891717_4195873c_0 isa operation, has hash "N_8755827891717_4195873c_0"; 

insert
$N_8755827891717_4195873c_0_1 isa MLIL_CONST, has hash "N_8755827891717_4195873c_0_1", has edge-label "right";
(to-node: $N_8755827891717_4195873c_0_1, from-node: $N_8755827891717_4195873c_0) isa node-link; 

match
$N_8755827891717_4195873c_0_1 isa operation, has hash "N_8755827891717_4195873c_0_1"; 

insert
$N_8755827891717_4195873c_0_1_0 isa constant, has hash "N_8755827891717_4195873c_0_1_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8755827891717_4195873c_0_1_0, from-node: $N_8755827891717_4195873c_0_1) isa node-link; 

match
$N_8755827891717_4195873c isa instruction, has hash "N_8755827891717_4195873c"; 

insert
$N_8755827891717_4195873c_1 isa constant, has hash "N_8755827891717_4195873c_1", has constant-value "19", has edge-label "true";
(to-node: $N_8755827891717_4195873c_1, from-node: $N_8755827891717_4195873c) isa node-link; 

match
$N_8755827891717_4195873c isa instruction, has hash "N_8755827891717_4195873c"; 

insert
$N_8755827891717_4195873c_2 isa constant, has hash "N_8755827891717_4195873c_2", has constant-value "20", has edge-label "false";
(to-node: $N_8755827891717_4195873c_2, from-node: $N_8755827891717_4195873c) isa node-link; 

match 
$func_main isa function, has name "main"; 

insert 
$bb isa basic-block, has bb-start 18, has bb-end 18; 
(contains-basic-block: $bb, in-function: $func_main) isa has-basic-block; 

match 
$func_main isa function, has name "main"; 

insert 
$bb isa basic-block, has bb-start 19, has bb-end 19; 
(contains-basic-block: $bb, in-function: $func_main) isa has-basic-block; 

match 
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 19, has bb-end 19; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 19, has bb-end 19; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827832345_4195881c isa instruction, has hash "N_8755827832345_4195881c", has il-index 19, has asm-address "0x400629", has operation-type "MLIL_RET", has ins-text "return 0";
(contains-instruction: $N_8755827832345_4195881c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827832345_4195881c isa instruction, has hash "N_8755827832345_4195881c"; 

insert
$L_8755827832345_4195881c_0 isa list, has hash "L_8755827832345_4195881c_0", has list-size 1, has edge-label "src";
(to-node: $L_8755827832345_4195881c_0, from-node: $N_8755827832345_4195881c) isa node-link; 

match
$L_8755827832345_4195881c_0 isa list, has hash "L_8755827832345_4195881c_0"; 

insert
$N_8755827832345_4195881c_0_0 isa MLIL_CONST, has hash "N_8755827832345_4195881c_0_0", has edge-label "0";
(to-node: $N_8755827832345_4195881c_0_0, from-node: $L_8755827832345_4195881c_0) isa node-link; 

match
$N_8755827832345_4195881c_0_0 isa operation, has hash "N_8755827832345_4195881c_0_0"; 

insert
$N_8755827832345_4195881c_0_0_0 isa constant, has hash "N_8755827832345_4195881c_0_0_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8755827832345_4195881c_0_0_0, from-node: $N_8755827832345_4195881c_0_0) isa node-link; 

match 
$func_main isa function, has name "main"; 

insert 
$bb isa basic-block, has bb-start 20, has bb-end 21; 
(contains-basic-block: $bb, in-function: $func_main) isa has-basic-block; 

match 
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 20, has bb-end 21; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 20, has bb-end 21; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827881345_4195875c isa instruction, has hash "N_8755827881345_4195875c", has il-index 20, has asm-address "0x400623", has operation-type "MLIL_CALL_SSA", has ins-text "mem#5 = 0x400460() @ mem#4";
(contains-instruction: $N_8755827881345_4195875c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827881345_4195875c isa instruction, has hash "N_8755827881345_4195875c"; 

insert
$N_8755827881345_4195875c_0 isa MLIL_CALL_OUTPUT_SSA, has hash "N_8755827881345_4195875c_0", has edge-label "output";
(to-node: $N_8755827881345_4195875c_0, from-node: $N_8755827881345_4195875c) isa node-link; 

match
$N_8755827881345_4195875c_0 isa operation, has hash "N_8755827881345_4195875c_0"; 

insert
$N_8755827881345_4195875c_0_0 isa constant, has hash "N_8755827881345_4195875c_0_0", has constant-value "5", has edge-label "dest_memory";
(to-node: $N_8755827881345_4195875c_0_0, from-node: $N_8755827881345_4195875c_0) isa node-link; 

match
$N_8755827881345_4195875c_0 isa operation, has hash "N_8755827881345_4195875c_0"; 

insert
$L_8755827881345_4195875c_0_1 isa list, has hash "L_8755827881345_4195875c_0_1", has list-size 0, has edge-label "dest";
(to-node: $L_8755827881345_4195875c_0_1, from-node: $N_8755827881345_4195875c_0) isa node-link; 

match
$N_8755827881345_4195875c isa instruction, has hash "N_8755827881345_4195875c"; 

insert
$N_8755827881345_4195875c_1 isa MLIL_CONST_PTR, has hash "N_8755827881345_4195875c_1", has edge-label "dest";
(to-node: $N_8755827881345_4195875c_1, from-node: $N_8755827881345_4195875c) isa node-link; 

match
$N_8755827881345_4195875c_1 isa operation, has hash "N_8755827881345_4195875c_1"; 

insert
$N_8755827881345_4195875c_1_0 isa constant, has hash "N_8755827881345_4195875c_1_0", has constant-value "4195424", has edge-label "constant";
(to-node: $N_8755827881345_4195875c_1_0, from-node: $N_8755827881345_4195875c_1) isa node-link; 

match
$N_8755827881345_4195875c isa instruction, has hash "N_8755827881345_4195875c"; 

insert
$L_8755827881345_4195875c_2 isa list, has hash "L_8755827881345_4195875c_2", has list-size 0, has edge-label "params";
(to-node: $L_8755827881345_4195875c_2, from-node: $N_8755827881345_4195875c) isa node-link; 

match
$N_8755827881345_4195875c isa instruction, has hash "N_8755827881345_4195875c"; 

insert
$N_8755827881345_4195875c_3 isa constant, has hash "N_8755827881345_4195875c_3", has constant-value "4", has edge-label "src_memory";
(to-node: $N_8755827881345_4195875c_3, from-node: $N_8755827881345_4195875c) isa node-link; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 20, has bb-end 21; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827911377_4195875c isa instruction, has hash "N_8755827911377_4195875c", has il-index 21, has asm-address "0x400623", has operation-type "MLIL_NORET", has ins-text "noreturn";
(contains-instruction: $N_8755827911377_4195875c, in-basic-block: $bb) isa has-instruction; 

match 
$func_main isa function, has name "main"; 

insert 
$bb isa basic-block, has bb-start 22, has bb-end 24; 
(contains-basic-block: $bb, in-function: $func_main) isa has-basic-block; 

match 
$func_main isa function, has name "main"; 

insert 
$bb isa basic-block, has bb-start 25, has bb-end 27; 
(contains-basic-block: $bb, in-function: $func_main) isa has-basic-block; 

match 
$func_main isa function, has name "main"; 

insert 
$bb isa basic-block, has bb-start 28, has bb-end 31; 
(contains-basic-block: $bb, in-function: $func_main) isa has-basic-block; 

match 
$func_main isa function, has name "main"; 
$frombb isa basic-block, has bb-end 6, has bb-start 0; 
$tobb   isa basic-block, has bb-end 10, has bb-start 7; 
(contains-basic-block: $frombb, in-function: $func_main) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_main) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_main isa function, has name "main"; 
$frombb isa basic-block, has bb-end 10, has bb-start 7; 
$tobb   isa basic-block, has bb-end 17, has bb-start 11; 
(contains-basic-block: $frombb, in-function: $func_main) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_main) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_main isa function, has name "main"; 
$frombb isa basic-block, has bb-end 10, has bb-start 7; 
$tobb   isa basic-block, has bb-end 18, has bb-start 18; 
(contains-basic-block: $frombb, in-function: $func_main) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_main) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_main isa function, has name "main"; 
$frombb isa basic-block, has bb-end 17, has bb-start 11; 
$tobb   isa basic-block, has bb-end 19, has bb-start 19; 
(contains-basic-block: $frombb, in-function: $func_main) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_main) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_main isa function, has name "main"; 
$frombb isa basic-block, has bb-end 17, has bb-start 11; 
$tobb   isa basic-block, has bb-end 21, has bb-start 20; 
(contains-basic-block: $frombb, in-function: $func_main) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_main) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_main isa function, has name "main"; 
$frombb isa basic-block, has bb-end 18, has bb-start 18; 
$tobb   isa basic-block, has bb-end 24, has bb-start 22; 
(contains-basic-block: $frombb, in-function: $func_main) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_main) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_main isa function, has name "main"; 
$frombb isa basic-block, has bb-end 18, has bb-start 18; 
$tobb   isa basic-block, has bb-end 27, has bb-start 25; 
(contains-basic-block: $frombb, in-function: $func_main) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_main) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_main isa function, has name "main"; 
$frombb isa basic-block, has bb-end 24, has bb-start 22; 
$tobb   isa basic-block, has bb-end 31, has bb-start 28; 
(contains-basic-block: $frombb, in-function: $func_main) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_main) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_main isa function, has name "main"; 
$frombb isa basic-block, has bb-end 27, has bb-start 25; 
$tobb   isa basic-block, has bb-end 31, has bb-start 28; 
(contains-basic-block: $frombb, in-function: $func_main) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_main) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_main isa function, has name "main"; 
$frombb isa basic-block, has bb-end 31, has bb-start 28; 
$tobb   isa basic-block, has bb-end 10, has bb-start 7; 
(contains-basic-block: $frombb, in-function: $func_main) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_main) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

insert 
$func___libc_csu_init isa function, has name "__libc_csu_init", has asm-address "0x400630", has stack "[<var void var_38>, <var int64_t var_30>, <var int64_t __saved_rbp>, <var int64_t __saved_r12>, <var int64_t __saved_r13>, <var int64_t __saved_r14>, <var int64_t __saved_r15>, <var void* const __return_addr>]"; 

match 
$func___libc_csu_init isa function, has name "__libc_csu_init"; 

insert 
$bb isa basic-block, has bb-start 0, has bb-end 4; 
(contains-basic-block: $bb, in-function: $func___libc_csu_init) isa has-basic-block; 

match 
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 0, has bb-end 4; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

match
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 0, has bb-end 4; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755828966337_4195892c isa instruction, has hash "N_8755828966337_4195892c", has il-index 0, has asm-address "0x400634", has operation-type "MLIL_SET_VAR_SSA", has ins-text "r15#1 = zx.q(rdi#0.edi)";
(contains-instruction: $N_8755828966337_4195892c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755828966337_4195892c isa instruction, has hash "N_8755828966337_4195892c"; 

insert
$N_8755828966337_4195892c_0 isa variable-ssa, has hash "N_8755828966337_4195892c_0", has var "r15", has version 1, has edge-label "dest", has var-type "uint64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755828966337_4195892c_0, from-node: $N_8755828966337_4195892c) isa node-link; 

match
$N_8755828966337_4195892c isa instruction, has hash "N_8755828966337_4195892c"; 

insert
$N_8755828966337_4195892c_1 isa MLIL_ZX, has hash "N_8755828966337_4195892c_1", has edge-label "src";
(to-node: $N_8755828966337_4195892c_1, from-node: $N_8755828966337_4195892c) isa node-link; 

match
$N_8755828966337_4195892c_1 isa operation, has hash "N_8755828966337_4195892c_1"; 

insert
$N_8755828966337_4195892c_1_0 isa MLIL_VAR_SSA_FIELD, has hash "N_8755828966337_4195892c_1_0", has edge-label "src";
(to-node: $N_8755828966337_4195892c_1_0, from-node: $N_8755828966337_4195892c_1) isa node-link; 

match
$N_8755828966337_4195892c_1_0 isa operation, has hash "N_8755828966337_4195892c_1_0"; 

insert
$N_8755828966337_4195892c_1_0_0 isa variable-ssa, has hash "N_8755828966337_4195892c_1_0_0", has var "rdi", has version 0, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755828966337_4195892c_1_0_0, from-node: $N_8755828966337_4195892c_1_0) isa node-link; 

match
$N_8755828966337_4195892c_1_0 isa operation, has hash "N_8755828966337_4195892c_1_0"; 

insert
$N_8755828966337_4195892c_1_0_1 isa constant, has hash "N_8755828966337_4195892c_1_0_1", has constant-value "0", has edge-label "offset";
(to-node: $N_8755828966337_4195892c_1_0_1, from-node: $N_8755828966337_4195892c_1_0) isa node-link; 

match 
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 0, has bb-end 4; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

match
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 0, has bb-end 4; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827863085_4195915c isa instruction, has hash "N_8755827863085_4195915c", has il-index 1, has asm-address "0x40064b", has operation-type "MLIL_SET_VAR_SSA", has ins-text "r14#1 = rsi#0";
(contains-instruction: $N_8755827863085_4195915c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827863085_4195915c isa instruction, has hash "N_8755827863085_4195915c"; 

insert
$N_8755827863085_4195915c_0 isa variable-ssa, has hash "N_8755827863085_4195915c_0", has var "r14", has version 1, has edge-label "dest", has var-type "int64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827863085_4195915c_0, from-node: $N_8755827863085_4195915c) isa node-link; 

match
$N_8755827863085_4195915c isa instruction, has hash "N_8755827863085_4195915c"; 

insert
$N_8755827863085_4195915c_1 isa MLIL_VAR_SSA, has hash "N_8755827863085_4195915c_1", has edge-label "src";
(to-node: $N_8755827863085_4195915c_1, from-node: $N_8755827863085_4195915c) isa node-link; 

match
$N_8755827863085_4195915c_1 isa operation, has hash "N_8755827863085_4195915c_1"; 

insert
$N_8755827863085_4195915c_1_0 isa variable-ssa, has hash "N_8755827863085_4195915c_1_0", has var "rsi", has version 0, has edge-label "src", has var-type "int64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827863085_4195915c_1_0, from-node: $N_8755827863085_4195915c_1) isa node-link; 

match 
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 0, has bb-end 4; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

match
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 0, has bb-end 4; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827896581_4195918c isa instruction, has hash "N_8755827896581_4195918c", has il-index 2, has asm-address "0x40064e", has operation-type "MLIL_SET_VAR_SSA", has ins-text "r13#1 = rdx#0";
(contains-instruction: $N_8755827896581_4195918c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827896581_4195918c isa instruction, has hash "N_8755827896581_4195918c"; 

insert
$N_8755827896581_4195918c_0 isa variable-ssa, has hash "N_8755827896581_4195918c_0", has var "r13", has version 1, has edge-label "dest", has var-type "int64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827896581_4195918c_0, from-node: $N_8755827896581_4195918c) isa node-link; 

match
$N_8755827896581_4195918c isa instruction, has hash "N_8755827896581_4195918c"; 

insert
$N_8755827896581_4195918c_1 isa MLIL_VAR_SSA, has hash "N_8755827896581_4195918c_1", has edge-label "src";
(to-node: $N_8755827896581_4195918c_1, from-node: $N_8755827896581_4195918c) isa node-link; 

match
$N_8755827896581_4195918c_1 isa operation, has hash "N_8755827896581_4195918c_1"; 

insert
$N_8755827896581_4195918c_1_0 isa variable-ssa, has hash "N_8755827896581_4195918c_1_0", has var "rdx", has version 0, has edge-label "src", has var-type "int64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827896581_4195918c_1_0, from-node: $N_8755827896581_4195918c_1) isa node-link; 

match 
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 0, has bb-end 4; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

match
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 0, has bb-end 4; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755823492869_4195932c isa instruction, has hash "N_8755823492869_4195932c", has il-index 3, has asm-address "0x40065c", has operation-type "MLIL_CALL_SSA", has ins-text "rax#1, mem#1 = 0x400428() @ mem#0";
(contains-instruction: $N_8755823492869_4195932c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755823492869_4195932c isa instruction, has hash "N_8755823492869_4195932c"; 

insert
$N_8755823492869_4195932c_0 isa MLIL_CALL_OUTPUT_SSA, has hash "N_8755823492869_4195932c_0", has edge-label "output";
(to-node: $N_8755823492869_4195932c_0, from-node: $N_8755823492869_4195932c) isa node-link; 

match
$N_8755823492869_4195932c_0 isa operation, has hash "N_8755823492869_4195932c_0"; 

insert
$N_8755823492869_4195932c_0_0 isa constant, has hash "N_8755823492869_4195932c_0_0", has constant-value "1", has edge-label "dest_memory";
(to-node: $N_8755823492869_4195932c_0_0, from-node: $N_8755823492869_4195932c_0) isa node-link; 

match
$N_8755823492869_4195932c_0 isa operation, has hash "N_8755823492869_4195932c_0"; 

insert
$L_8755823492869_4195932c_0_1 isa list, has hash "L_8755823492869_4195932c_0_1", has list-size 1, has edge-label "dest";
(to-node: $L_8755823492869_4195932c_0_1, from-node: $N_8755823492869_4195932c_0) isa node-link; 

match
$L_8755823492869_4195932c_0_1 isa list, has hash "L_8755823492869_4195932c_0_1"; 

insert
$N_8755823492869_4195932c_0_1_0 isa variable-ssa, has hash "N_8755823492869_4195932c_0_1_0", has var "rax", has version 1, has edge-label "0", has var-type "void*", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755823492869_4195932c_0_1_0, from-node: $L_8755823492869_4195932c_0_1) isa node-link; 

match
$N_8755823492869_4195932c isa instruction, has hash "N_8755823492869_4195932c"; 

insert
$N_8755823492869_4195932c_1 isa MLIL_CONST_PTR, has hash "N_8755823492869_4195932c_1", has edge-label "dest";
(to-node: $N_8755823492869_4195932c_1, from-node: $N_8755823492869_4195932c) isa node-link; 

match
$N_8755823492869_4195932c_1 isa operation, has hash "N_8755823492869_4195932c_1"; 

insert
$N_8755823492869_4195932c_1_0 isa constant, has hash "N_8755823492869_4195932c_1_0", has constant-value "4195368", has edge-label "constant";
(to-node: $N_8755823492869_4195932c_1_0, from-node: $N_8755823492869_4195932c_1) isa node-link; 

match
$N_8755823492869_4195932c isa instruction, has hash "N_8755823492869_4195932c"; 

insert
$L_8755823492869_4195932c_2 isa list, has hash "L_8755823492869_4195932c_2", has list-size 0, has edge-label "params";
(to-node: $L_8755823492869_4195932c_2, from-node: $N_8755823492869_4195932c) isa node-link; 

match
$N_8755823492869_4195932c isa instruction, has hash "N_8755823492869_4195932c"; 

insert
$N_8755823492869_4195932c_3 isa constant, has hash "N_8755823492869_4195932c_3", has constant-value "0", has edge-label "src_memory";
(to-node: $N_8755823492869_4195932c_3, from-node: $N_8755823492869_4195932c) isa node-link; 

match 
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 0, has bb-end 4; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

match
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 0, has bb-end 4; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827912749_4195940c isa instruction, has hash "N_8755827912749_4195940c", has il-index 4, has asm-address "0x400664", has operation-type "MLIL_IF", has ins-text "if (1 == 0) then 5 @ 0x0 else 6 @ 0x400666";
(contains-instruction: $N_8755827912749_4195940c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827912749_4195940c isa instruction, has hash "N_8755827912749_4195940c"; 

insert
$N_8755827912749_4195940c_0 isa MLIL_CMP_E, has hash "N_8755827912749_4195940c_0", has edge-label "condition";
(to-node: $N_8755827912749_4195940c_0, from-node: $N_8755827912749_4195940c) isa node-link; 

match
$N_8755827912749_4195940c_0 isa operation, has hash "N_8755827912749_4195940c_0"; 

insert
$N_8755827912749_4195940c_0_0 isa MLIL_CONST, has hash "N_8755827912749_4195940c_0_0", has edge-label "left";
(to-node: $N_8755827912749_4195940c_0_0, from-node: $N_8755827912749_4195940c_0) isa node-link; 

match
$N_8755827912749_4195940c_0_0 isa operation, has hash "N_8755827912749_4195940c_0_0"; 

insert
$N_8755827912749_4195940c_0_0_0 isa constant, has hash "N_8755827912749_4195940c_0_0_0", has constant-value "1", has edge-label "constant";
(to-node: $N_8755827912749_4195940c_0_0_0, from-node: $N_8755827912749_4195940c_0_0) isa node-link; 

match
$N_8755827912749_4195940c_0 isa operation, has hash "N_8755827912749_4195940c_0"; 

insert
$N_8755827912749_4195940c_0_1 isa MLIL_CONST, has hash "N_8755827912749_4195940c_0_1", has edge-label "right";
(to-node: $N_8755827912749_4195940c_0_1, from-node: $N_8755827912749_4195940c_0) isa node-link; 

match
$N_8755827912749_4195940c_0_1 isa operation, has hash "N_8755827912749_4195940c_0_1"; 

insert
$N_8755827912749_4195940c_0_1_0 isa constant, has hash "N_8755827912749_4195940c_0_1_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8755827912749_4195940c_0_1_0, from-node: $N_8755827912749_4195940c_0_1) isa node-link; 

match
$N_8755827912749_4195940c isa instruction, has hash "N_8755827912749_4195940c"; 

insert
$N_8755827912749_4195940c_1 isa constant, has hash "N_8755827912749_4195940c_1", has constant-value "5", has edge-label "true";
(to-node: $N_8755827912749_4195940c_1, from-node: $N_8755827912749_4195940c) isa node-link; 

match
$N_8755827912749_4195940c isa instruction, has hash "N_8755827912749_4195940c"; 

insert
$N_8755827912749_4195940c_2 isa constant, has hash "N_8755827912749_4195940c_2", has constant-value "6", has edge-label "false";
(to-node: $N_8755827912749_4195940c_2, from-node: $N_8755827912749_4195940c) isa node-link; 

match 
$func___libc_csu_init isa function, has name "__libc_csu_init"; 

insert 
$bb isa basic-block, has bb-start 5, has bb-end 5; 
(contains-basic-block: $bb, in-function: $func___libc_csu_init) isa has-basic-block; 

match 
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 5, has bb-end 5; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

match
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 5, has bb-end 5; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827726141_0c isa instruction, has hash "N_8755827726141_0c", has il-index 28, has asm-address "0x0", has operation-type "MLIL_GOTO", has ins-text "goto 8 @ 0x400694";
(contains-instruction: $N_8755827726141_0c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827726141_0c isa instruction, has hash "N_8755827726141_0c"; 

insert
$N_8755827726141_0c_0 isa constant, has hash "N_8755827726141_0c_0", has constant-value "8", has edge-label "dest";
(to-node: $N_8755827726141_0c_0, from-node: $N_8755827726141_0c) isa node-link; 

match
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 5, has bb-end 5; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827881477_0c isa instruction, has hash "N_8755827881477_0c", has il-index 27, has asm-address "0x0", has operation-type "MLIL_GOTO", has ins-text "goto 15 @ 0x400670";
(contains-instruction: $N_8755827881477_0c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827881477_0c isa instruction, has hash "N_8755827881477_0c"; 

insert
$N_8755827881477_0c_0 isa constant, has hash "N_8755827881477_0c_0", has constant-value "15", has edge-label "dest";
(to-node: $N_8755827881477_0c_0, from-node: $N_8755827881477_0c) isa node-link; 

match
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 5, has bb-end 5; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755828978721_0c isa instruction, has hash "N_8755828978721_0c", has il-index 5, has asm-address "0x0", has operation-type "MLIL_GOTO", has ins-text "goto 8 @ 0x400694";
(contains-instruction: $N_8755828978721_0c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755828978721_0c isa instruction, has hash "N_8755828978721_0c"; 

insert
$N_8755828978721_0c_0 isa constant, has hash "N_8755828978721_0c_0", has constant-value "8", has edge-label "dest";
(to-node: $N_8755828978721_0c_0, from-node: $N_8755828978721_0c) isa node-link; 

match 
$func___libc_csu_init isa function, has name "__libc_csu_init"; 

insert 
$bb isa basic-block, has bb-start 6, has bb-end 7; 
(contains-basic-block: $bb, in-function: $func___libc_csu_init) isa has-basic-block; 

match 
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 6, has bb-end 7; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

match
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 6, has bb-end 7; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827889697_4195942c isa instruction, has hash "N_8755827889697_4195942c", has il-index 6, has asm-address "0x400666", has operation-type "MLIL_SET_VAR_SSA", has ins-text "rbx_1#1 = 0";
(contains-instruction: $N_8755827889697_4195942c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827889697_4195942c isa instruction, has hash "N_8755827889697_4195942c"; 

insert
$N_8755827889697_4195942c_0 isa variable-ssa, has hash "N_8755827889697_4195942c_0", has var "rbx_1", has version 1, has edge-label "dest", has var-type "int64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827889697_4195942c_0, from-node: $N_8755827889697_4195942c) isa node-link; 

match
$N_8755827889697_4195942c isa instruction, has hash "N_8755827889697_4195942c"; 

insert
$N_8755827889697_4195942c_1 isa MLIL_CONST, has hash "N_8755827889697_4195942c_1", has edge-label "src";
(to-node: $N_8755827889697_4195942c_1, from-node: $N_8755827889697_4195942c) isa node-link; 

match
$N_8755827889697_4195942c_1 isa operation, has hash "N_8755827889697_4195942c_1"; 

insert
$N_8755827889697_4195942c_1_0 isa constant, has hash "N_8755827889697_4195942c_1_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8755827889697_4195942c_1_0, from-node: $N_8755827889697_4195942c_1) isa node-link; 

match 
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 6, has bb-end 7; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

match
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 6, has bb-end 7; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827808517_4195944c isa instruction, has hash "N_8755827808517_4195944c", has il-index 7, has asm-address "0x400668", has operation-type "MLIL_GOTO", has ins-text "goto 15 @ 0x400670";
(contains-instruction: $N_8755827808517_4195944c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827808517_4195944c isa instruction, has hash "N_8755827808517_4195944c"; 

insert
$N_8755827808517_4195944c_0 isa constant, has hash "N_8755827808517_4195944c_0", has constant-value "15", has edge-label "dest";
(to-node: $N_8755827808517_4195944c_0, from-node: $N_8755827808517_4195944c) isa node-link; 

match 
$func___libc_csu_init isa function, has name "__libc_csu_init"; 

insert 
$bb isa basic-block, has bb-start 8, has bb-end 14; 
(contains-basic-block: $bb, in-function: $func___libc_csu_init) isa has-basic-block; 

match 
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 8, has bb-end 14; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

match
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 8, has bb-end 14; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755823478697_4195988c isa instruction, has hash "N_8755823478697_4195988c", has il-index 8, has asm-address "0x400694", has operation-type "MLIL_VAR_PHI", has ins-text "rax#4 = ϕ(rax#1, rax#3)";
(contains-instruction: $N_8755823478697_4195988c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755823478697_4195988c isa instruction, has hash "N_8755823478697_4195988c"; 

insert
$N_8755823478697_4195988c_0 isa variable-ssa, has hash "N_8755823478697_4195988c_0", has var "rax", has version 4, has edge-label "dest", has var-type "void*", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755823478697_4195988c_0, from-node: $N_8755823478697_4195988c) isa node-link; 

match
$N_8755823478697_4195988c isa instruction, has hash "N_8755823478697_4195988c"; 

insert
$L_8755823478697_4195988c_1 isa list, has hash "L_8755823478697_4195988c_1", has list-size 2, has edge-label "src";
(to-node: $L_8755823478697_4195988c_1, from-node: $N_8755823478697_4195988c) isa node-link; 

match
$L_8755823478697_4195988c_1 isa list, has hash "L_8755823478697_4195988c_1"; 

insert
$N_8755823478697_4195988c_1_0 isa variable-ssa, has hash "N_8755823478697_4195988c_1_0", has var "rax", has version 1, has edge-label "0", has var-type "void*", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755823478697_4195988c_1_0, from-node: $L_8755823478697_4195988c_1) isa node-link; 

match
$L_8755823478697_4195988c_1 isa list, has hash "L_8755823478697_4195988c_1"; 

insert
$N_8755823478697_4195988c_1_1 isa variable-ssa, has hash "N_8755823478697_4195988c_1_1", has var "rax", has version 3, has edge-label "1", has var-type "void*", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755823478697_4195988c_1_1, from-node: $L_8755823478697_4195988c_1) isa node-link; 

match
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 8, has bb-end 14; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755823492997_4195988c isa instruction, has hash "N_8755823492997_4195988c", has il-index 9, has asm-address "0x400694", has operation-type "MLIL_VAR_PHI", has ins-text "rdx_1#3 = ϕ(rdx#0, rdx_1#2)";
(contains-instruction: $N_8755823492997_4195988c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755823492997_4195988c isa instruction, has hash "N_8755823492997_4195988c"; 

insert
$N_8755823492997_4195988c_0 isa variable-ssa, has hash "N_8755823492997_4195988c_0", has var "rdx_1", has version 3, has edge-label "dest", has var-type "int64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755823492997_4195988c_0, from-node: $N_8755823492997_4195988c) isa node-link; 

match
$N_8755823492997_4195988c isa instruction, has hash "N_8755823492997_4195988c"; 

insert
$L_8755823492997_4195988c_1 isa list, has hash "L_8755823492997_4195988c_1", has list-size 2, has edge-label "src";
(to-node: $L_8755823492997_4195988c_1, from-node: $N_8755823492997_4195988c) isa node-link; 

match
$L_8755823492997_4195988c_1 isa list, has hash "L_8755823492997_4195988c_1"; 

insert
$N_8755823492997_4195988c_1_0 isa variable-ssa, has hash "N_8755823492997_4195988c_1_0", has var "rdx", has version 0, has edge-label "0", has var-type "int64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755823492997_4195988c_1_0, from-node: $L_8755823492997_4195988c_1) isa node-link; 

match
$L_8755823492997_4195988c_1 isa list, has hash "L_8755823492997_4195988c_1"; 

insert
$N_8755823492997_4195988c_1_1 isa variable-ssa, has hash "N_8755823492997_4195988c_1_1", has var "rdx_1", has version 2, has edge-label "1", has var-type "int64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755823492997_4195988c_1_1, from-node: $L_8755823492997_4195988c_1) isa node-link; 

match
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 8, has bb-end 14; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827779845_4195988c isa instruction, has hash "N_8755827779845_4195988c", has il-index 13, has asm-address "0x400694", has operation-type "MLIL_MEM_PHI", has ins-text "mem#4 = ϕ(mem#1, mem#3)";
(contains-instruction: $N_8755827779845_4195988c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827779845_4195988c isa instruction, has hash "N_8755827779845_4195988c"; 

insert
$N_8755827779845_4195988c_0 isa constant, has hash "N_8755827779845_4195988c_0", has constant-value "4", has edge-label "dest_memory";
(to-node: $N_8755827779845_4195988c_0, from-node: $N_8755827779845_4195988c) isa node-link; 

match
$N_8755827779845_4195988c isa instruction, has hash "N_8755827779845_4195988c"; 

insert
$L_8755827779845_4195988c_1 isa list, has hash "L_8755827779845_4195988c_1", has list-size 2, has edge-label "src_memory";
(to-node: $L_8755827779845_4195988c_1, from-node: $N_8755827779845_4195988c) isa node-link; 

match
$L_8755827779845_4195988c_1 isa list, has hash "L_8755827779845_4195988c_1"; 

insert
$N_8755827779845_4195988c_1_0 isa constant, has hash "N_8755827779845_4195988c_1_0", has constant-value "1", has edge-label "0";
(to-node: $N_8755827779845_4195988c_1_0, from-node: $L_8755827779845_4195988c_1) isa node-link; 

match
$L_8755827779845_4195988c_1 isa list, has hash "L_8755827779845_4195988c_1"; 

insert
$N_8755827779845_4195988c_1_1 isa constant, has hash "N_8755827779845_4195988c_1_1", has constant-value "3", has edge-label "1";
(to-node: $N_8755827779845_4195988c_1_1, from-node: $L_8755827779845_4195988c_1) isa node-link; 

match
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 8, has bb-end 14; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827807493_4195988c isa instruction, has hash "N_8755827807493_4195988c", has il-index 11, has asm-address "0x400694", has operation-type "MLIL_VAR_PHI", has ins-text "rsi_1#3 = ϕ(rsi#0, rsi_1#2)";
(contains-instruction: $N_8755827807493_4195988c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827807493_4195988c isa instruction, has hash "N_8755827807493_4195988c"; 

insert
$N_8755827807493_4195988c_0 isa variable-ssa, has hash "N_8755827807493_4195988c_0", has var "rsi_1", has version 3, has edge-label "dest", has var-type "int64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827807493_4195988c_0, from-node: $N_8755827807493_4195988c) isa node-link; 

match
$N_8755827807493_4195988c isa instruction, has hash "N_8755827807493_4195988c"; 

insert
$L_8755827807493_4195988c_1 isa list, has hash "L_8755827807493_4195988c_1", has list-size 2, has edge-label "src";
(to-node: $L_8755827807493_4195988c_1, from-node: $N_8755827807493_4195988c) isa node-link; 

match
$L_8755827807493_4195988c_1 isa list, has hash "L_8755827807493_4195988c_1"; 

insert
$N_8755827807493_4195988c_1_0 isa variable-ssa, has hash "N_8755827807493_4195988c_1_0", has var "rsi", has version 0, has edge-label "0", has var-type "int64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827807493_4195988c_1_0, from-node: $L_8755827807493_4195988c_1) isa node-link; 

match
$L_8755827807493_4195988c_1 isa list, has hash "L_8755827807493_4195988c_1"; 

insert
$N_8755827807493_4195988c_1_1 isa variable-ssa, has hash "N_8755827807493_4195988c_1_1", has var "rsi_1", has version 2, has edge-label "1", has var-type "int64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827807493_4195988c_1_1, from-node: $L_8755827807493_4195988c_1) isa node-link; 

match
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 8, has bb-end 14; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827863813_4195988c isa instruction, has hash "N_8755827863813_4195988c", has il-index 10, has asm-address "0x400694", has operation-type "MLIL_VAR_PHI", has ins-text "rbx_1#4 = ϕ(rbx#0, rbx_1#3)";
(contains-instruction: $N_8755827863813_4195988c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827863813_4195988c isa instruction, has hash "N_8755827863813_4195988c"; 

insert
$N_8755827863813_4195988c_0 isa variable-ssa, has hash "N_8755827863813_4195988c_0", has var "rbx_1", has version 4, has edge-label "dest", has var-type "int64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827863813_4195988c_0, from-node: $N_8755827863813_4195988c) isa node-link; 

match
$N_8755827863813_4195988c isa instruction, has hash "N_8755827863813_4195988c"; 

insert
$L_8755827863813_4195988c_1 isa list, has hash "L_8755827863813_4195988c_1", has list-size 2, has edge-label "src";
(to-node: $L_8755827863813_4195988c_1, from-node: $N_8755827863813_4195988c) isa node-link; 

match
$L_8755827863813_4195988c_1 isa list, has hash "L_8755827863813_4195988c_1"; 

insert
$N_8755827863813_4195988c_1_0 isa variable-ssa, has hash "N_8755827863813_4195988c_1_0", has var "rbx", has version 0, has edge-label "0", has var-type "int64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827863813_4195988c_1_0, from-node: $L_8755827863813_4195988c_1) isa node-link; 

match
$L_8755827863813_4195988c_1 isa list, has hash "L_8755827863813_4195988c_1"; 

insert
$N_8755827863813_4195988c_1_1 isa variable-ssa, has hash "N_8755827863813_4195988c_1_1", has var "rbx_1", has version 3, has edge-label "1", has var-type "int64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827863813_4195988c_1_1, from-node: $L_8755827863813_4195988c_1) isa node-link; 

match
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 8, has bb-end 14; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827880453_4195988c isa instruction, has hash "N_8755827880453_4195988c", has il-index 12, has asm-address "0x400694", has operation-type "MLIL_VAR_PHI", has ins-text "rdi_1#3 = ϕ(rdi#0, rdi_1#2)";
(contains-instruction: $N_8755827880453_4195988c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827880453_4195988c isa instruction, has hash "N_8755827880453_4195988c"; 

insert
$N_8755827880453_4195988c_0 isa variable-ssa, has hash "N_8755827880453_4195988c_0", has var "rdi_1", has version 3, has edge-label "dest", has var-type "uint64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827880453_4195988c_0, from-node: $N_8755827880453_4195988c) isa node-link; 

match
$N_8755827880453_4195988c isa instruction, has hash "N_8755827880453_4195988c"; 

insert
$L_8755827880453_4195988c_1 isa list, has hash "L_8755827880453_4195988c_1", has list-size 2, has edge-label "src";
(to-node: $L_8755827880453_4195988c_1, from-node: $N_8755827880453_4195988c) isa node-link; 

match
$L_8755827880453_4195988c_1 isa list, has hash "L_8755827880453_4195988c_1"; 

insert
$N_8755827880453_4195988c_1_0 isa variable-ssa, has hash "N_8755827880453_4195988c_1_0", has var "rdi", has version 0, has edge-label "0", has var-type "int32_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827880453_4195988c_1_0, from-node: $L_8755827880453_4195988c_1) isa node-link; 

match
$L_8755827880453_4195988c_1 isa list, has hash "L_8755827880453_4195988c_1"; 

insert
$N_8755827880453_4195988c_1_1 isa variable-ssa, has hash "N_8755827880453_4195988c_1_1", has var "rdi_1", has version 2, has edge-label "1", has var-type "uint64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827880453_4195988c_1_1, from-node: $L_8755827880453_4195988c_1) isa node-link; 

match
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 8, has bb-end 14; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827909517_4195988c isa instruction, has hash "N_8755827909517_4195988c", has il-index 14, has asm-address "0x400694", has operation-type "MLIL_RET", has ins-text "return ";
(contains-instruction: $N_8755827909517_4195988c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827909517_4195988c isa instruction, has hash "N_8755827909517_4195988c"; 

insert
$L_8755827909517_4195988c_0 isa list, has hash "L_8755827909517_4195988c_0", has list-size 0, has edge-label "src";
(to-node: $L_8755827909517_4195988c_0, from-node: $N_8755827909517_4195988c) isa node-link; 

match 
$func___libc_csu_init isa function, has name "__libc_csu_init"; 

insert 
$bb isa basic-block, has bb-start 15, has bb-end 26; 
(contains-basic-block: $bb, in-function: $func___libc_csu_init) isa has-basic-block; 

match 
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 15, has bb-end 26; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

match
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 15, has bb-end 26; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755823498757_4195952c isa instruction, has hash "N_8755823498757_4195952c", has il-index 19, has asm-address "0x400670", has operation-type "MLIL_VAR_PHI", has ins-text "rdi_1#1 = ϕ(rdi#0, rdi_1#2)";
(contains-instruction: $N_8755823498757_4195952c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755823498757_4195952c isa instruction, has hash "N_8755823498757_4195952c"; 

insert
$N_8755823498757_4195952c_0 isa variable-ssa, has hash "N_8755823498757_4195952c_0", has var "rdi_1", has version 1, has edge-label "dest", has var-type "uint64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755823498757_4195952c_0, from-node: $N_8755823498757_4195952c) isa node-link; 

match
$N_8755823498757_4195952c isa instruction, has hash "N_8755823498757_4195952c"; 

insert
$L_8755823498757_4195952c_1 isa list, has hash "L_8755823498757_4195952c_1", has list-size 2, has edge-label "src";
(to-node: $L_8755823498757_4195952c_1, from-node: $N_8755823498757_4195952c) isa node-link; 

match
$L_8755823498757_4195952c_1 isa list, has hash "L_8755823498757_4195952c_1"; 

insert
$N_8755823498757_4195952c_1_0 isa variable-ssa, has hash "N_8755823498757_4195952c_1_0", has var "rdi", has version 0, has edge-label "0", has var-type "int32_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755823498757_4195952c_1_0, from-node: $L_8755823498757_4195952c_1) isa node-link; 

match
$L_8755823498757_4195952c_1 isa list, has hash "L_8755823498757_4195952c_1"; 

insert
$N_8755823498757_4195952c_1_1 isa variable-ssa, has hash "N_8755823498757_4195952c_1_1", has var "rdi_1", has version 2, has edge-label "1", has var-type "uint64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755823498757_4195952c_1_1, from-node: $L_8755823498757_4195952c_1) isa node-link; 

match
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 15, has bb-end 26; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827727745_4195952c isa instruction, has hash "N_8755827727745_4195952c", has il-index 15, has asm-address "0x400670", has operation-type "MLIL_VAR_PHI", has ins-text "rax#2 = ϕ(rax#1, rax#3)";
(contains-instruction: $N_8755827727745_4195952c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827727745_4195952c isa instruction, has hash "N_8755827727745_4195952c"; 

insert
$N_8755827727745_4195952c_0 isa variable-ssa, has hash "N_8755827727745_4195952c_0", has var "rax", has version 2, has edge-label "dest", has var-type "void*", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827727745_4195952c_0, from-node: $N_8755827727745_4195952c) isa node-link; 

match
$N_8755827727745_4195952c isa instruction, has hash "N_8755827727745_4195952c"; 

insert
$L_8755827727745_4195952c_1 isa list, has hash "L_8755827727745_4195952c_1", has list-size 2, has edge-label "src";
(to-node: $L_8755827727745_4195952c_1, from-node: $N_8755827727745_4195952c) isa node-link; 

match
$L_8755827727745_4195952c_1 isa list, has hash "L_8755827727745_4195952c_1"; 

insert
$N_8755827727745_4195952c_1_0 isa variable-ssa, has hash "N_8755827727745_4195952c_1_0", has var "rax", has version 1, has edge-label "0", has var-type "void*", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827727745_4195952c_1_0, from-node: $L_8755827727745_4195952c_1) isa node-link; 

match
$L_8755827727745_4195952c_1 isa list, has hash "L_8755827727745_4195952c_1"; 

insert
$N_8755827727745_4195952c_1_1 isa variable-ssa, has hash "N_8755827727745_4195952c_1_1", has var "rax", has version 3, has edge-label "1", has var-type "void*", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827727745_4195952c_1_1, from-node: $L_8755827727745_4195952c_1) isa node-link; 

match
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 15, has bb-end 26; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827744641_4195952c isa instruction, has hash "N_8755827744641_4195952c", has il-index 16, has asm-address "0x400670", has operation-type "MLIL_VAR_PHI", has ins-text "rdx_1#1 = ϕ(rdx#0, rdx_1#2)";
(contains-instruction: $N_8755827744641_4195952c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827744641_4195952c isa instruction, has hash "N_8755827744641_4195952c"; 

insert
$N_8755827744641_4195952c_0 isa variable-ssa, has hash "N_8755827744641_4195952c_0", has var "rdx_1", has version 1, has edge-label "dest", has var-type "int64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827744641_4195952c_0, from-node: $N_8755827744641_4195952c) isa node-link; 

match
$N_8755827744641_4195952c isa instruction, has hash "N_8755827744641_4195952c"; 

insert
$L_8755827744641_4195952c_1 isa list, has hash "L_8755827744641_4195952c_1", has list-size 2, has edge-label "src";
(to-node: $L_8755827744641_4195952c_1, from-node: $N_8755827744641_4195952c) isa node-link; 

match
$L_8755827744641_4195952c_1 isa list, has hash "L_8755827744641_4195952c_1"; 

insert
$N_8755827744641_4195952c_1_0 isa variable-ssa, has hash "N_8755827744641_4195952c_1_0", has var "rdx", has version 0, has edge-label "0", has var-type "int64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827744641_4195952c_1_0, from-node: $L_8755827744641_4195952c_1) isa node-link; 

match
$L_8755827744641_4195952c_1 isa list, has hash "L_8755827744641_4195952c_1"; 

insert
$N_8755827744641_4195952c_1_1 isa variable-ssa, has hash "N_8755827744641_4195952c_1_1", has var "rdx_1", has version 2, has edge-label "1", has var-type "int64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827744641_4195952c_1_1, from-node: $L_8755827744641_4195952c_1) isa node-link; 

match
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 15, has bb-end 26; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827768977_4195952c isa instruction, has hash "N_8755827768977_4195952c", has il-index 21, has asm-address "0x400670", has operation-type "MLIL_SET_VAR_SSA", has ins-text "rdx_1#2 = r13#1";
(contains-instruction: $N_8755827768977_4195952c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827768977_4195952c isa instruction, has hash "N_8755827768977_4195952c"; 

insert
$N_8755827768977_4195952c_0 isa variable-ssa, has hash "N_8755827768977_4195952c_0", has var "rdx_1", has version 2, has edge-label "dest", has var-type "int64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827768977_4195952c_0, from-node: $N_8755827768977_4195952c) isa node-link; 

match
$N_8755827768977_4195952c isa instruction, has hash "N_8755827768977_4195952c"; 

insert
$N_8755827768977_4195952c_1 isa MLIL_VAR_SSA, has hash "N_8755827768977_4195952c_1", has edge-label "src";
(to-node: $N_8755827768977_4195952c_1, from-node: $N_8755827768977_4195952c) isa node-link; 

match
$N_8755827768977_4195952c_1 isa operation, has hash "N_8755827768977_4195952c_1"; 

insert
$N_8755827768977_4195952c_1_0 isa variable-ssa, has hash "N_8755827768977_4195952c_1_0", has var "r13", has version 1, has edge-label "src", has var-type "int64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827768977_4195952c_1_0, from-node: $N_8755827768977_4195952c_1) isa node-link; 

match
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 15, has bb-end 26; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827838469_4195952c isa instruction, has hash "N_8755827838469_4195952c", has il-index 20, has asm-address "0x400670", has operation-type "MLIL_MEM_PHI", has ins-text "mem#2 = ϕ(mem#1, mem#3)";
(contains-instruction: $N_8755827838469_4195952c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827838469_4195952c isa instruction, has hash "N_8755827838469_4195952c"; 

insert
$N_8755827838469_4195952c_0 isa constant, has hash "N_8755827838469_4195952c_0", has constant-value "2", has edge-label "dest_memory";
(to-node: $N_8755827838469_4195952c_0, from-node: $N_8755827838469_4195952c) isa node-link; 

match
$N_8755827838469_4195952c isa instruction, has hash "N_8755827838469_4195952c"; 

insert
$L_8755827838469_4195952c_1 isa list, has hash "L_8755827838469_4195952c_1", has list-size 2, has edge-label "src_memory";
(to-node: $L_8755827838469_4195952c_1, from-node: $N_8755827838469_4195952c) isa node-link; 

match
$L_8755827838469_4195952c_1 isa list, has hash "L_8755827838469_4195952c_1"; 

insert
$N_8755827838469_4195952c_1_0 isa constant, has hash "N_8755827838469_4195952c_1_0", has constant-value "1", has edge-label "0";
(to-node: $N_8755827838469_4195952c_1_0, from-node: $L_8755827838469_4195952c_1) isa node-link; 

match
$L_8755827838469_4195952c_1 isa list, has hash "L_8755827838469_4195952c_1"; 

insert
$N_8755827838469_4195952c_1_1 isa constant, has hash "N_8755827838469_4195952c_1_1", has constant-value "3", has edge-label "1";
(to-node: $N_8755827838469_4195952c_1_1, from-node: $L_8755827838469_4195952c_1) isa node-link; 

match
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 15, has bb-end 26; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827873029_4195952c isa instruction, has hash "N_8755827873029_4195952c", has il-index 18, has asm-address "0x400670", has operation-type "MLIL_VAR_PHI", has ins-text "rsi_1#1 = ϕ(rsi#0, rsi_1#2)";
(contains-instruction: $N_8755827873029_4195952c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827873029_4195952c isa instruction, has hash "N_8755827873029_4195952c"; 

insert
$N_8755827873029_4195952c_0 isa variable-ssa, has hash "N_8755827873029_4195952c_0", has var "rsi_1", has version 1, has edge-label "dest", has var-type "int64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827873029_4195952c_0, from-node: $N_8755827873029_4195952c) isa node-link; 

match
$N_8755827873029_4195952c isa instruction, has hash "N_8755827873029_4195952c"; 

insert
$L_8755827873029_4195952c_1 isa list, has hash "L_8755827873029_4195952c_1", has list-size 2, has edge-label "src";
(to-node: $L_8755827873029_4195952c_1, from-node: $N_8755827873029_4195952c) isa node-link; 

match
$L_8755827873029_4195952c_1 isa list, has hash "L_8755827873029_4195952c_1"; 

insert
$N_8755827873029_4195952c_1_0 isa variable-ssa, has hash "N_8755827873029_4195952c_1_0", has var "rsi", has version 0, has edge-label "0", has var-type "int64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827873029_4195952c_1_0, from-node: $L_8755827873029_4195952c_1) isa node-link; 

match
$L_8755827873029_4195952c_1 isa list, has hash "L_8755827873029_4195952c_1"; 

insert
$N_8755827873029_4195952c_1_1 isa variable-ssa, has hash "N_8755827873029_4195952c_1_1", has var "rsi_1", has version 2, has edge-label "1", has var-type "int64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827873029_4195952c_1_1, from-node: $L_8755827873029_4195952c_1) isa node-link; 

match
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 15, has bb-end 26; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827898629_4195952c isa instruction, has hash "N_8755827898629_4195952c", has il-index 17, has asm-address "0x400670", has operation-type "MLIL_VAR_PHI", has ins-text "rbx_1#2 = ϕ(rbx_1#1, rbx_1#3)";
(contains-instruction: $N_8755827898629_4195952c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827898629_4195952c isa instruction, has hash "N_8755827898629_4195952c"; 

insert
$N_8755827898629_4195952c_0 isa variable-ssa, has hash "N_8755827898629_4195952c_0", has var "rbx_1", has version 2, has edge-label "dest", has var-type "int64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827898629_4195952c_0, from-node: $N_8755827898629_4195952c) isa node-link; 

match
$N_8755827898629_4195952c isa instruction, has hash "N_8755827898629_4195952c"; 

insert
$L_8755827898629_4195952c_1 isa list, has hash "L_8755827898629_4195952c_1", has list-size 2, has edge-label "src";
(to-node: $L_8755827898629_4195952c_1, from-node: $N_8755827898629_4195952c) isa node-link; 

match
$L_8755827898629_4195952c_1 isa list, has hash "L_8755827898629_4195952c_1"; 

insert
$N_8755827898629_4195952c_1_0 isa variable-ssa, has hash "N_8755827898629_4195952c_1_0", has var "rbx_1", has version 1, has edge-label "0", has var-type "int64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827898629_4195952c_1_0, from-node: $L_8755827898629_4195952c_1) isa node-link; 

match
$L_8755827898629_4195952c_1 isa list, has hash "L_8755827898629_4195952c_1"; 

insert
$N_8755827898629_4195952c_1_1 isa variable-ssa, has hash "N_8755827898629_4195952c_1_1", has var "rbx_1", has version 3, has edge-label "1", has var-type "int64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827898629_4195952c_1_1, from-node: $L_8755827898629_4195952c_1) isa node-link; 

match 
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 15, has bb-end 26; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

match
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 15, has bb-end 26; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755823480325_4195955c isa instruction, has hash "N_8755823480325_4195955c", has il-index 22, has asm-address "0x400673", has operation-type "MLIL_SET_VAR_SSA", has ins-text "rsi_1#2 = r14#1";
(contains-instruction: $N_8755823480325_4195955c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755823480325_4195955c isa instruction, has hash "N_8755823480325_4195955c"; 

insert
$N_8755823480325_4195955c_0 isa variable-ssa, has hash "N_8755823480325_4195955c_0", has var "rsi_1", has version 2, has edge-label "dest", has var-type "int64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755823480325_4195955c_0, from-node: $N_8755823480325_4195955c) isa node-link; 

match
$N_8755823480325_4195955c isa instruction, has hash "N_8755823480325_4195955c"; 

insert
$N_8755823480325_4195955c_1 isa MLIL_VAR_SSA, has hash "N_8755823480325_4195955c_1", has edge-label "src";
(to-node: $N_8755823480325_4195955c_1, from-node: $N_8755823480325_4195955c) isa node-link; 

match
$N_8755823480325_4195955c_1 isa operation, has hash "N_8755823480325_4195955c_1"; 

insert
$N_8755823480325_4195955c_1_0 isa variable-ssa, has hash "N_8755823480325_4195955c_1_0", has var "r14", has version 1, has edge-label "src", has var-type "int64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755823480325_4195955c_1_0, from-node: $N_8755823480325_4195955c_1) isa node-link; 

match 
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 15, has bb-end 26; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

match
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 15, has bb-end 26; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827879685_4195958c isa instruction, has hash "N_8755827879685_4195958c", has il-index 23, has asm-address "0x400676", has operation-type "MLIL_SET_VAR_SSA", has ins-text "rdi_1#2 = zx.q(r15#1.r15d)";
(contains-instruction: $N_8755827879685_4195958c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827879685_4195958c isa instruction, has hash "N_8755827879685_4195958c"; 

insert
$N_8755827879685_4195958c_0 isa variable-ssa, has hash "N_8755827879685_4195958c_0", has var "rdi_1", has version 2, has edge-label "dest", has var-type "uint64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827879685_4195958c_0, from-node: $N_8755827879685_4195958c) isa node-link; 

match
$N_8755827879685_4195958c isa instruction, has hash "N_8755827879685_4195958c"; 

insert
$N_8755827879685_4195958c_1 isa MLIL_ZX, has hash "N_8755827879685_4195958c_1", has edge-label "src";
(to-node: $N_8755827879685_4195958c_1, from-node: $N_8755827879685_4195958c) isa node-link; 

match
$N_8755827879685_4195958c_1 isa operation, has hash "N_8755827879685_4195958c_1"; 

insert
$N_8755827879685_4195958c_1_0 isa MLIL_VAR_SSA_FIELD, has hash "N_8755827879685_4195958c_1_0", has edge-label "src";
(to-node: $N_8755827879685_4195958c_1_0, from-node: $N_8755827879685_4195958c_1) isa node-link; 

match
$N_8755827879685_4195958c_1_0 isa operation, has hash "N_8755827879685_4195958c_1_0"; 

insert
$N_8755827879685_4195958c_1_0_0 isa variable-ssa, has hash "N_8755827879685_4195958c_1_0_0", has var "r15", has version 1, has edge-label "src", has var-type "uint64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827879685_4195958c_1_0_0, from-node: $N_8755827879685_4195958c_1_0) isa node-link; 

match
$N_8755827879685_4195958c_1_0 isa operation, has hash "N_8755827879685_4195958c_1_0"; 

insert
$N_8755827879685_4195958c_1_0_1 isa constant, has hash "N_8755827879685_4195958c_1_0_1", has constant-value "0", has edge-label "offset";
(to-node: $N_8755827879685_4195958c_1_0_1, from-node: $N_8755827879685_4195958c_1_0) isa node-link; 

match 
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 15, has bb-end 26; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

match
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 15, has bb-end 26; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827912269_4195961c isa instruction, has hash "N_8755827912269_4195961c", has il-index 24, has asm-address "0x400679", has operation-type "MLIL_CALL_SSA", has ins-text "rax#3, mem#3 = [0x600e10 + (rbx_1#2 << 3)].q @ mem#2(rdi_1#2, rsi_1#2, rdx_1#2) @ mem#2";
(contains-instruction: $N_8755827912269_4195961c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827912269_4195961c isa instruction, has hash "N_8755827912269_4195961c"; 

insert
$N_8755827912269_4195961c_0 isa MLIL_CALL_OUTPUT_SSA, has hash "N_8755827912269_4195961c_0", has edge-label "output";
(to-node: $N_8755827912269_4195961c_0, from-node: $N_8755827912269_4195961c) isa node-link; 

match
$N_8755827912269_4195961c_0 isa operation, has hash "N_8755827912269_4195961c_0"; 

insert
$N_8755827912269_4195961c_0_0 isa constant, has hash "N_8755827912269_4195961c_0_0", has constant-value "3", has edge-label "dest_memory";
(to-node: $N_8755827912269_4195961c_0_0, from-node: $N_8755827912269_4195961c_0) isa node-link; 

match
$N_8755827912269_4195961c_0 isa operation, has hash "N_8755827912269_4195961c_0"; 

insert
$L_8755827912269_4195961c_0_1 isa list, has hash "L_8755827912269_4195961c_0_1", has list-size 1, has edge-label "dest";
(to-node: $L_8755827912269_4195961c_0_1, from-node: $N_8755827912269_4195961c_0) isa node-link; 

match
$L_8755827912269_4195961c_0_1 isa list, has hash "L_8755827912269_4195961c_0_1"; 

insert
$N_8755827912269_4195961c_0_1_0 isa variable-ssa, has hash "N_8755827912269_4195961c_0_1_0", has var "rax", has version 3, has edge-label "0", has var-type "void*", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827912269_4195961c_0_1_0, from-node: $L_8755827912269_4195961c_0_1) isa node-link; 

match
$N_8755827912269_4195961c isa instruction, has hash "N_8755827912269_4195961c"; 

insert
$N_8755827912269_4195961c_1 isa MLIL_LOAD_SSA, has hash "N_8755827912269_4195961c_1", has edge-label "dest";
(to-node: $N_8755827912269_4195961c_1, from-node: $N_8755827912269_4195961c) isa node-link; 

match
$N_8755827912269_4195961c_1 isa operation, has hash "N_8755827912269_4195961c_1"; 

insert
$N_8755827912269_4195961c_1_0 isa MLIL_ADD, has hash "N_8755827912269_4195961c_1_0", has edge-label "src";
(to-node: $N_8755827912269_4195961c_1_0, from-node: $N_8755827912269_4195961c_1) isa node-link; 

match
$N_8755827912269_4195961c_1_0 isa operation, has hash "N_8755827912269_4195961c_1_0"; 

insert
$N_8755827912269_4195961c_1_0_0 isa MLIL_CONST_PTR, has hash "N_8755827912269_4195961c_1_0_0", has edge-label "left";
(to-node: $N_8755827912269_4195961c_1_0_0, from-node: $N_8755827912269_4195961c_1_0) isa node-link; 

match
$N_8755827912269_4195961c_1_0_0 isa operation, has hash "N_8755827912269_4195961c_1_0_0"; 

insert
$N_8755827912269_4195961c_1_0_0_0 isa constant, has hash "N_8755827912269_4195961c_1_0_0_0", has constant-value "6295056", has edge-label "constant";
(to-node: $N_8755827912269_4195961c_1_0_0_0, from-node: $N_8755827912269_4195961c_1_0_0) isa node-link; 

match
$N_8755827912269_4195961c_1_0 isa operation, has hash "N_8755827912269_4195961c_1_0"; 

insert
$N_8755827912269_4195961c_1_0_1 isa MLIL_LSL, has hash "N_8755827912269_4195961c_1_0_1", has edge-label "right";
(to-node: $N_8755827912269_4195961c_1_0_1, from-node: $N_8755827912269_4195961c_1_0) isa node-link; 

match
$N_8755827912269_4195961c_1_0_1 isa operation, has hash "N_8755827912269_4195961c_1_0_1"; 

insert
$N_8755827912269_4195961c_1_0_1_0 isa MLIL_VAR_SSA, has hash "N_8755827912269_4195961c_1_0_1_0", has edge-label "left";
(to-node: $N_8755827912269_4195961c_1_0_1_0, from-node: $N_8755827912269_4195961c_1_0_1) isa node-link; 

match
$N_8755827912269_4195961c_1_0_1_0 isa operation, has hash "N_8755827912269_4195961c_1_0_1_0"; 

insert
$N_8755827912269_4195961c_1_0_1_0_0 isa variable-ssa, has hash "N_8755827912269_4195961c_1_0_1_0_0", has var "rbx_1", has version 2, has edge-label "src", has var-type "int64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827912269_4195961c_1_0_1_0_0, from-node: $N_8755827912269_4195961c_1_0_1_0) isa node-link; 

match
$N_8755827912269_4195961c_1_0_1 isa operation, has hash "N_8755827912269_4195961c_1_0_1"; 

insert
$N_8755827912269_4195961c_1_0_1_1 isa MLIL_CONST, has hash "N_8755827912269_4195961c_1_0_1_1", has edge-label "right";
(to-node: $N_8755827912269_4195961c_1_0_1_1, from-node: $N_8755827912269_4195961c_1_0_1) isa node-link; 

match
$N_8755827912269_4195961c_1_0_1_1 isa operation, has hash "N_8755827912269_4195961c_1_0_1_1"; 

insert
$N_8755827912269_4195961c_1_0_1_1_0 isa constant, has hash "N_8755827912269_4195961c_1_0_1_1_0", has constant-value "3", has edge-label "constant";
(to-node: $N_8755827912269_4195961c_1_0_1_1_0, from-node: $N_8755827912269_4195961c_1_0_1_1) isa node-link; 

match
$N_8755827912269_4195961c_1 isa operation, has hash "N_8755827912269_4195961c_1"; 

insert
$N_8755827912269_4195961c_1_1 isa constant, has hash "N_8755827912269_4195961c_1_1", has constant-value "2", has edge-label "src_memory";
(to-node: $N_8755827912269_4195961c_1_1, from-node: $N_8755827912269_4195961c_1) isa node-link; 

match
$N_8755827912269_4195961c isa instruction, has hash "N_8755827912269_4195961c"; 

insert
$L_8755827912269_4195961c_2 isa list, has hash "L_8755827912269_4195961c_2", has list-size 3, has edge-label "params";
(to-node: $L_8755827912269_4195961c_2, from-node: $N_8755827912269_4195961c) isa node-link; 

match
$L_8755827912269_4195961c_2 isa list, has hash "L_8755827912269_4195961c_2"; 

insert
$N_8755827912269_4195961c_2_0 isa MLIL_VAR_SSA, has hash "N_8755827912269_4195961c_2_0", has edge-label "0";
(to-node: $N_8755827912269_4195961c_2_0, from-node: $L_8755827912269_4195961c_2) isa node-link; 

match
$N_8755827912269_4195961c_2_0 isa operation, has hash "N_8755827912269_4195961c_2_0"; 

insert
$N_8755827912269_4195961c_2_0_0 isa variable-ssa, has hash "N_8755827912269_4195961c_2_0_0", has var "rdi_1", has version 2, has edge-label "src", has var-type "uint64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827912269_4195961c_2_0_0, from-node: $N_8755827912269_4195961c_2_0) isa node-link; 

match
$L_8755827912269_4195961c_2 isa list, has hash "L_8755827912269_4195961c_2"; 

insert
$N_8755827912269_4195961c_2_1 isa MLIL_VAR_SSA, has hash "N_8755827912269_4195961c_2_1", has edge-label "1";
(to-node: $N_8755827912269_4195961c_2_1, from-node: $L_8755827912269_4195961c_2) isa node-link; 

match
$N_8755827912269_4195961c_2_1 isa operation, has hash "N_8755827912269_4195961c_2_1"; 

insert
$N_8755827912269_4195961c_2_1_0 isa variable-ssa, has hash "N_8755827912269_4195961c_2_1_0", has var "rsi_1", has version 2, has edge-label "src", has var-type "int64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827912269_4195961c_2_1_0, from-node: $N_8755827912269_4195961c_2_1) isa node-link; 

match
$L_8755827912269_4195961c_2 isa list, has hash "L_8755827912269_4195961c_2"; 

insert
$N_8755827912269_4195961c_2_2 isa MLIL_VAR_SSA, has hash "N_8755827912269_4195961c_2_2", has edge-label "2";
(to-node: $N_8755827912269_4195961c_2_2, from-node: $L_8755827912269_4195961c_2) isa node-link; 

match
$N_8755827912269_4195961c_2_2 isa operation, has hash "N_8755827912269_4195961c_2_2"; 

insert
$N_8755827912269_4195961c_2_2_0 isa variable-ssa, has hash "N_8755827912269_4195961c_2_2_0", has var "rdx_1", has version 2, has edge-label "src", has var-type "int64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827912269_4195961c_2_2_0, from-node: $N_8755827912269_4195961c_2_2) isa node-link; 

match
$N_8755827912269_4195961c isa instruction, has hash "N_8755827912269_4195961c"; 

insert
$N_8755827912269_4195961c_3 isa constant, has hash "N_8755827912269_4195961c_3", has constant-value "2", has edge-label "src_memory";
(to-node: $N_8755827912269_4195961c_3, from-node: $N_8755827912269_4195961c) isa node-link; 

match 
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 15, has bb-end 26; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

match
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 15, has bb-end 26; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827857661_4195965c isa instruction, has hash "N_8755827857661_4195965c", has il-index 25, has asm-address "0x40067d", has operation-type "MLIL_SET_VAR_SSA", has ins-text "rbx_1#3 = rbx_1#2 + 1";
(contains-instruction: $N_8755827857661_4195965c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827857661_4195965c isa instruction, has hash "N_8755827857661_4195965c"; 

insert
$N_8755827857661_4195965c_0 isa variable-ssa, has hash "N_8755827857661_4195965c_0", has var "rbx_1", has version 3, has edge-label "dest", has var-type "int64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827857661_4195965c_0, from-node: $N_8755827857661_4195965c) isa node-link; 

match
$N_8755827857661_4195965c isa instruction, has hash "N_8755827857661_4195965c"; 

insert
$N_8755827857661_4195965c_1 isa MLIL_ADD, has hash "N_8755827857661_4195965c_1", has edge-label "src";
(to-node: $N_8755827857661_4195965c_1, from-node: $N_8755827857661_4195965c) isa node-link; 

match
$N_8755827857661_4195965c_1 isa operation, has hash "N_8755827857661_4195965c_1"; 

insert
$N_8755827857661_4195965c_1_0 isa MLIL_VAR_SSA, has hash "N_8755827857661_4195965c_1_0", has edge-label "left";
(to-node: $N_8755827857661_4195965c_1_0, from-node: $N_8755827857661_4195965c_1) isa node-link; 

match
$N_8755827857661_4195965c_1_0 isa operation, has hash "N_8755827857661_4195965c_1_0"; 

insert
$N_8755827857661_4195965c_1_0_0 isa variable-ssa, has hash "N_8755827857661_4195965c_1_0_0", has var "rbx_1", has version 2, has edge-label "src", has var-type "int64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827857661_4195965c_1_0_0, from-node: $N_8755827857661_4195965c_1_0) isa node-link; 

match
$N_8755827857661_4195965c_1 isa operation, has hash "N_8755827857661_4195965c_1"; 

insert
$N_8755827857661_4195965c_1_1 isa MLIL_CONST, has hash "N_8755827857661_4195965c_1_1", has edge-label "right";
(to-node: $N_8755827857661_4195965c_1_1, from-node: $N_8755827857661_4195965c_1) isa node-link; 

match
$N_8755827857661_4195965c_1_1 isa operation, has hash "N_8755827857661_4195965c_1_1"; 

insert
$N_8755827857661_4195965c_1_1_0 isa constant, has hash "N_8755827857661_4195965c_1_1_0", has constant-value "1", has edge-label "constant";
(to-node: $N_8755827857661_4195965c_1_1_0, from-node: $N_8755827857661_4195965c_1_1) isa node-link; 

match 
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 15, has bb-end 26; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

match
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$bb isa basic-block, has bb-start 15, has bb-end 26; 
(in-function: $func___libc_csu_init, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827880965_4195972c isa instruction, has hash "N_8755827880965_4195972c", has il-index 26, has asm-address "0x400684", has operation-type "MLIL_IF", has ins-text "if (rbx_1#3 != 1) then 27 @ 0x0 else 28 @ 0x0";
(contains-instruction: $N_8755827880965_4195972c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827880965_4195972c isa instruction, has hash "N_8755827880965_4195972c"; 

insert
$N_8755827880965_4195972c_0 isa MLIL_CMP_NE, has hash "N_8755827880965_4195972c_0", has edge-label "condition";
(to-node: $N_8755827880965_4195972c_0, from-node: $N_8755827880965_4195972c) isa node-link; 

match
$N_8755827880965_4195972c_0 isa operation, has hash "N_8755827880965_4195972c_0"; 

insert
$N_8755827880965_4195972c_0_0 isa MLIL_VAR_SSA, has hash "N_8755827880965_4195972c_0_0", has edge-label "left";
(to-node: $N_8755827880965_4195972c_0_0, from-node: $N_8755827880965_4195972c_0) isa node-link; 

match
$N_8755827880965_4195972c_0_0 isa operation, has hash "N_8755827880965_4195972c_0_0"; 

insert
$N_8755827880965_4195972c_0_0_0 isa variable-ssa, has hash "N_8755827880965_4195972c_0_0_0", has var "rbx_1", has version 3, has edge-label "src", has var-type "int64_t", has var-size 4, has var-func "__libc_csu_init";
(to-node: $N_8755827880965_4195972c_0_0_0, from-node: $N_8755827880965_4195972c_0_0) isa node-link; 

match
$N_8755827880965_4195972c_0 isa operation, has hash "N_8755827880965_4195972c_0"; 

insert
$N_8755827880965_4195972c_0_1 isa MLIL_CONST, has hash "N_8755827880965_4195972c_0_1", has edge-label "right";
(to-node: $N_8755827880965_4195972c_0_1, from-node: $N_8755827880965_4195972c_0) isa node-link; 

match
$N_8755827880965_4195972c_0_1 isa operation, has hash "N_8755827880965_4195972c_0_1"; 

insert
$N_8755827880965_4195972c_0_1_0 isa constant, has hash "N_8755827880965_4195972c_0_1_0", has constant-value "1", has edge-label "constant";
(to-node: $N_8755827880965_4195972c_0_1_0, from-node: $N_8755827880965_4195972c_0_1) isa node-link; 

match
$N_8755827880965_4195972c isa instruction, has hash "N_8755827880965_4195972c"; 

insert
$N_8755827880965_4195972c_1 isa constant, has hash "N_8755827880965_4195972c_1", has constant-value "27", has edge-label "true";
(to-node: $N_8755827880965_4195972c_1, from-node: $N_8755827880965_4195972c) isa node-link; 

match
$N_8755827880965_4195972c isa instruction, has hash "N_8755827880965_4195972c"; 

insert
$N_8755827880965_4195972c_2 isa constant, has hash "N_8755827880965_4195972c_2", has constant-value "28", has edge-label "false";
(to-node: $N_8755827880965_4195972c_2, from-node: $N_8755827880965_4195972c) isa node-link; 

match 
$func___libc_csu_init isa function, has name "__libc_csu_init"; 

insert 
$bb isa basic-block, has bb-start 27, has bb-end 27; 
(contains-basic-block: $bb, in-function: $func___libc_csu_init) isa has-basic-block; 

match 
$func___libc_csu_init isa function, has name "__libc_csu_init"; 

insert 
$bb isa basic-block, has bb-start 28, has bb-end 28; 
(contains-basic-block: $bb, in-function: $func___libc_csu_init) isa has-basic-block; 

match 
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$frombb isa basic-block, has bb-end 4, has bb-start 0; 
$tobb   isa basic-block, has bb-end 5, has bb-start 5; 
(contains-basic-block: $frombb, in-function: $func___libc_csu_init) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func___libc_csu_init) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$frombb isa basic-block, has bb-end 4, has bb-start 0; 
$tobb   isa basic-block, has bb-end 7, has bb-start 6; 
(contains-basic-block: $frombb, in-function: $func___libc_csu_init) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func___libc_csu_init) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$frombb isa basic-block, has bb-end 5, has bb-start 5; 
$tobb   isa basic-block, has bb-end 14, has bb-start 8; 
(contains-basic-block: $frombb, in-function: $func___libc_csu_init) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func___libc_csu_init) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$frombb isa basic-block, has bb-end 7, has bb-start 6; 
$tobb   isa basic-block, has bb-end 26, has bb-start 15; 
(contains-basic-block: $frombb, in-function: $func___libc_csu_init) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func___libc_csu_init) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$frombb isa basic-block, has bb-end 26, has bb-start 15; 
$tobb   isa basic-block, has bb-end 27, has bb-start 27; 
(contains-basic-block: $frombb, in-function: $func___libc_csu_init) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func___libc_csu_init) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$frombb isa basic-block, has bb-end 26, has bb-start 15; 
$tobb   isa basic-block, has bb-end 28, has bb-start 28; 
(contains-basic-block: $frombb, in-function: $func___libc_csu_init) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func___libc_csu_init) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$frombb isa basic-block, has bb-end 27, has bb-start 27; 
$tobb   isa basic-block, has bb-end 26, has bb-start 15; 
(contains-basic-block: $frombb, in-function: $func___libc_csu_init) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func___libc_csu_init) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func___libc_csu_init isa function, has name "__libc_csu_init"; 
$frombb isa basic-block, has bb-end 28, has bb-start 28; 
$tobb   isa basic-block, has bb-end 14, has bb-start 8; 
(contains-basic-block: $frombb, in-function: $func___libc_csu_init) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func___libc_csu_init) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

insert 
$func___libc_csu_fini isa function, has name "__libc_csu_fini", has asm-address "0x4006a0", has stack "[<var void* const __return_addr>]"; 

match 
$func___libc_csu_fini isa function, has name "__libc_csu_fini"; 

insert 
$bb isa basic-block, has bb-start 0, has bb-end 0; 
(contains-basic-block: $bb, in-function: $func___libc_csu_fini) isa has-basic-block; 

match 
$func___libc_csu_fini isa function, has name "__libc_csu_fini"; 
$bb isa basic-block, has bb-start 0, has bb-end 0; 
(in-function: $func___libc_csu_fini, contains-basic-block: $bb) isa has-basic-block; 

match
$func___libc_csu_fini isa function, has name "__libc_csu_fini"; 
$bb isa basic-block, has bb-start 0, has bb-end 0; 
(in-function: $func___libc_csu_fini, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827905153_4196000c isa instruction, has hash "N_8755827905153_4196000c", has il-index 0, has asm-address "0x4006a0", has operation-type "MLIL_RET", has ins-text "return ";
(contains-instruction: $N_8755827905153_4196000c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827905153_4196000c isa instruction, has hash "N_8755827905153_4196000c"; 

insert
$L_8755827905153_4196000c_0 isa list, has hash "L_8755827905153_4196000c_0", has list-size 0, has edge-label "src";
(to-node: $L_8755827905153_4196000c_0, from-node: $N_8755827905153_4196000c) isa node-link; 

insert 
$func__fini isa function, has name "_fini", has asm-address "0x4006a4", has stack "[<var void var_8>, <var void* const __return_addr>]"; 

match 
$func__fini isa function, has name "_fini"; 

insert 
$bb isa basic-block, has bb-start 0, has bb-end 0; 
(contains-basic-block: $bb, in-function: $func__fini) isa has-basic-block; 

match 
$func__fini isa function, has name "_fini"; 
$bb isa basic-block, has bb-start 0, has bb-end 0; 
(in-function: $func__fini, contains-basic-block: $bb) isa has-basic-block; 

match
$func__fini isa function, has name "_fini"; 
$bb isa basic-block, has bb-start 0, has bb-end 0; 
(in-function: $func__fini, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8755827905277_4196012c isa instruction, has hash "N_8755827905277_4196012c", has il-index 0, has asm-address "0x4006ac", has operation-type "MLIL_RET", has ins-text "return ";
(contains-instruction: $N_8755827905277_4196012c, in-basic-block: $bb) isa has-instruction; 

match
$N_8755827905277_4196012c isa instruction, has hash "N_8755827905277_4196012c"; 

insert
$L_8755827905277_4196012c_0 isa list, has hash "L_8755827905277_4196012c_0", has list-size 0, has edge-label "src";
(to-node: $L_8755827905277_4196012c_0, from-node: $N_8755827905277_4196012c) isa node-link; 
