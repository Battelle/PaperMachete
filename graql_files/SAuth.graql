insert 

## ENTITIES #####################################
function sub entity
	plays in-function
	has name
	has asm-address
	has stack;

basic-block sub entity
	plays from-basic-block 
	plays to-basic-block
	plays in-basic-block 
	plays contains-basic-block
	has bb-start
	has bb-end;

instruction sub entity
	plays from-node
	plays to-node
	plays in-instruction
	plays contains-instruction
	has hash
	has il-index
	has asm-address
	has ins-text
	has operation-type;

operation sub entity
	plays from-node
	plays to-node
	plays in-operation
	plays contains-operation
	has hash
	has edge-label;

constant sub entity
	plays from-node
	plays to-node
	has hash
	has constant-value
	has edge-label;

variable sub entity
	plays from-node
	plays to-node
	has hash
	has var
	has edge-label
	has var-type
	has var-size
	has var-func;

variable-ssa sub entity
	plays from-node
	plays to-node
	plays trace
	has hash
	has var
	has version
	has edge-label
	has var-type
	has var-size
	has var-func;

list sub entity
	plays from-node
	plays to-node
	has hash
	has list-size
	has edge-label;


## SUB ENTITIES #################################
#### OPERATIONS #################################
MLIL_NOP sub operation;
MLIL_SET_VAR sub operation;
MLIL_SET_VAR_FIELD sub operation;
MLIL_SET_VAR_SPLIT sub operation;
MLIL_LOAD sub operation;
MLIL_STORE sub operation;
MLIL_VAR sub operation
	has var;
MLIL_VAR_FIELD sub operation;
MLIL_ADDRESS_OF sub operation;
MLIL_ADDRESS_OF_FIELD sub operation;
MLIL_CONST sub operation;
MLIL_CONST_PTR sub operation;
MLIL_ADD sub operation;
MLIL_ADC sub operation;
MLIL_SUB sub operation;
MLIL_SBB sub operation;
MLIL_AND sub operation;
MLIL_OR sub operation;
MLIL_XOR sub operation;
MLIL_LSL sub operation;
MLIL_LSR sub operation;
MLIL_ASR sub operation;
MLIL_ROL sub operation;
MLIL_RLC sub operation;
MLIL_ROR sub operation;
MLIL_RRC sub operation;
MLIL_MUL sub operation;
MLIL_MULU_DP sub operation;
MLIL_MULS_DP sub operation;
MLIL_DIVU sub operation;
MLIL_DIVU_DP sub operation;
MLIL_DIVS sub operation;
MLIL_DIVS_DP sub operation;
MLIL_MODU sub operation;
MLIL_MODU_DP sub operation;
MLIL_MODS sub operation;
MLIL_MODS_DP sub operation;
MLIL_NEG sub operation;
MLIL_NOT sub operation;
MLIL_SX sub operation;
MLIL_ZX sub operation;
MLIL_LOW_PART sub operation;
MLIL_JUMP sub operation;
MLIL_JUMP_TO sub operation;
MLIL_CALL sub operation;
MLIL_CALL_UNTYPED sub operation;
MLIL_CALL_OUTPUT sub operation;
MLIL_CALL_PARAM sub operation;
MLIL_RET sub operation;
MLIL_NORET sub operation;
MLIL_IF sub operation;
MLIL_GOTO sub operation;
MLIL_CMP_E sub operation;
MLIL_CMP_NE sub operation;
MLIL_CMP_SLT sub operation;
MLIL_CMP_ULT sub operation;
MLIL_CMP_SLE sub operation;
MLIL_CMP_ULE sub operation;
MLIL_CMP_SGE sub operation;
MLIL_CMP_UGE sub operation;
MLIL_CMP_SGT sub operation;
MLIL_CMP_UGT sub operation;
MLIL_TEST_BIT sub operation;
MLIL_BOOL_TO_INT sub operation;
MLIL_ADD_OVERFLOW sub operation;
MLIL_SYSCALL sub operation;
MLIL_SYSCALL_UNTYPED sub operation;
MLIL_BP sub operation;
MLIL_TRAP sub operation;
MLIL_UNDEF sub operation;
MLIL_UNIMPL sub operation;
MLIL_UNIMPL_MEM sub operation;
MLIL_IMPORT sub operation;
MLIL_SET_VAR_SSA sub operation;
MLIL_SET_VAR_SSA_FIELD sub operation;
MLIL_SET_VAR_SPLIT_SSA sub operation;
MLIL_SET_VAR_ALIASED sub operation;
MLIL_SET_VAR_ALIASED_FIELD sub operation;
MLIL_VAR_SSA sub operation;
MLIL_VAR_SSA_FIELD sub operation;
MLIL_VAR_ALIASED sub operation;
MLIL_VAR_ALIASED_FIELD sub operation;
MLIL_CALL_SSA sub operation;
MLIL_CALL_UNTYPED_SSA sub operation;
MLIL_SYSCALL_SSA sub operation;
MLIL_SYSCALL_UNTYPED_SSA sub operation;
MLIL_CALL_OUTPUT_SSA sub operation;
MLIL_CALL_PARAM_SSA sub operation;
MLIL_LOAD_SSA sub operation;
MLIL_STORE_SSA sub operation;
MLIL_VAR_PHI sub operation;
MLIL_MEM_PHI sub operation;


## RESOURCES (has) ##############################
stack			sub resource datatype string;
operation-type 		sub resource datatype string;
ins-text		sub resource datatype string;
name			sub resource datatype string;
asm-address 		sub resource datatype string;
edge-label 		sub resource datatype string;
constant-value 		sub resource datatype string;
hash 			sub resource datatype string;
var 			sub resource datatype string;
var-type 		sub resource datatype string;
var-func 		sub resource datatype string;
var-size		sub resource datatype long;
bb-start		sub resource datatype long;
bb-end			sub resource datatype long;
il-index 		sub resource datatype long;
list-size 		sub resource datatype long;
int 			sub resource datatype long;
version 		sub resource datatype long;
size			sub resource datatype long;
if-true 		sub resource datatype long;
if-false 		sub resource datatype long;


## ROLES (plays) ################################
in-function 			sub role;

from-basic-block 		sub role;
to-basic-block			sub role;
in-basic-block 			sub role;
contains-basic-block 	sub role;

in-instruction 			sub role;
contains-instruction 	sub role;

in-operation 			sub role;
contains-operation 		sub role;

from-node 				sub role;
to-node					sub role;

trace					sub role;
## RELATIONS ####################################
has-basic-block sub relation
	relates in-function
	relates contains-basic-block;

basic-block-edge sub relation
	relates from-basic-block
	relates to-basic-block;

has-instruction sub relation
    relates contains-instruction
    relates in-basic-block;

instruction-has-operation sub relation
	relates contains-operation
	relates in-instruction;

operation-has-operation sub relation
	relates contains-operation
	relates in-operation;

node-link sub relation
	relates from-node
	relates to-node;

trace-link sub relation
	relates trace;

trace-instruction sub relation
	relates trace;

trace-full sub relation
	relates trace;
## INFERRENCE RULES #############################
$share-var isa inference-rule
when {
	$v1 isa variable-ssa, has var $var;
	$v2 isa variable-ssa, has var $var;
	$v1 != $v2;
},
then {
	(trace:$v1, trace:$v2) isa trace-link;
};
$share-instruction isa inference-rule
when {
	$v1 isa variable-ssa;
	$v2 isa MLIL_VAR_SSA;
	(to-node:$v1, from-node:$v2);
	$v4 isa variable-ssa;
	$v3 isa MLIL_VAR_SSA;
	(to-node:$v4, from-node:$v3);
	(from-node:$inst, to-node:$v2);
	(from-node:$inst, to-node:$v3);
	$inst isa instruction;
	$v1 != $v2;$v2 != $v3;$v3 != $v4;$v1 != $v4;$v2 != $v4;$v1 != $v3;
},
then {
	(trace:$v1, trace:$v4) isa trace-instruction;
};
$trace-goal isa inference-rule
when {
	(trace:$v1,trace:$v2) isa trace-link;
	(trace:$v2,trace:$v3) isa trace-instruction;
	$v1 != $v2;$v2 != $v3;$v1 != $v3;
},
then {
	(trace:$v1, trace:$v3) isa trace-full;
};    

insert 
$func_cgc_get_string isa function, has name "cgc_get_string", has asm-address "0x804b7b0", has stack "[<var int32_t var_1c>, <var uint32_t var_1c_1>, <var int32_t var_c>, <var int32_t __saved_esi>, <var int32_t __saved_edi>, <var void* const __return_addr>]"; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 

insert 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(contains-basic-block: $bb, in-function: $func_cgc_get_string) isa has-basic-block; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319997349_134526901c isa instruction, has hash "N_8730319997349_134526901c", has il-index 0, has asm-address "0x804b7b5", has operation-type "MLIL_SET_VAR_SSA", has ins-text "esi#1 = arg2#0";
(contains-instruction: $N_8730319997349_134526901c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319997349_134526901c isa instruction, has hash "N_8730319997349_134526901c"; 

insert
$N_8730319997349_134526901c_0 isa variable-ssa, has hash "N_8730319997349_134526901c_0", has var "esi", has version 1, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319997349_134526901c_0, from-node: $N_8730319997349_134526901c) isa node-link; 

match
$N_8730319997349_134526901c isa instruction, has hash "N_8730319997349_134526901c"; 

insert
$N_8730319997349_134526901c_1 isa MLIL_VAR_SSA, has hash "N_8730319997349_134526901c_1", has edge-label "src";
(to-node: $N_8730319997349_134526901c_1, from-node: $N_8730319997349_134526901c) isa node-link; 

match
$N_8730319997349_134526901c_1 isa operation, has hash "N_8730319997349_134526901c_1"; 

insert
$N_8730319997349_134526901c_1_0 isa variable-ssa, has hash "N_8730319997349_134526901c_1_0", has var "arg2", has version 0, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319997349_134526901c_1_0, from-node: $N_8730319997349_134526901c_1) isa node-link; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730321074065_134526903c isa instruction, has hash "N_8730321074065_134526903c", has il-index 1, has asm-address "0x804b7b7", has operation-type "MLIL_SET_VAR_SSA", has ins-text "edi#1 = arg3#0";
(contains-instruction: $N_8730321074065_134526903c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730321074065_134526903c isa instruction, has hash "N_8730321074065_134526903c"; 

insert
$N_8730321074065_134526903c_0 isa variable-ssa, has hash "N_8730321074065_134526903c_0", has var "edi", has version 1, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730321074065_134526903c_0, from-node: $N_8730321074065_134526903c) isa node-link; 

match
$N_8730321074065_134526903c isa instruction, has hash "N_8730321074065_134526903c"; 

insert
$N_8730321074065_134526903c_1 isa MLIL_VAR_SSA, has hash "N_8730321074065_134526903c_1", has edge-label "src";
(to-node: $N_8730321074065_134526903c_1, from-node: $N_8730321074065_134526903c) isa node-link; 

match
$N_8730321074065_134526903c_1 isa operation, has hash "N_8730321074065_134526903c_1"; 

insert
$N_8730321074065_134526903c_1_0 isa variable-ssa, has hash "N_8730321074065_134526903c_1_0", has var "arg3", has version 0, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730321074065_134526903c_1_0, from-node: $N_8730321074065_134526903c_1) isa node-link; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319994373_134526905c isa instruction, has hash "N_8730319994373_134526905c", has il-index 2, has asm-address "0x804b7b9", has operation-type "MLIL_SET_VAR_SSA", has ins-text "edx#1 = &var_c";
(contains-instruction: $N_8730319994373_134526905c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319994373_134526905c isa instruction, has hash "N_8730319994373_134526905c"; 

insert
$N_8730319994373_134526905c_0 isa variable-ssa, has hash "N_8730319994373_134526905c_0", has var "edx", has version 1, has edge-label "dest", has var-type "int32_t*", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319994373_134526905c_0, from-node: $N_8730319994373_134526905c) isa node-link; 

match
$N_8730319994373_134526905c isa instruction, has hash "N_8730319994373_134526905c"; 

insert
$N_8730319994373_134526905c_1 isa MLIL_ADDRESS_OF, has hash "N_8730319994373_134526905c_1", has edge-label "src";
(to-node: $N_8730319994373_134526905c_1, from-node: $N_8730319994373_134526905c) isa node-link; 

match
$N_8730319994373_134526905c_1 isa operation, has hash "N_8730319994373_134526905c_1"; 

insert
$N_8730319994373_134526905c_1_0 isa variable, has hash "N_8730319994373_134526905c_1_0", has var "var_c", has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319994373_134526905c_1_0, from-node: $N_8730319994373_134526905c_1) isa node-link; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730320004101_134526909c isa instruction, has hash "N_8730320004101_134526909c", has il-index 3, has asm-address "0x804b7bd", has operation-type "MLIL_CALL_SSA", has ins-text "eax#1, mem#1 = 0x804b730(arg1#0, edx#1, arg3#0) @ mem#0";
(contains-instruction: $N_8730320004101_134526909c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730320004101_134526909c isa instruction, has hash "N_8730320004101_134526909c"; 

insert
$N_8730320004101_134526909c_0 isa MLIL_CALL_OUTPUT_SSA, has hash "N_8730320004101_134526909c_0", has edge-label "output";
(to-node: $N_8730320004101_134526909c_0, from-node: $N_8730320004101_134526909c) isa node-link; 

match
$N_8730320004101_134526909c_0 isa operation, has hash "N_8730320004101_134526909c_0"; 

insert
$N_8730320004101_134526909c_0_0 isa constant, has hash "N_8730320004101_134526909c_0_0", has constant-value "1", has edge-label "dest_memory";
(to-node: $N_8730320004101_134526909c_0_0, from-node: $N_8730320004101_134526909c_0) isa node-link; 

match
$N_8730320004101_134526909c_0 isa operation, has hash "N_8730320004101_134526909c_0"; 

insert
$L_8730320004101_134526909c_0_1 isa list, has hash "L_8730320004101_134526909c_0_1", has list-size 1, has edge-label "dest";
(to-node: $L_8730320004101_134526909c_0_1, from-node: $N_8730320004101_134526909c_0) isa node-link; 

match
$L_8730320004101_134526909c_0_1 isa list, has hash "L_8730320004101_134526909c_0_1"; 

insert
$N_8730320004101_134526909c_0_1_0 isa variable-ssa, has hash "N_8730320004101_134526909c_0_1_0", has var "eax", has version 1, has edge-label "0", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730320004101_134526909c_0_1_0, from-node: $L_8730320004101_134526909c_0_1) isa node-link; 

match
$N_8730320004101_134526909c isa instruction, has hash "N_8730320004101_134526909c"; 

insert
$N_8730320004101_134526909c_1 isa MLIL_CONST_PTR, has hash "N_8730320004101_134526909c_1", has edge-label "dest";
(to-node: $N_8730320004101_134526909c_1, from-node: $N_8730320004101_134526909c) isa node-link; 

match
$N_8730320004101_134526909c_1 isa operation, has hash "N_8730320004101_134526909c_1"; 

insert
$N_8730320004101_134526909c_1_0 isa constant, has hash "N_8730320004101_134526909c_1_0", has constant-value "134526768", has edge-label "constant";
(to-node: $N_8730320004101_134526909c_1_0, from-node: $N_8730320004101_134526909c_1) isa node-link; 

match
$N_8730320004101_134526909c isa instruction, has hash "N_8730320004101_134526909c"; 

insert
$L_8730320004101_134526909c_2 isa list, has hash "L_8730320004101_134526909c_2", has list-size 3, has edge-label "params";
(to-node: $L_8730320004101_134526909c_2, from-node: $N_8730320004101_134526909c) isa node-link; 

match
$L_8730320004101_134526909c_2 isa list, has hash "L_8730320004101_134526909c_2"; 

insert
$N_8730320004101_134526909c_2_0 isa MLIL_VAR_SSA, has hash "N_8730320004101_134526909c_2_0", has edge-label "0";
(to-node: $N_8730320004101_134526909c_2_0, from-node: $L_8730320004101_134526909c_2) isa node-link; 

match
$N_8730320004101_134526909c_2_0 isa operation, has hash "N_8730320004101_134526909c_2_0"; 

insert
$N_8730320004101_134526909c_2_0_0 isa variable-ssa, has hash "N_8730320004101_134526909c_2_0_0", has var "arg1", has version 0, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730320004101_134526909c_2_0_0, from-node: $N_8730320004101_134526909c_2_0) isa node-link; 

match
$L_8730320004101_134526909c_2 isa list, has hash "L_8730320004101_134526909c_2"; 

insert
$N_8730320004101_134526909c_2_1 isa MLIL_VAR_SSA, has hash "N_8730320004101_134526909c_2_1", has edge-label "1";
(to-node: $N_8730320004101_134526909c_2_1, from-node: $L_8730320004101_134526909c_2) isa node-link; 

match
$N_8730320004101_134526909c_2_1 isa operation, has hash "N_8730320004101_134526909c_2_1"; 

insert
$N_8730320004101_134526909c_2_1_0 isa variable-ssa, has hash "N_8730320004101_134526909c_2_1_0", has var "edx", has version 1, has edge-label "src", has var-type "int32_t*", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730320004101_134526909c_2_1_0, from-node: $N_8730320004101_134526909c_2_1) isa node-link; 

match
$L_8730320004101_134526909c_2 isa list, has hash "L_8730320004101_134526909c_2"; 

insert
$N_8730320004101_134526909c_2_2 isa MLIL_VAR_SSA, has hash "N_8730320004101_134526909c_2_2", has edge-label "2";
(to-node: $N_8730320004101_134526909c_2_2, from-node: $L_8730320004101_134526909c_2) isa node-link; 

match
$N_8730320004101_134526909c_2_2 isa operation, has hash "N_8730320004101_134526909c_2_2"; 

insert
$N_8730320004101_134526909c_2_2_0 isa variable-ssa, has hash "N_8730320004101_134526909c_2_2_0", has var "arg3", has version 0, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730320004101_134526909c_2_2_0, from-node: $N_8730320004101_134526909c_2_2) isa node-link; 

match
$N_8730320004101_134526909c isa instruction, has hash "N_8730320004101_134526909c"; 

insert
$N_8730320004101_134526909c_3 isa constant, has hash "N_8730320004101_134526909c_3", has constant-value "0", has edge-label "src_memory";
(to-node: $N_8730320004101_134526909c_3, from-node: $N_8730320004101_134526909c) isa node-link; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319947133_134526914c isa instruction, has hash "N_8730319947133_134526914c", has il-index 4, has asm-address "0x804b7c2", has operation-type "MLIL_SET_VAR_SSA", has ins-text "ecx#1 = eax#1";
(contains-instruction: $N_8730319947133_134526914c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319947133_134526914c isa instruction, has hash "N_8730319947133_134526914c"; 

insert
$N_8730319947133_134526914c_0 isa variable-ssa, has hash "N_8730319947133_134526914c_0", has var "ecx", has version 1, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319947133_134526914c_0, from-node: $N_8730319947133_134526914c) isa node-link; 

match
$N_8730319947133_134526914c isa instruction, has hash "N_8730319947133_134526914c"; 

insert
$N_8730319947133_134526914c_1 isa MLIL_VAR_SSA, has hash "N_8730319947133_134526914c_1", has edge-label "src";
(to-node: $N_8730319947133_134526914c_1, from-node: $N_8730319947133_134526914c) isa node-link; 

match
$N_8730319947133_134526914c_1 isa operation, has hash "N_8730319947133_134526914c_1"; 

insert
$N_8730319947133_134526914c_1_0 isa variable-ssa, has hash "N_8730319947133_134526914c_1_0", has var "eax", has version 1, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319947133_134526914c_1_0, from-node: $N_8730319947133_134526914c_1) isa node-link; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319844361_134526916c isa instruction, has hash "N_8730319844361_134526916c", has il-index 5, has asm-address "0x804b7c4", has operation-type "MLIL_SET_VAR_SSA", has ins-text "eax_1#2 = 0";
(contains-instruction: $N_8730319844361_134526916c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319844361_134526916c isa instruction, has hash "N_8730319844361_134526916c"; 

insert
$N_8730319844361_134526916c_0 isa variable-ssa, has hash "N_8730319844361_134526916c_0", has var "eax_1", has version 2, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319844361_134526916c_0, from-node: $N_8730319844361_134526916c) isa node-link; 

match
$N_8730319844361_134526916c isa instruction, has hash "N_8730319844361_134526916c"; 

insert
$N_8730319844361_134526916c_1 isa MLIL_CONST, has hash "N_8730319844361_134526916c_1", has edge-label "src";
(to-node: $N_8730319844361_134526916c_1, from-node: $N_8730319844361_134526916c) isa node-link; 

match
$N_8730319844361_134526916c_1 isa operation, has hash "N_8730319844361_134526916c_1"; 

insert
$N_8730319844361_134526916c_1_0 isa constant, has hash "N_8730319844361_134526916c_1_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8730319844361_134526916c_1_0, from-node: $N_8730319844361_134526916c_1) isa node-link; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319973333_134526920c isa instruction, has hash "N_8730319973333_134526920c", has il-index 6, has asm-address "0x804b7c8", has operation-type "MLIL_IF", has ins-text "if (ecx#1 == 0) then 7 @ 0x0 else 8 @ 0x804b7ca";
(contains-instruction: $N_8730319973333_134526920c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319973333_134526920c isa instruction, has hash "N_8730319973333_134526920c"; 

insert
$N_8730319973333_134526920c_0 isa MLIL_CMP_E, has hash "N_8730319973333_134526920c_0", has edge-label "condition";
(to-node: $N_8730319973333_134526920c_0, from-node: $N_8730319973333_134526920c) isa node-link; 

match
$N_8730319973333_134526920c_0 isa operation, has hash "N_8730319973333_134526920c_0"; 

insert
$N_8730319973333_134526920c_0_0 isa MLIL_VAR_SSA, has hash "N_8730319973333_134526920c_0_0", has edge-label "left";
(to-node: $N_8730319973333_134526920c_0_0, from-node: $N_8730319973333_134526920c_0) isa node-link; 

match
$N_8730319973333_134526920c_0_0 isa operation, has hash "N_8730319973333_134526920c_0_0"; 

insert
$N_8730319973333_134526920c_0_0_0 isa variable-ssa, has hash "N_8730319973333_134526920c_0_0_0", has var "ecx", has version 1, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319973333_134526920c_0_0_0, from-node: $N_8730319973333_134526920c_0_0) isa node-link; 

match
$N_8730319973333_134526920c_0 isa operation, has hash "N_8730319973333_134526920c_0"; 

insert
$N_8730319973333_134526920c_0_1 isa MLIL_CONST, has hash "N_8730319973333_134526920c_0_1", has edge-label "right";
(to-node: $N_8730319973333_134526920c_0_1, from-node: $N_8730319973333_134526920c_0) isa node-link; 

match
$N_8730319973333_134526920c_0_1 isa operation, has hash "N_8730319973333_134526920c_0_1"; 

insert
$N_8730319973333_134526920c_0_1_0 isa constant, has hash "N_8730319973333_134526920c_0_1_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8730319973333_134526920c_0_1_0, from-node: $N_8730319973333_134526920c_0_1) isa node-link; 

match
$N_8730319973333_134526920c isa instruction, has hash "N_8730319973333_134526920c"; 

insert
$N_8730319973333_134526920c_1 isa constant, has hash "N_8730319973333_134526920c_1", has constant-value "7", has edge-label "true";
(to-node: $N_8730319973333_134526920c_1, from-node: $N_8730319973333_134526920c) isa node-link; 

match
$N_8730319973333_134526920c isa instruction, has hash "N_8730319973333_134526920c"; 

insert
$N_8730319973333_134526920c_2 isa constant, has hash "N_8730319973333_134526920c_2", has constant-value "8", has edge-label "false";
(to-node: $N_8730319973333_134526920c_2, from-node: $N_8730319973333_134526920c) isa node-link; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 

insert 
$bb isa basic-block, has bb-start 7, has bb-end 7; 
(contains-basic-block: $bb, in-function: $func_cgc_get_string) isa has-basic-block; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 7, has bb-end 7; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 7, has bb-end 7; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319866909_0c isa instruction, has hash "N_8730319866909_0c", has il-index 17, has asm-address "0x0", has operation-type "MLIL_GOTO", has ins-text "goto 11 @ 0x804b80a";
(contains-instruction: $N_8730319866909_0c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319866909_0c isa instruction, has hash "N_8730319866909_0c"; 

insert
$N_8730319866909_0c_0 isa constant, has hash "N_8730319866909_0c_0", has constant-value "11", has edge-label "dest";
(to-node: $N_8730319866909_0c_0, from-node: $N_8730319866909_0c) isa node-link; 

match
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 7, has bb-end 7; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319982205_0c isa instruction, has hash "N_8730319982205_0c", has il-index 7, has asm-address "0x0", has operation-type "MLIL_GOTO", has ins-text "goto 11 @ 0x804b80a";
(contains-instruction: $N_8730319982205_0c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319982205_0c isa instruction, has hash "N_8730319982205_0c"; 

insert
$N_8730319982205_0c_0 isa constant, has hash "N_8730319982205_0c_0", has constant-value "11", has edge-label "dest";
(to-node: $N_8730319982205_0c_0, from-node: $N_8730319982205_0c) isa node-link; 

match
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 7, has bb-end 7; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319987333_0c isa instruction, has hash "N_8730319987333_0c", has il-index 21, has asm-address "0x0", has operation-type "MLIL_GOTO", has ins-text "goto 11 @ 0x804b80a";
(contains-instruction: $N_8730319987333_0c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319987333_0c isa instruction, has hash "N_8730319987333_0c"; 

insert
$N_8730319987333_0c_0 isa constant, has hash "N_8730319987333_0c_0", has constant-value "11", has edge-label "dest";
(to-node: $N_8730319987333_0c_0, from-node: $N_8730319987333_0c) isa node-link; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 

insert 
$bb isa basic-block, has bb-start 8, has bb-end 10; 
(contains-basic-block: $bb, in-function: $func_cgc_get_string) isa has-basic-block; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 8, has bb-end 10; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 8, has bb-end 10; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319832429_134526922c isa instruction, has hash "N_8730319832429_134526922c", has il-index 8, has asm-address "0x804b7ca", has operation-type "MLIL_SET_VAR_SSA", has ins-text "ecx_1#2 = var_c @ mem#1";
(contains-instruction: $N_8730319832429_134526922c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319832429_134526922c isa instruction, has hash "N_8730319832429_134526922c"; 

insert
$N_8730319832429_134526922c_0 isa variable-ssa, has hash "N_8730319832429_134526922c_0", has var "ecx_1", has version 2, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319832429_134526922c_0, from-node: $N_8730319832429_134526922c) isa node-link; 

match
$N_8730319832429_134526922c isa instruction, has hash "N_8730319832429_134526922c"; 

insert
$N_8730319832429_134526922c_1 isa MLIL_VAR_ALIASED, has hash "N_8730319832429_134526922c_1", has edge-label "src";
(to-node: $N_8730319832429_134526922c_1, from-node: $N_8730319832429_134526922c) isa node-link; 

match
$N_8730319832429_134526922c_1 isa operation, has hash "N_8730319832429_134526922c_1"; 

insert
$N_8730319832429_134526922c_1_0 isa variable-ssa, has hash "N_8730319832429_134526922c_1_0", has var "var_c", has version 1, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319832429_134526922c_1_0, from-node: $N_8730319832429_134526922c_1) isa node-link; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 8, has bb-end 10; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 8, has bb-end 10; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319949061_134526926c isa instruction, has hash "N_8730319949061_134526926c", has il-index 9, has asm-address "0x804b7ce", has operation-type "MLIL_SET_VAR_SSA", has ins-text "edx_1#2 = ecx_1#2 + 1";
(contains-instruction: $N_8730319949061_134526926c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319949061_134526926c isa instruction, has hash "N_8730319949061_134526926c"; 

insert
$N_8730319949061_134526926c_0 isa variable-ssa, has hash "N_8730319949061_134526926c_0", has var "edx_1", has version 2, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319949061_134526926c_0, from-node: $N_8730319949061_134526926c) isa node-link; 

match
$N_8730319949061_134526926c isa instruction, has hash "N_8730319949061_134526926c"; 

insert
$N_8730319949061_134526926c_1 isa MLIL_ADD, has hash "N_8730319949061_134526926c_1", has edge-label "src";
(to-node: $N_8730319949061_134526926c_1, from-node: $N_8730319949061_134526926c) isa node-link; 

match
$N_8730319949061_134526926c_1 isa operation, has hash "N_8730319949061_134526926c_1"; 

insert
$N_8730319949061_134526926c_1_0 isa MLIL_VAR_SSA, has hash "N_8730319949061_134526926c_1_0", has edge-label "left";
(to-node: $N_8730319949061_134526926c_1_0, from-node: $N_8730319949061_134526926c_1) isa node-link; 

match
$N_8730319949061_134526926c_1_0 isa operation, has hash "N_8730319949061_134526926c_1_0"; 

insert
$N_8730319949061_134526926c_1_0_0 isa variable-ssa, has hash "N_8730319949061_134526926c_1_0_0", has var "ecx_1", has version 2, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319949061_134526926c_1_0_0, from-node: $N_8730319949061_134526926c_1_0) isa node-link; 

match
$N_8730319949061_134526926c_1 isa operation, has hash "N_8730319949061_134526926c_1"; 

insert
$N_8730319949061_134526926c_1_1 isa MLIL_CONST, has hash "N_8730319949061_134526926c_1_1", has edge-label "right";
(to-node: $N_8730319949061_134526926c_1_1, from-node: $N_8730319949061_134526926c_1) isa node-link; 

match
$N_8730319949061_134526926c_1_1 isa operation, has hash "N_8730319949061_134526926c_1_1"; 

insert
$N_8730319949061_134526926c_1_1_0 isa constant, has hash "N_8730319949061_134526926c_1_1_0", has constant-value "1", has edge-label "constant";
(to-node: $N_8730319949061_134526926c_1_1_0, from-node: $N_8730319949061_134526926c_1_1) isa node-link; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 8, has bb-end 10; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 8, has bb-end 10; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319828741_134526935c isa instruction, has hash "N_8730319828741_134526935c", has il-index 10, has asm-address "0x804b7d7", has operation-type "MLIL_IF", has ins-text "if (edx_1#2 u> 0x100) then 17 @ 0x0 else 18 @ 0x804b7d9";
(contains-instruction: $N_8730319828741_134526935c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319828741_134526935c isa instruction, has hash "N_8730319828741_134526935c"; 

insert
$N_8730319828741_134526935c_0 isa MLIL_CMP_UGT, has hash "N_8730319828741_134526935c_0", has edge-label "condition";
(to-node: $N_8730319828741_134526935c_0, from-node: $N_8730319828741_134526935c) isa node-link; 

match
$N_8730319828741_134526935c_0 isa operation, has hash "N_8730319828741_134526935c_0"; 

insert
$N_8730319828741_134526935c_0_0 isa MLIL_VAR_SSA, has hash "N_8730319828741_134526935c_0_0", has edge-label "left";
(to-node: $N_8730319828741_134526935c_0_0, from-node: $N_8730319828741_134526935c_0) isa node-link; 

match
$N_8730319828741_134526935c_0_0 isa operation, has hash "N_8730319828741_134526935c_0_0"; 

insert
$N_8730319828741_134526935c_0_0_0 isa variable-ssa, has hash "N_8730319828741_134526935c_0_0_0", has var "edx_1", has version 2, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319828741_134526935c_0_0_0, from-node: $N_8730319828741_134526935c_0_0) isa node-link; 

match
$N_8730319828741_134526935c_0 isa operation, has hash "N_8730319828741_134526935c_0"; 

insert
$N_8730319828741_134526935c_0_1 isa MLIL_CONST, has hash "N_8730319828741_134526935c_0_1", has edge-label "right";
(to-node: $N_8730319828741_134526935c_0_1, from-node: $N_8730319828741_134526935c_0) isa node-link; 

match
$N_8730319828741_134526935c_0_1 isa operation, has hash "N_8730319828741_134526935c_0_1"; 

insert
$N_8730319828741_134526935c_0_1_0 isa constant, has hash "N_8730319828741_134526935c_0_1_0", has constant-value "256", has edge-label "constant";
(to-node: $N_8730319828741_134526935c_0_1_0, from-node: $N_8730319828741_134526935c_0_1) isa node-link; 

match
$N_8730319828741_134526935c isa instruction, has hash "N_8730319828741_134526935c"; 

insert
$N_8730319828741_134526935c_1 isa constant, has hash "N_8730319828741_134526935c_1", has constant-value "17", has edge-label "true";
(to-node: $N_8730319828741_134526935c_1, from-node: $N_8730319828741_134526935c) isa node-link; 

match
$N_8730319828741_134526935c isa instruction, has hash "N_8730319828741_134526935c"; 

insert
$N_8730319828741_134526935c_2 isa constant, has hash "N_8730319828741_134526935c_2", has constant-value "18", has edge-label "false";
(to-node: $N_8730319828741_134526935c_2, from-node: $N_8730319828741_134526935c) isa node-link; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 

insert 
$bb isa basic-block, has bb-start 11, has bb-end 16; 
(contains-basic-block: $bb, in-function: $func_cgc_get_string) isa has-basic-block; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 11, has bb-end 16; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 11, has bb-end 16; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319851781_134526986c isa instruction, has hash "N_8730319851781_134526986c", has il-index 14, has asm-address "0x804b80a", has operation-type "MLIL_VAR_PHI", has ins-text "edx_4#6 = ϕ(edx#1, edx_1#2, edx_3#4, edx_4#5)";
(contains-instruction: $N_8730319851781_134526986c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319851781_134526986c isa instruction, has hash "N_8730319851781_134526986c"; 

insert
$N_8730319851781_134526986c_0 isa variable-ssa, has hash "N_8730319851781_134526986c_0", has var "edx_4", has version 6, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319851781_134526986c_0, from-node: $N_8730319851781_134526986c) isa node-link; 

match
$N_8730319851781_134526986c isa instruction, has hash "N_8730319851781_134526986c"; 

insert
$L_8730319851781_134526986c_1 isa list, has hash "L_8730319851781_134526986c_1", has list-size 4, has edge-label "src";
(to-node: $L_8730319851781_134526986c_1, from-node: $N_8730319851781_134526986c) isa node-link; 

match
$L_8730319851781_134526986c_1 isa list, has hash "L_8730319851781_134526986c_1"; 

insert
$N_8730319851781_134526986c_1_0 isa variable-ssa, has hash "N_8730319851781_134526986c_1_0", has var "edx", has version 1, has edge-label "0", has var-type "int32_t*", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319851781_134526986c_1_0, from-node: $L_8730319851781_134526986c_1) isa node-link; 

match
$L_8730319851781_134526986c_1 isa list, has hash "L_8730319851781_134526986c_1"; 

insert
$N_8730319851781_134526986c_1_1 isa variable-ssa, has hash "N_8730319851781_134526986c_1_1", has var "edx_1", has version 2, has edge-label "1", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319851781_134526986c_1_1, from-node: $L_8730319851781_134526986c_1) isa node-link; 

match
$L_8730319851781_134526986c_1 isa list, has hash "L_8730319851781_134526986c_1"; 

insert
$N_8730319851781_134526986c_1_2 isa variable-ssa, has hash "N_8730319851781_134526986c_1_2", has var "edx_3", has version 4, has edge-label "2", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319851781_134526986c_1_2, from-node: $L_8730319851781_134526986c_1) isa node-link; 

match
$L_8730319851781_134526986c_1 isa list, has hash "L_8730319851781_134526986c_1"; 

insert
$N_8730319851781_134526986c_1_3 isa variable-ssa, has hash "N_8730319851781_134526986c_1_3", has var "edx_4", has version 5, has edge-label "3", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319851781_134526986c_1_3, from-node: $L_8730319851781_134526986c_1) isa node-link; 

match
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 11, has bb-end 16; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319862781_134526986c isa instruction, has hash "N_8730319862781_134526986c", has il-index 15, has asm-address "0x804b80a", has operation-type "MLIL_MEM_PHI", has ins-text "mem#4 = ϕ(mem#1, mem#3)";
(contains-instruction: $N_8730319862781_134526986c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319862781_134526986c isa instruction, has hash "N_8730319862781_134526986c"; 

insert
$N_8730319862781_134526986c_0 isa constant, has hash "N_8730319862781_134526986c_0", has constant-value "4", has edge-label "dest_memory";
(to-node: $N_8730319862781_134526986c_0, from-node: $N_8730319862781_134526986c) isa node-link; 

match
$N_8730319862781_134526986c isa instruction, has hash "N_8730319862781_134526986c"; 

insert
$L_8730319862781_134526986c_1 isa list, has hash "L_8730319862781_134526986c_1", has list-size 2, has edge-label "src_memory";
(to-node: $L_8730319862781_134526986c_1, from-node: $N_8730319862781_134526986c) isa node-link; 

match
$L_8730319862781_134526986c_1 isa list, has hash "L_8730319862781_134526986c_1"; 

insert
$N_8730319862781_134526986c_1_0 isa constant, has hash "N_8730319862781_134526986c_1_0", has constant-value "1", has edge-label "0";
(to-node: $N_8730319862781_134526986c_1_0, from-node: $L_8730319862781_134526986c_1) isa node-link; 

match
$L_8730319862781_134526986c_1 isa list, has hash "L_8730319862781_134526986c_1"; 

insert
$N_8730319862781_134526986c_1_1 isa constant, has hash "N_8730319862781_134526986c_1_1", has constant-value "3", has edge-label "1";
(to-node: $N_8730319862781_134526986c_1_1, from-node: $L_8730319862781_134526986c_1) isa node-link; 

match
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 11, has bb-end 16; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319952389_134526986c isa instruction, has hash "N_8730319952389_134526986c", has il-index 16, has asm-address "0x804b80a", has operation-type "MLIL_RET", has ins-text "return eax_1#6";
(contains-instruction: $N_8730319952389_134526986c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319952389_134526986c isa instruction, has hash "N_8730319952389_134526986c"; 

insert
$L_8730319952389_134526986c_0 isa list, has hash "L_8730319952389_134526986c_0", has list-size 1, has edge-label "src";
(to-node: $L_8730319952389_134526986c_0, from-node: $N_8730319952389_134526986c) isa node-link; 

match
$L_8730319952389_134526986c_0 isa list, has hash "L_8730319952389_134526986c_0"; 

insert
$N_8730319952389_134526986c_0_0 isa MLIL_VAR_SSA, has hash "N_8730319952389_134526986c_0_0", has edge-label "0";
(to-node: $N_8730319952389_134526986c_0_0, from-node: $L_8730319952389_134526986c_0) isa node-link; 

match
$N_8730319952389_134526986c_0_0 isa operation, has hash "N_8730319952389_134526986c_0_0"; 

insert
$N_8730319952389_134526986c_0_0_0 isa variable-ssa, has hash "N_8730319952389_134526986c_0_0_0", has var "eax_1", has version 6, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319952389_134526986c_0_0_0, from-node: $N_8730319952389_134526986c_0_0) isa node-link; 

match
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 11, has bb-end 16; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319971357_134526986c isa instruction, has hash "N_8730319971357_134526986c", has il-index 13, has asm-address "0x804b80a", has operation-type "MLIL_VAR_PHI", has ins-text "ecx_2#4 = ϕ(ecx#1, ecx_1#2, ecx_2#3)";
(contains-instruction: $N_8730319971357_134526986c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319971357_134526986c isa instruction, has hash "N_8730319971357_134526986c"; 

insert
$N_8730319971357_134526986c_0 isa variable-ssa, has hash "N_8730319971357_134526986c_0", has var "ecx_2", has version 4, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319971357_134526986c_0, from-node: $N_8730319971357_134526986c) isa node-link; 

match
$N_8730319971357_134526986c isa instruction, has hash "N_8730319971357_134526986c"; 

insert
$L_8730319971357_134526986c_1 isa list, has hash "L_8730319971357_134526986c_1", has list-size 3, has edge-label "src";
(to-node: $L_8730319971357_134526986c_1, from-node: $N_8730319971357_134526986c) isa node-link; 

match
$L_8730319971357_134526986c_1 isa list, has hash "L_8730319971357_134526986c_1"; 

insert
$N_8730319971357_134526986c_1_0 isa variable-ssa, has hash "N_8730319971357_134526986c_1_0", has var "ecx", has version 1, has edge-label "0", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319971357_134526986c_1_0, from-node: $L_8730319971357_134526986c_1) isa node-link; 

match
$L_8730319971357_134526986c_1 isa list, has hash "L_8730319971357_134526986c_1"; 

insert
$N_8730319971357_134526986c_1_1 isa variable-ssa, has hash "N_8730319971357_134526986c_1_1", has var "ecx_1", has version 2, has edge-label "1", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319971357_134526986c_1_1, from-node: $L_8730319971357_134526986c_1) isa node-link; 

match
$L_8730319971357_134526986c_1 isa list, has hash "L_8730319971357_134526986c_1"; 

insert
$N_8730319971357_134526986c_1_2 isa variable-ssa, has hash "N_8730319971357_134526986c_1_2", has var "ecx_2", has version 3, has edge-label "2", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319971357_134526986c_1_2, from-node: $L_8730319971357_134526986c_1) isa node-link; 

match
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 11, has bb-end 16; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319971845_134526986c isa instruction, has hash "N_8730319971845_134526986c", has il-index 11, has asm-address "0x804b80a", has operation-type "MLIL_VAR_PHI", has ins-text "var_1c_1#2 = ϕ(var_1c#0, var_1c_1#1)";
(contains-instruction: $N_8730319971845_134526986c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319971845_134526986c isa instruction, has hash "N_8730319971845_134526986c"; 

insert
$N_8730319971845_134526986c_0 isa variable-ssa, has hash "N_8730319971845_134526986c_0", has var "var_1c_1", has version 2, has edge-label "dest", has var-type "uint32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319971845_134526986c_0, from-node: $N_8730319971845_134526986c) isa node-link; 

match
$N_8730319971845_134526986c isa instruction, has hash "N_8730319971845_134526986c"; 

insert
$L_8730319971845_134526986c_1 isa list, has hash "L_8730319971845_134526986c_1", has list-size 2, has edge-label "src";
(to-node: $L_8730319971845_134526986c_1, from-node: $N_8730319971845_134526986c) isa node-link; 

match
$L_8730319971845_134526986c_1 isa list, has hash "L_8730319971845_134526986c_1"; 

insert
$N_8730319971845_134526986c_1_0 isa variable-ssa, has hash "N_8730319971845_134526986c_1_0", has var "var_1c", has version 0, has edge-label "0", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319971845_134526986c_1_0, from-node: $L_8730319971845_134526986c_1) isa node-link; 

match
$L_8730319971845_134526986c_1 isa list, has hash "L_8730319971845_134526986c_1"; 

insert
$N_8730319971845_134526986c_1_1 isa variable-ssa, has hash "N_8730319971845_134526986c_1_1", has var "var_1c_1", has version 1, has edge-label "1", has var-type "uint32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319971845_134526986c_1_1, from-node: $L_8730319971845_134526986c_1) isa node-link; 

match
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 11, has bb-end 16; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730321074133_134526986c isa instruction, has hash "N_8730321074133_134526986c", has il-index 12, has asm-address "0x804b80a", has operation-type "MLIL_VAR_PHI", has ins-text "eax_1#6 = ϕ(eax_1#2, eax_1#5)";
(contains-instruction: $N_8730321074133_134526986c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730321074133_134526986c isa instruction, has hash "N_8730321074133_134526986c"; 

insert
$N_8730321074133_134526986c_0 isa variable-ssa, has hash "N_8730321074133_134526986c_0", has var "eax_1", has version 6, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730321074133_134526986c_0, from-node: $N_8730321074133_134526986c) isa node-link; 

match
$N_8730321074133_134526986c isa instruction, has hash "N_8730321074133_134526986c"; 

insert
$L_8730321074133_134526986c_1 isa list, has hash "L_8730321074133_134526986c_1", has list-size 2, has edge-label "src";
(to-node: $L_8730321074133_134526986c_1, from-node: $N_8730321074133_134526986c) isa node-link; 

match
$L_8730321074133_134526986c_1 isa list, has hash "L_8730321074133_134526986c_1"; 

insert
$N_8730321074133_134526986c_1_0 isa variable-ssa, has hash "N_8730321074133_134526986c_1_0", has var "eax_1", has version 2, has edge-label "0", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730321074133_134526986c_1_0, from-node: $L_8730321074133_134526986c_1) isa node-link; 

match
$L_8730321074133_134526986c_1 isa list, has hash "L_8730321074133_134526986c_1"; 

insert
$N_8730321074133_134526986c_1_1 isa variable-ssa, has hash "N_8730321074133_134526986c_1_1", has var "eax_1", has version 5, has edge-label "1", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730321074133_134526986c_1_1, from-node: $L_8730321074133_134526986c_1) isa node-link; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 

insert 
$bb isa basic-block, has bb-start 17, has bb-end 17; 
(contains-basic-block: $bb, in-function: $func_cgc_get_string) isa has-basic-block; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 

insert 
$bb isa basic-block, has bb-start 18, has bb-end 20; 
(contains-basic-block: $bb, in-function: $func_cgc_get_string) isa has-basic-block; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 18, has bb-end 20; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 18, has bb-end 20; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319949605_134526937c isa instruction, has hash "N_8730319949605_134526937c", has il-index 18, has asm-address "0x804b7d9", has operation-type "MLIL_SET_VAR_SSA", has ins-text "edx_2#3 = [edi#1 + 0x8938].d @ mem#1";
(contains-instruction: $N_8730319949605_134526937c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319949605_134526937c isa instruction, has hash "N_8730319949605_134526937c"; 

insert
$N_8730319949605_134526937c_0 isa variable-ssa, has hash "N_8730319949605_134526937c_0", has var "edx_2", has version 3, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319949605_134526937c_0, from-node: $N_8730319949605_134526937c) isa node-link; 

match
$N_8730319949605_134526937c isa instruction, has hash "N_8730319949605_134526937c"; 

insert
$N_8730319949605_134526937c_1 isa MLIL_LOAD_SSA, has hash "N_8730319949605_134526937c_1", has edge-label "src";
(to-node: $N_8730319949605_134526937c_1, from-node: $N_8730319949605_134526937c) isa node-link; 

match
$N_8730319949605_134526937c_1 isa operation, has hash "N_8730319949605_134526937c_1"; 

insert
$N_8730319949605_134526937c_1_0 isa MLIL_ADD, has hash "N_8730319949605_134526937c_1_0", has edge-label "src";
(to-node: $N_8730319949605_134526937c_1_0, from-node: $N_8730319949605_134526937c_1) isa node-link; 

match
$N_8730319949605_134526937c_1_0 isa operation, has hash "N_8730319949605_134526937c_1_0"; 

insert
$N_8730319949605_134526937c_1_0_0 isa MLIL_VAR_SSA, has hash "N_8730319949605_134526937c_1_0_0", has edge-label "left";
(to-node: $N_8730319949605_134526937c_1_0_0, from-node: $N_8730319949605_134526937c_1_0) isa node-link; 

match
$N_8730319949605_134526937c_1_0_0 isa operation, has hash "N_8730319949605_134526937c_1_0_0"; 

insert
$N_8730319949605_134526937c_1_0_0_0 isa variable-ssa, has hash "N_8730319949605_134526937c_1_0_0_0", has var "edi", has version 1, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319949605_134526937c_1_0_0_0, from-node: $N_8730319949605_134526937c_1_0_0) isa node-link; 

match
$N_8730319949605_134526937c_1_0 isa operation, has hash "N_8730319949605_134526937c_1_0"; 

insert
$N_8730319949605_134526937c_1_0_1 isa MLIL_CONST, has hash "N_8730319949605_134526937c_1_0_1", has edge-label "right";
(to-node: $N_8730319949605_134526937c_1_0_1, from-node: $N_8730319949605_134526937c_1_0) isa node-link; 

match
$N_8730319949605_134526937c_1_0_1 isa operation, has hash "N_8730319949605_134526937c_1_0_1"; 

insert
$N_8730319949605_134526937c_1_0_1_0 isa constant, has hash "N_8730319949605_134526937c_1_0_1_0", has constant-value "35128", has edge-label "constant";
(to-node: $N_8730319949605_134526937c_1_0_1_0, from-node: $N_8730319949605_134526937c_1_0_1) isa node-link; 

match
$N_8730319949605_134526937c_1 isa operation, has hash "N_8730319949605_134526937c_1"; 

insert
$N_8730319949605_134526937c_1_1 isa constant, has hash "N_8730319949605_134526937c_1_1", has constant-value "1", has edge-label "src_memory";
(to-node: $N_8730319949605_134526937c_1_1, from-node: $N_8730319949605_134526937c_1) isa node-link; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 18, has bb-end 20; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 18, has bb-end 20; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319866649_134526943c isa instruction, has hash "N_8730319866649_134526943c", has il-index 19, has asm-address "0x804b7df", has operation-type "MLIL_SET_VAR_SSA", has ins-text "edx_3#4 = edx_2#3 + ecx_1#2";
(contains-instruction: $N_8730319866649_134526943c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319866649_134526943c isa instruction, has hash "N_8730319866649_134526943c"; 

insert
$N_8730319866649_134526943c_0 isa variable-ssa, has hash "N_8730319866649_134526943c_0", has var "edx_3", has version 4, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319866649_134526943c_0, from-node: $N_8730319866649_134526943c) isa node-link; 

match
$N_8730319866649_134526943c isa instruction, has hash "N_8730319866649_134526943c"; 

insert
$N_8730319866649_134526943c_1 isa MLIL_ADD, has hash "N_8730319866649_134526943c_1", has edge-label "src";
(to-node: $N_8730319866649_134526943c_1, from-node: $N_8730319866649_134526943c) isa node-link; 

match
$N_8730319866649_134526943c_1 isa operation, has hash "N_8730319866649_134526943c_1"; 

insert
$N_8730319866649_134526943c_1_0 isa MLIL_VAR_SSA, has hash "N_8730319866649_134526943c_1_0", has edge-label "left";
(to-node: $N_8730319866649_134526943c_1_0, from-node: $N_8730319866649_134526943c_1) isa node-link; 

match
$N_8730319866649_134526943c_1_0 isa operation, has hash "N_8730319866649_134526943c_1_0"; 

insert
$N_8730319866649_134526943c_1_0_0 isa variable-ssa, has hash "N_8730319866649_134526943c_1_0_0", has var "edx_2", has version 3, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319866649_134526943c_1_0_0, from-node: $N_8730319866649_134526943c_1_0) isa node-link; 

match
$N_8730319866649_134526943c_1 isa operation, has hash "N_8730319866649_134526943c_1"; 

insert
$N_8730319866649_134526943c_1_1 isa MLIL_VAR_SSA, has hash "N_8730319866649_134526943c_1_1", has edge-label "right";
(to-node: $N_8730319866649_134526943c_1_1, from-node: $N_8730319866649_134526943c_1) isa node-link; 

match
$N_8730319866649_134526943c_1_1 isa operation, has hash "N_8730319866649_134526943c_1_1"; 

insert
$N_8730319866649_134526943c_1_1_0 isa variable-ssa, has hash "N_8730319866649_134526943c_1_1_0", has var "ecx_1", has version 2, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319866649_134526943c_1_1_0, from-node: $N_8730319866649_134526943c_1_1) isa node-link; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 18, has bb-end 20; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 18, has bb-end 20; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319842821_134526951c isa instruction, has hash "N_8730319842821_134526951c", has il-index 20, has asm-address "0x804b7e7", has operation-type "MLIL_IF", has ins-text "if (edx_3#4 u> [edi#1 + 0x893c].d @ mem#1) then 21 @ 0x0 else 22 @ 0x804b7e9";
(contains-instruction: $N_8730319842821_134526951c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319842821_134526951c isa instruction, has hash "N_8730319842821_134526951c"; 

insert
$N_8730319842821_134526951c_0 isa MLIL_CMP_UGT, has hash "N_8730319842821_134526951c_0", has edge-label "condition";
(to-node: $N_8730319842821_134526951c_0, from-node: $N_8730319842821_134526951c) isa node-link; 

match
$N_8730319842821_134526951c_0 isa operation, has hash "N_8730319842821_134526951c_0"; 

insert
$N_8730319842821_134526951c_0_0 isa MLIL_VAR_SSA, has hash "N_8730319842821_134526951c_0_0", has edge-label "left";
(to-node: $N_8730319842821_134526951c_0_0, from-node: $N_8730319842821_134526951c_0) isa node-link; 

match
$N_8730319842821_134526951c_0_0 isa operation, has hash "N_8730319842821_134526951c_0_0"; 

insert
$N_8730319842821_134526951c_0_0_0 isa variable-ssa, has hash "N_8730319842821_134526951c_0_0_0", has var "edx_3", has version 4, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319842821_134526951c_0_0_0, from-node: $N_8730319842821_134526951c_0_0) isa node-link; 

match
$N_8730319842821_134526951c_0 isa operation, has hash "N_8730319842821_134526951c_0"; 

insert
$N_8730319842821_134526951c_0_1 isa MLIL_LOAD_SSA, has hash "N_8730319842821_134526951c_0_1", has edge-label "right";
(to-node: $N_8730319842821_134526951c_0_1, from-node: $N_8730319842821_134526951c_0) isa node-link; 

match
$N_8730319842821_134526951c_0_1 isa operation, has hash "N_8730319842821_134526951c_0_1"; 

insert
$N_8730319842821_134526951c_0_1_0 isa MLIL_ADD, has hash "N_8730319842821_134526951c_0_1_0", has edge-label "src";
(to-node: $N_8730319842821_134526951c_0_1_0, from-node: $N_8730319842821_134526951c_0_1) isa node-link; 

match
$N_8730319842821_134526951c_0_1_0 isa operation, has hash "N_8730319842821_134526951c_0_1_0"; 

insert
$N_8730319842821_134526951c_0_1_0_0 isa MLIL_VAR_SSA, has hash "N_8730319842821_134526951c_0_1_0_0", has edge-label "left";
(to-node: $N_8730319842821_134526951c_0_1_0_0, from-node: $N_8730319842821_134526951c_0_1_0) isa node-link; 

match
$N_8730319842821_134526951c_0_1_0_0 isa operation, has hash "N_8730319842821_134526951c_0_1_0_0"; 

insert
$N_8730319842821_134526951c_0_1_0_0_0 isa variable-ssa, has hash "N_8730319842821_134526951c_0_1_0_0_0", has var "edi", has version 1, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319842821_134526951c_0_1_0_0_0, from-node: $N_8730319842821_134526951c_0_1_0_0) isa node-link; 

match
$N_8730319842821_134526951c_0_1_0 isa operation, has hash "N_8730319842821_134526951c_0_1_0"; 

insert
$N_8730319842821_134526951c_0_1_0_1 isa MLIL_CONST, has hash "N_8730319842821_134526951c_0_1_0_1", has edge-label "right";
(to-node: $N_8730319842821_134526951c_0_1_0_1, from-node: $N_8730319842821_134526951c_0_1_0) isa node-link; 

match
$N_8730319842821_134526951c_0_1_0_1 isa operation, has hash "N_8730319842821_134526951c_0_1_0_1"; 

insert
$N_8730319842821_134526951c_0_1_0_1_0 isa constant, has hash "N_8730319842821_134526951c_0_1_0_1_0", has constant-value "35132", has edge-label "constant";
(to-node: $N_8730319842821_134526951c_0_1_0_1_0, from-node: $N_8730319842821_134526951c_0_1_0_1) isa node-link; 

match
$N_8730319842821_134526951c_0_1 isa operation, has hash "N_8730319842821_134526951c_0_1"; 

insert
$N_8730319842821_134526951c_0_1_1 isa constant, has hash "N_8730319842821_134526951c_0_1_1", has constant-value "1", has edge-label "src_memory";
(to-node: $N_8730319842821_134526951c_0_1_1, from-node: $N_8730319842821_134526951c_0_1) isa node-link; 

match
$N_8730319842821_134526951c isa instruction, has hash "N_8730319842821_134526951c"; 

insert
$N_8730319842821_134526951c_1 isa constant, has hash "N_8730319842821_134526951c_1", has constant-value "21", has edge-label "true";
(to-node: $N_8730319842821_134526951c_1, from-node: $N_8730319842821_134526951c) isa node-link; 

match
$N_8730319842821_134526951c isa instruction, has hash "N_8730319842821_134526951c"; 

insert
$N_8730319842821_134526951c_2 isa constant, has hash "N_8730319842821_134526951c_2", has constant-value "22", has edge-label "false";
(to-node: $N_8730319842821_134526951c_2, from-node: $N_8730319842821_134526951c) isa node-link; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 

insert 
$bb isa basic-block, has bb-start 21, has bb-end 21; 
(contains-basic-block: $bb, in-function: $func_cgc_get_string) isa has-basic-block; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 

insert 
$bb isa basic-block, has bb-start 22, has bb-end 30; 
(contains-basic-block: $bb, in-function: $func_cgc_get_string) isa has-basic-block; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 22, has bb-end 30; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 22, has bb-end 30; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319908129_134526953c isa instruction, has hash "N_8730319908129_134526953c", has il-index 22, has asm-address "0x804b7e9", has operation-type "MLIL_SET_VAR_SSA", has ins-text "eax_2#3 = zx.d(ecx_1#2.cx)";
(contains-instruction: $N_8730319908129_134526953c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319908129_134526953c isa instruction, has hash "N_8730319908129_134526953c"; 

insert
$N_8730319908129_134526953c_0 isa variable-ssa, has hash "N_8730319908129_134526953c_0", has var "eax_2", has version 3, has edge-label "dest", has var-type "uint32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319908129_134526953c_0, from-node: $N_8730319908129_134526953c) isa node-link; 

match
$N_8730319908129_134526953c isa instruction, has hash "N_8730319908129_134526953c"; 

insert
$N_8730319908129_134526953c_1 isa MLIL_ZX, has hash "N_8730319908129_134526953c_1", has edge-label "src";
(to-node: $N_8730319908129_134526953c_1, from-node: $N_8730319908129_134526953c) isa node-link; 

match
$N_8730319908129_134526953c_1 isa operation, has hash "N_8730319908129_134526953c_1"; 

insert
$N_8730319908129_134526953c_1_0 isa MLIL_VAR_SSA_FIELD, has hash "N_8730319908129_134526953c_1_0", has edge-label "src";
(to-node: $N_8730319908129_134526953c_1_0, from-node: $N_8730319908129_134526953c_1) isa node-link; 

match
$N_8730319908129_134526953c_1_0 isa operation, has hash "N_8730319908129_134526953c_1_0"; 

insert
$N_8730319908129_134526953c_1_0_0 isa variable-ssa, has hash "N_8730319908129_134526953c_1_0_0", has var "ecx_1", has version 2, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319908129_134526953c_1_0_0, from-node: $N_8730319908129_134526953c_1_0) isa node-link; 

match
$N_8730319908129_134526953c_1_0 isa operation, has hash "N_8730319908129_134526953c_1_0"; 

insert
$N_8730319908129_134526953c_1_0_1 isa constant, has hash "N_8730319908129_134526953c_1_0_1", has constant-value "0", has edge-label "offset";
(to-node: $N_8730319908129_134526953c_1_0_1, from-node: $N_8730319908129_134526953c_1_0) isa node-link; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 22, has bb-end 30; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 22, has bb-end 30; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319862821_134526956c isa instruction, has hash "N_8730319862821_134526956c", has il-index 23, has asm-address "0x804b7ec", has operation-type "MLIL_SET_VAR_SSA", has ins-text "var_1c_1#1 = eax_2#3";
(contains-instruction: $N_8730319862821_134526956c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319862821_134526956c isa instruction, has hash "N_8730319862821_134526956c"; 

insert
$N_8730319862821_134526956c_0 isa variable-ssa, has hash "N_8730319862821_134526956c_0", has var "var_1c_1", has version 1, has edge-label "dest", has var-type "uint32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319862821_134526956c_0, from-node: $N_8730319862821_134526956c) isa node-link; 

match
$N_8730319862821_134526956c isa instruction, has hash "N_8730319862821_134526956c"; 

insert
$N_8730319862821_134526956c_1 isa MLIL_VAR_SSA, has hash "N_8730319862821_134526956c_1", has edge-label "src";
(to-node: $N_8730319862821_134526956c_1, from-node: $N_8730319862821_134526956c) isa node-link; 

match
$N_8730319862821_134526956c_1 isa operation, has hash "N_8730319862821_134526956c_1"; 

insert
$N_8730319862821_134526956c_1_0 isa variable-ssa, has hash "N_8730319862821_134526956c_1_0", has var "eax_2", has version 3, has edge-label "src", has var-type "uint32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319862821_134526956c_1_0, from-node: $N_8730319862821_134526956c_1) isa node-link; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 22, has bb-end 30; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 22, has bb-end 30; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319885061_134526959c isa instruction, has hash "N_8730319885061_134526959c", has il-index 24, has asm-address "0x804b7ef", has operation-type "MLIL_SET_VAR_SSA", has ins-text "ecx_2#3 = edi#1";
(contains-instruction: $N_8730319885061_134526959c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319885061_134526959c isa instruction, has hash "N_8730319885061_134526959c"; 

insert
$N_8730319885061_134526959c_0 isa variable-ssa, has hash "N_8730319885061_134526959c_0", has var "ecx_2", has version 3, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319885061_134526959c_0, from-node: $N_8730319885061_134526959c) isa node-link; 

match
$N_8730319885061_134526959c isa instruction, has hash "N_8730319885061_134526959c"; 

insert
$N_8730319885061_134526959c_1 isa MLIL_VAR_SSA, has hash "N_8730319885061_134526959c_1", has edge-label "src";
(to-node: $N_8730319885061_134526959c_1, from-node: $N_8730319885061_134526959c) isa node-link; 

match
$N_8730319885061_134526959c_1 isa operation, has hash "N_8730319885061_134526959c_1"; 

insert
$N_8730319885061_134526959c_1_0 isa variable-ssa, has hash "N_8730319885061_134526959c_1_0", has var "edi", has version 1, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319885061_134526959c_1_0, from-node: $N_8730319885061_134526959c_1) isa node-link; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 22, has bb-end 30; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 22, has bb-end 30; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319836421_134526961c isa instruction, has hash "N_8730319836421_134526961c", has il-index 25, has asm-address "0x804b7f1", has operation-type "MLIL_SET_VAR_SSA", has ins-text "edx_4#5 = esi#1";
(contains-instruction: $N_8730319836421_134526961c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319836421_134526961c isa instruction, has hash "N_8730319836421_134526961c"; 

insert
$N_8730319836421_134526961c_0 isa variable-ssa, has hash "N_8730319836421_134526961c_0", has var "edx_4", has version 5, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319836421_134526961c_0, from-node: $N_8730319836421_134526961c) isa node-link; 

match
$N_8730319836421_134526961c isa instruction, has hash "N_8730319836421_134526961c"; 

insert
$N_8730319836421_134526961c_1 isa MLIL_VAR_SSA, has hash "N_8730319836421_134526961c_1", has edge-label "src";
(to-node: $N_8730319836421_134526961c_1, from-node: $N_8730319836421_134526961c) isa node-link; 

match
$N_8730319836421_134526961c_1 isa operation, has hash "N_8730319836421_134526961c_1"; 

insert
$N_8730319836421_134526961c_1_0 isa variable-ssa, has hash "N_8730319836421_134526961c_1_0", has var "esi", has version 1, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319836421_134526961c_1_0, from-node: $N_8730319836421_134526961c_1) isa node-link; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 22, has bb-end 30; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 22, has bb-end 30; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319919881_134526963c isa instruction, has hash "N_8730319919881_134526963c", has il-index 26, has asm-address "0x804b7f3", has operation-type "MLIL_CALL_SSA", has ins-text "mem#2 = 0x804b910(eax_2#3, edx_4#5, ecx_2#3, var_1c_1#1) @ mem#1";
(contains-instruction: $N_8730319919881_134526963c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319919881_134526963c isa instruction, has hash "N_8730319919881_134526963c"; 

insert
$N_8730319919881_134526963c_0 isa MLIL_CALL_OUTPUT_SSA, has hash "N_8730319919881_134526963c_0", has edge-label "output";
(to-node: $N_8730319919881_134526963c_0, from-node: $N_8730319919881_134526963c) isa node-link; 

match
$N_8730319919881_134526963c_0 isa operation, has hash "N_8730319919881_134526963c_0"; 

insert
$N_8730319919881_134526963c_0_0 isa constant, has hash "N_8730319919881_134526963c_0_0", has constant-value "2", has edge-label "dest_memory";
(to-node: $N_8730319919881_134526963c_0_0, from-node: $N_8730319919881_134526963c_0) isa node-link; 

match
$N_8730319919881_134526963c_0 isa operation, has hash "N_8730319919881_134526963c_0"; 

insert
$L_8730319919881_134526963c_0_1 isa list, has hash "L_8730319919881_134526963c_0_1", has list-size 0, has edge-label "dest";
(to-node: $L_8730319919881_134526963c_0_1, from-node: $N_8730319919881_134526963c_0) isa node-link; 

match
$N_8730319919881_134526963c isa instruction, has hash "N_8730319919881_134526963c"; 

insert
$N_8730319919881_134526963c_1 isa MLIL_CONST_PTR, has hash "N_8730319919881_134526963c_1", has edge-label "dest";
(to-node: $N_8730319919881_134526963c_1, from-node: $N_8730319919881_134526963c) isa node-link; 

match
$N_8730319919881_134526963c_1 isa operation, has hash "N_8730319919881_134526963c_1"; 

insert
$N_8730319919881_134526963c_1_0 isa constant, has hash "N_8730319919881_134526963c_1_0", has constant-value "134527248", has edge-label "constant";
(to-node: $N_8730319919881_134526963c_1_0, from-node: $N_8730319919881_134526963c_1) isa node-link; 

match
$N_8730319919881_134526963c isa instruction, has hash "N_8730319919881_134526963c"; 

insert
$L_8730319919881_134526963c_2 isa list, has hash "L_8730319919881_134526963c_2", has list-size 4, has edge-label "params";
(to-node: $L_8730319919881_134526963c_2, from-node: $N_8730319919881_134526963c) isa node-link; 

match
$L_8730319919881_134526963c_2 isa list, has hash "L_8730319919881_134526963c_2"; 

insert
$N_8730319919881_134526963c_2_0 isa MLIL_VAR_SSA, has hash "N_8730319919881_134526963c_2_0", has edge-label "0";
(to-node: $N_8730319919881_134526963c_2_0, from-node: $L_8730319919881_134526963c_2) isa node-link; 

match
$N_8730319919881_134526963c_2_0 isa operation, has hash "N_8730319919881_134526963c_2_0"; 

insert
$N_8730319919881_134526963c_2_0_0 isa variable-ssa, has hash "N_8730319919881_134526963c_2_0_0", has var "eax_2", has version 3, has edge-label "src", has var-type "uint32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319919881_134526963c_2_0_0, from-node: $N_8730319919881_134526963c_2_0) isa node-link; 

match
$L_8730319919881_134526963c_2 isa list, has hash "L_8730319919881_134526963c_2"; 

insert
$N_8730319919881_134526963c_2_1 isa MLIL_VAR_SSA, has hash "N_8730319919881_134526963c_2_1", has edge-label "1";
(to-node: $N_8730319919881_134526963c_2_1, from-node: $L_8730319919881_134526963c_2) isa node-link; 

match
$N_8730319919881_134526963c_2_1 isa operation, has hash "N_8730319919881_134526963c_2_1"; 

insert
$N_8730319919881_134526963c_2_1_0 isa variable-ssa, has hash "N_8730319919881_134526963c_2_1_0", has var "edx_4", has version 5, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319919881_134526963c_2_1_0, from-node: $N_8730319919881_134526963c_2_1) isa node-link; 

match
$L_8730319919881_134526963c_2 isa list, has hash "L_8730319919881_134526963c_2"; 

insert
$N_8730319919881_134526963c_2_2 isa MLIL_VAR_SSA, has hash "N_8730319919881_134526963c_2_2", has edge-label "2";
(to-node: $N_8730319919881_134526963c_2_2, from-node: $L_8730319919881_134526963c_2) isa node-link; 

match
$N_8730319919881_134526963c_2_2 isa operation, has hash "N_8730319919881_134526963c_2_2"; 

insert
$N_8730319919881_134526963c_2_2_0 isa variable-ssa, has hash "N_8730319919881_134526963c_2_2_0", has var "ecx_2", has version 3, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319919881_134526963c_2_2_0, from-node: $N_8730319919881_134526963c_2_2) isa node-link; 

match
$L_8730319919881_134526963c_2 isa list, has hash "L_8730319919881_134526963c_2"; 

insert
$N_8730319919881_134526963c_2_3 isa MLIL_VAR_SSA, has hash "N_8730319919881_134526963c_2_3", has edge-label "3";
(to-node: $N_8730319919881_134526963c_2_3, from-node: $L_8730319919881_134526963c_2) isa node-link; 

match
$N_8730319919881_134526963c_2_3 isa operation, has hash "N_8730319919881_134526963c_2_3"; 

insert
$N_8730319919881_134526963c_2_3_0 isa variable-ssa, has hash "N_8730319919881_134526963c_2_3_0", has var "var_1c_1", has version 1, has edge-label "src", has var-type "uint32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319919881_134526963c_2_3_0, from-node: $N_8730319919881_134526963c_2_3) isa node-link; 

match
$N_8730319919881_134526963c isa instruction, has hash "N_8730319919881_134526963c"; 

insert
$N_8730319919881_134526963c_3 isa constant, has hash "N_8730319919881_134526963c_3", has constant-value "1", has edge-label "src_memory";
(to-node: $N_8730319919881_134526963c_3, from-node: $N_8730319919881_134526963c) isa node-link; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 22, has bb-end 30; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 22, has bb-end 30; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319945225_134526968c isa instruction, has hash "N_8730319945225_134526968c", has il-index 27, has asm-address "0x804b7f8", has operation-type "MLIL_SET_VAR_SSA", has ins-text "eax_3#4 = var_c @ mem#2";
(contains-instruction: $N_8730319945225_134526968c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319945225_134526968c isa instruction, has hash "N_8730319945225_134526968c"; 

insert
$N_8730319945225_134526968c_0 isa variable-ssa, has hash "N_8730319945225_134526968c_0", has var "eax_3", has version 4, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319945225_134526968c_0, from-node: $N_8730319945225_134526968c) isa node-link; 

match
$N_8730319945225_134526968c isa instruction, has hash "N_8730319945225_134526968c"; 

insert
$N_8730319945225_134526968c_1 isa MLIL_VAR_ALIASED, has hash "N_8730319945225_134526968c_1", has edge-label "src";
(to-node: $N_8730319945225_134526968c_1, from-node: $N_8730319945225_134526968c) isa node-link; 

match
$N_8730319945225_134526968c_1 isa operation, has hash "N_8730319945225_134526968c_1"; 

insert
$N_8730319945225_134526968c_1_0 isa variable-ssa, has hash "N_8730319945225_134526968c_1_0", has var "var_c", has version 2, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319945225_134526968c_1_0, from-node: $N_8730319945225_134526968c_1) isa node-link; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 22, has bb-end 30; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 22, has bb-end 30; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319965197_134526972c isa instruction, has hash "N_8730319965197_134526972c", has il-index 28, has asm-address "0x804b7fc", has operation-type "MLIL_STORE_SSA", has ins-text "[esi#1 + eax_3#4].b = 0 @ mem#2 -> mem#3";
(contains-instruction: $N_8730319965197_134526972c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319965197_134526972c isa instruction, has hash "N_8730319965197_134526972c"; 

insert
$N_8730319965197_134526972c_0 isa MLIL_ADD, has hash "N_8730319965197_134526972c_0", has edge-label "dest";
(to-node: $N_8730319965197_134526972c_0, from-node: $N_8730319965197_134526972c) isa node-link; 

match
$N_8730319965197_134526972c_0 isa operation, has hash "N_8730319965197_134526972c_0"; 

insert
$N_8730319965197_134526972c_0_0 isa MLIL_VAR_SSA, has hash "N_8730319965197_134526972c_0_0", has edge-label "left";
(to-node: $N_8730319965197_134526972c_0_0, from-node: $N_8730319965197_134526972c_0) isa node-link; 

match
$N_8730319965197_134526972c_0_0 isa operation, has hash "N_8730319965197_134526972c_0_0"; 

insert
$N_8730319965197_134526972c_0_0_0 isa variable-ssa, has hash "N_8730319965197_134526972c_0_0_0", has var "esi", has version 1, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319965197_134526972c_0_0_0, from-node: $N_8730319965197_134526972c_0_0) isa node-link; 

match
$N_8730319965197_134526972c_0 isa operation, has hash "N_8730319965197_134526972c_0"; 

insert
$N_8730319965197_134526972c_0_1 isa MLIL_VAR_SSA, has hash "N_8730319965197_134526972c_0_1", has edge-label "right";
(to-node: $N_8730319965197_134526972c_0_1, from-node: $N_8730319965197_134526972c_0) isa node-link; 

match
$N_8730319965197_134526972c_0_1 isa operation, has hash "N_8730319965197_134526972c_0_1"; 

insert
$N_8730319965197_134526972c_0_1_0 isa variable-ssa, has hash "N_8730319965197_134526972c_0_1_0", has var "eax_3", has version 4, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319965197_134526972c_0_1_0, from-node: $N_8730319965197_134526972c_0_1) isa node-link; 

match
$N_8730319965197_134526972c isa instruction, has hash "N_8730319965197_134526972c"; 

insert
$N_8730319965197_134526972c_1 isa constant, has hash "N_8730319965197_134526972c_1", has constant-value "3", has edge-label "dest_memory";
(to-node: $N_8730319965197_134526972c_1, from-node: $N_8730319965197_134526972c) isa node-link; 

match
$N_8730319965197_134526972c isa instruction, has hash "N_8730319965197_134526972c"; 

insert
$N_8730319965197_134526972c_2 isa constant, has hash "N_8730319965197_134526972c_2", has constant-value "2", has edge-label "src_memory";
(to-node: $N_8730319965197_134526972c_2, from-node: $N_8730319965197_134526972c) isa node-link; 

match
$N_8730319965197_134526972c isa instruction, has hash "N_8730319965197_134526972c"; 

insert
$N_8730319965197_134526972c_3 isa MLIL_CONST, has hash "N_8730319965197_134526972c_3", has edge-label "src";
(to-node: $N_8730319965197_134526972c_3, from-node: $N_8730319965197_134526972c) isa node-link; 

match
$N_8730319965197_134526972c_3 isa operation, has hash "N_8730319965197_134526972c_3"; 

insert
$N_8730319965197_134526972c_3_0 isa constant, has hash "N_8730319965197_134526972c_3_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8730319965197_134526972c_3_0, from-node: $N_8730319965197_134526972c_3) isa node-link; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 22, has bb-end 30; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 22, has bb-end 30; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319901189_134526976c isa instruction, has hash "N_8730319901189_134526976c", has il-index 29, has asm-address "0x804b800", has operation-type "MLIL_SET_VAR_SSA", has ins-text "eax_1#5 = 1";
(contains-instruction: $N_8730319901189_134526976c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319901189_134526976c isa instruction, has hash "N_8730319901189_134526976c"; 

insert
$N_8730319901189_134526976c_0 isa variable-ssa, has hash "N_8730319901189_134526976c_0", has var "eax_1", has version 5, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string";
(to-node: $N_8730319901189_134526976c_0, from-node: $N_8730319901189_134526976c) isa node-link; 

match
$N_8730319901189_134526976c isa instruction, has hash "N_8730319901189_134526976c"; 

insert
$N_8730319901189_134526976c_1 isa MLIL_CONST, has hash "N_8730319901189_134526976c_1", has edge-label "src";
(to-node: $N_8730319901189_134526976c_1, from-node: $N_8730319901189_134526976c) isa node-link; 

match
$N_8730319901189_134526976c_1 isa operation, has hash "N_8730319901189_134526976c_1"; 

insert
$N_8730319901189_134526976c_1_0 isa constant, has hash "N_8730319901189_134526976c_1_0", has constant-value "1", has edge-label "constant";
(to-node: $N_8730319901189_134526976c_1_0, from-node: $N_8730319901189_134526976c_1) isa node-link; 

match
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$bb isa basic-block, has bb-start 22, has bb-end 30; 
(in-function: $func_cgc_get_string, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319941681_134526976c isa instruction, has hash "N_8730319941681_134526976c", has il-index 30, has asm-address "0x804b800", has operation-type "MLIL_GOTO", has ins-text "goto 11 @ 0x804b80a";
(contains-instruction: $N_8730319941681_134526976c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319941681_134526976c isa instruction, has hash "N_8730319941681_134526976c"; 

insert
$N_8730319941681_134526976c_0 isa constant, has hash "N_8730319941681_134526976c_0", has constant-value "11", has edge-label "dest";
(to-node: $N_8730319941681_134526976c_0, from-node: $N_8730319941681_134526976c) isa node-link; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$frombb isa basic-block, has bb-end 6, has bb-start 0; 
$tobb   isa basic-block, has bb-end 7, has bb-start 7; 
(contains-basic-block: $frombb, in-function: $func_cgc_get_string) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_cgc_get_string) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$frombb isa basic-block, has bb-end 6, has bb-start 0; 
$tobb   isa basic-block, has bb-end 10, has bb-start 8; 
(contains-basic-block: $frombb, in-function: $func_cgc_get_string) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_cgc_get_string) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$frombb isa basic-block, has bb-end 7, has bb-start 7; 
$tobb   isa basic-block, has bb-end 16, has bb-start 11; 
(contains-basic-block: $frombb, in-function: $func_cgc_get_string) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_cgc_get_string) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$frombb isa basic-block, has bb-end 10, has bb-start 8; 
$tobb   isa basic-block, has bb-end 17, has bb-start 17; 
(contains-basic-block: $frombb, in-function: $func_cgc_get_string) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_cgc_get_string) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$frombb isa basic-block, has bb-end 10, has bb-start 8; 
$tobb   isa basic-block, has bb-end 20, has bb-start 18; 
(contains-basic-block: $frombb, in-function: $func_cgc_get_string) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_cgc_get_string) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$frombb isa basic-block, has bb-end 17, has bb-start 17; 
$tobb   isa basic-block, has bb-end 16, has bb-start 11; 
(contains-basic-block: $frombb, in-function: $func_cgc_get_string) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_cgc_get_string) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$frombb isa basic-block, has bb-end 20, has bb-start 18; 
$tobb   isa basic-block, has bb-end 21, has bb-start 21; 
(contains-basic-block: $frombb, in-function: $func_cgc_get_string) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_cgc_get_string) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$frombb isa basic-block, has bb-end 20, has bb-start 18; 
$tobb   isa basic-block, has bb-end 30, has bb-start 22; 
(contains-basic-block: $frombb, in-function: $func_cgc_get_string) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_cgc_get_string) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$frombb isa basic-block, has bb-end 21, has bb-start 21; 
$tobb   isa basic-block, has bb-end 16, has bb-start 11; 
(contains-basic-block: $frombb, in-function: $func_cgc_get_string) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_cgc_get_string) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_cgc_get_string isa function, has name "cgc_get_string"; 
$frombb isa basic-block, has bb-end 30, has bb-start 22; 
$tobb   isa basic-block, has bb-end 16, has bb-start 11; 
(contains-basic-block: $frombb, in-function: $func_cgc_get_string) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_cgc_get_string) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

insert 
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy", has asm-address "0x804b910", has stack "[<var int32_t var_1c>, <var int32_t var_18>, <var uint32_t var_14>, <var int32_t __saved_esi>, <var int32_t __saved_edi>, <var int32_t __saved_ebx>, <var void* const __return_addr>, <var int16_t arg4>]"; 

match 
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 

insert 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(contains-basic-block: $bb, in-function: $func_cgc_safe_memcpy) isa has-basic-block; 

match 
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_safe_memcpy, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_safe_memcpy, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730321069113_134527254c isa instruction, has hash "N_8730321069113_134527254c", has il-index 0, has asm-address "0x804b916", has operation-type "MLIL_SET_VAR_SSA", has ins-text "esi#1 = arg3#0";
(contains-instruction: $N_8730321069113_134527254c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730321069113_134527254c isa instruction, has hash "N_8730321069113_134527254c"; 

insert
$N_8730321069113_134527254c_0 isa variable-ssa, has hash "N_8730321069113_134527254c_0", has var "esi", has version 1, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730321069113_134527254c_0, from-node: $N_8730321069113_134527254c) isa node-link; 

match
$N_8730321069113_134527254c isa instruction, has hash "N_8730321069113_134527254c"; 

insert
$N_8730321069113_134527254c_1 isa MLIL_VAR_SSA, has hash "N_8730321069113_134527254c_1", has edge-label "src";
(to-node: $N_8730321069113_134527254c_1, from-node: $N_8730321069113_134527254c) isa node-link; 

match
$N_8730321069113_134527254c_1 isa operation, has hash "N_8730321069113_134527254c_1"; 

insert
$N_8730321069113_134527254c_1_0 isa variable-ssa, has hash "N_8730321069113_134527254c_1_0", has var "arg3", has version 0, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730321069113_134527254c_1_0, from-node: $N_8730321069113_134527254c_1) isa node-link; 

match 
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_safe_memcpy, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_safe_memcpy, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730321069469_134527256c isa instruction, has hash "N_8730321069469_134527256c", has il-index 1, has asm-address "0x804b918", has operation-type "MLIL_SET_VAR_SSA", has ins-text "eax#1 = zx.d(arg4#0)";
(contains-instruction: $N_8730321069469_134527256c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730321069469_134527256c isa instruction, has hash "N_8730321069469_134527256c"; 

insert
$N_8730321069469_134527256c_0 isa variable-ssa, has hash "N_8730321069469_134527256c_0", has var "eax", has version 1, has edge-label "dest", has var-type "uint32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730321069469_134527256c_0, from-node: $N_8730321069469_134527256c) isa node-link; 

match
$N_8730321069469_134527256c isa instruction, has hash "N_8730321069469_134527256c"; 

insert
$N_8730321069469_134527256c_1 isa MLIL_ZX, has hash "N_8730321069469_134527256c_1", has edge-label "src";
(to-node: $N_8730321069469_134527256c_1, from-node: $N_8730321069469_134527256c) isa node-link; 

match
$N_8730321069469_134527256c_1 isa operation, has hash "N_8730321069469_134527256c_1"; 

insert
$N_8730321069469_134527256c_1_0 isa MLIL_VAR_SSA, has hash "N_8730321069469_134527256c_1_0", has edge-label "src";
(to-node: $N_8730321069469_134527256c_1_0, from-node: $N_8730321069469_134527256c_1) isa node-link; 

match
$N_8730321069469_134527256c_1_0 isa operation, has hash "N_8730321069469_134527256c_1_0"; 

insert
$N_8730321069469_134527256c_1_0_0 isa variable-ssa, has hash "N_8730321069469_134527256c_1_0_0", has var "arg4", has version 0, has edge-label "src", has var-type "int16_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730321069469_134527256c_1_0_0, from-node: $N_8730321069469_134527256c_1_0) isa node-link; 

match 
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_safe_memcpy, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_safe_memcpy, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730321069489_134527261c isa instruction, has hash "N_8730321069489_134527261c", has il-index 2, has asm-address "0x804b91d", has operation-type "MLIL_SET_VAR_SSA", has ins-text "ecx#1 = [esi#1 + 0x8938].d @ mem#0";
(contains-instruction: $N_8730321069489_134527261c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730321069489_134527261c isa instruction, has hash "N_8730321069489_134527261c"; 

insert
$N_8730321069489_134527261c_0 isa variable-ssa, has hash "N_8730321069489_134527261c_0", has var "ecx", has version 1, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730321069489_134527261c_0, from-node: $N_8730321069489_134527261c) isa node-link; 

match
$N_8730321069489_134527261c isa instruction, has hash "N_8730321069489_134527261c"; 

insert
$N_8730321069489_134527261c_1 isa MLIL_LOAD_SSA, has hash "N_8730321069489_134527261c_1", has edge-label "src";
(to-node: $N_8730321069489_134527261c_1, from-node: $N_8730321069489_134527261c) isa node-link; 

match
$N_8730321069489_134527261c_1 isa operation, has hash "N_8730321069489_134527261c_1"; 

insert
$N_8730321069489_134527261c_1_0 isa MLIL_ADD, has hash "N_8730321069489_134527261c_1_0", has edge-label "src";
(to-node: $N_8730321069489_134527261c_1_0, from-node: $N_8730321069489_134527261c_1) isa node-link; 

match
$N_8730321069489_134527261c_1_0 isa operation, has hash "N_8730321069489_134527261c_1_0"; 

insert
$N_8730321069489_134527261c_1_0_0 isa MLIL_VAR_SSA, has hash "N_8730321069489_134527261c_1_0_0", has edge-label "left";
(to-node: $N_8730321069489_134527261c_1_0_0, from-node: $N_8730321069489_134527261c_1_0) isa node-link; 

match
$N_8730321069489_134527261c_1_0_0 isa operation, has hash "N_8730321069489_134527261c_1_0_0"; 

insert
$N_8730321069489_134527261c_1_0_0_0 isa variable-ssa, has hash "N_8730321069489_134527261c_1_0_0_0", has var "esi", has version 1, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730321069489_134527261c_1_0_0_0, from-node: $N_8730321069489_134527261c_1_0_0) isa node-link; 

match
$N_8730321069489_134527261c_1_0 isa operation, has hash "N_8730321069489_134527261c_1_0"; 

insert
$N_8730321069489_134527261c_1_0_1 isa MLIL_CONST, has hash "N_8730321069489_134527261c_1_0_1", has edge-label "right";
(to-node: $N_8730321069489_134527261c_1_0_1, from-node: $N_8730321069489_134527261c_1_0) isa node-link; 

match
$N_8730321069489_134527261c_1_0_1 isa operation, has hash "N_8730321069489_134527261c_1_0_1"; 

insert
$N_8730321069489_134527261c_1_0_1_0 isa constant, has hash "N_8730321069489_134527261c_1_0_1_0", has constant-value "35128", has edge-label "constant";
(to-node: $N_8730321069489_134527261c_1_0_1_0, from-node: $N_8730321069489_134527261c_1_0_1) isa node-link; 

match
$N_8730321069489_134527261c_1 isa operation, has hash "N_8730321069489_134527261c_1"; 

insert
$N_8730321069489_134527261c_1_1 isa constant, has hash "N_8730321069489_134527261c_1_1", has constant-value "0", has edge-label "src_memory";
(to-node: $N_8730321069489_134527261c_1_1, from-node: $N_8730321069489_134527261c_1) isa node-link; 

match 
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_safe_memcpy, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_safe_memcpy, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319890837_134527267c isa instruction, has hash "N_8730319890837_134527267c", has il-index 3, has asm-address "0x804b923", has operation-type "MLIL_SET_VAR_SSA", has ins-text "edi#1 = eax#1";
(contains-instruction: $N_8730319890837_134527267c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319890837_134527267c isa instruction, has hash "N_8730319890837_134527267c"; 

insert
$N_8730319890837_134527267c_0 isa variable-ssa, has hash "N_8730319890837_134527267c_0", has var "edi", has version 1, has edge-label "dest", has var-type "uint32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730319890837_134527267c_0, from-node: $N_8730319890837_134527267c) isa node-link; 

match
$N_8730319890837_134527267c isa instruction, has hash "N_8730319890837_134527267c"; 

insert
$N_8730319890837_134527267c_1 isa MLIL_VAR_SSA, has hash "N_8730319890837_134527267c_1", has edge-label "src";
(to-node: $N_8730319890837_134527267c_1, from-node: $N_8730319890837_134527267c) isa node-link; 

match
$N_8730319890837_134527267c_1 isa operation, has hash "N_8730319890837_134527267c_1"; 

insert
$N_8730319890837_134527267c_1_0 isa variable-ssa, has hash "N_8730319890837_134527267c_1_0", has var "eax", has version 1, has edge-label "src", has var-type "uint32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730319890837_134527267c_1_0, from-node: $N_8730319890837_134527267c_1) isa node-link; 

match 
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_safe_memcpy, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_safe_memcpy, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319924997_134527269c isa instruction, has hash "N_8730319924997_134527269c", has il-index 4, has asm-address "0x804b925", has operation-type "MLIL_SET_VAR_SSA", has ins-text "edi_1#2 = edi#1 + ecx#1";
(contains-instruction: $N_8730319924997_134527269c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319924997_134527269c isa instruction, has hash "N_8730319924997_134527269c"; 

insert
$N_8730319924997_134527269c_0 isa variable-ssa, has hash "N_8730319924997_134527269c_0", has var "edi_1", has version 2, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730319924997_134527269c_0, from-node: $N_8730319924997_134527269c) isa node-link; 

match
$N_8730319924997_134527269c isa instruction, has hash "N_8730319924997_134527269c"; 

insert
$N_8730319924997_134527269c_1 isa MLIL_ADD, has hash "N_8730319924997_134527269c_1", has edge-label "src";
(to-node: $N_8730319924997_134527269c_1, from-node: $N_8730319924997_134527269c) isa node-link; 

match
$N_8730319924997_134527269c_1 isa operation, has hash "N_8730319924997_134527269c_1"; 

insert
$N_8730319924997_134527269c_1_0 isa MLIL_VAR_SSA, has hash "N_8730319924997_134527269c_1_0", has edge-label "left";
(to-node: $N_8730319924997_134527269c_1_0, from-node: $N_8730319924997_134527269c_1) isa node-link; 

match
$N_8730319924997_134527269c_1_0 isa operation, has hash "N_8730319924997_134527269c_1_0"; 

insert
$N_8730319924997_134527269c_1_0_0 isa variable-ssa, has hash "N_8730319924997_134527269c_1_0_0", has var "edi", has version 1, has edge-label "src", has var-type "uint32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730319924997_134527269c_1_0_0, from-node: $N_8730319924997_134527269c_1_0) isa node-link; 

match
$N_8730319924997_134527269c_1 isa operation, has hash "N_8730319924997_134527269c_1"; 

insert
$N_8730319924997_134527269c_1_1 isa MLIL_VAR_SSA, has hash "N_8730319924997_134527269c_1_1", has edge-label "right";
(to-node: $N_8730319924997_134527269c_1_1, from-node: $N_8730319924997_134527269c_1) isa node-link; 

match
$N_8730319924997_134527269c_1_1 isa operation, has hash "N_8730319924997_134527269c_1_1"; 

insert
$N_8730319924997_134527269c_1_1_0 isa variable-ssa, has hash "N_8730319924997_134527269c_1_1_0", has var "ecx", has version 1, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730319924997_134527269c_1_1_0, from-node: $N_8730319924997_134527269c_1_1) isa node-link; 

match 
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_safe_memcpy, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_safe_memcpy, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319954273_134527276c isa instruction, has hash "N_8730319954273_134527276c", has il-index 5, has asm-address "0x804b92c", has operation-type "MLIL_SET_VAR_SSA", has ins-text "ebx_1#1 = 0x88b8 - ecx#1";
(contains-instruction: $N_8730319954273_134527276c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319954273_134527276c isa instruction, has hash "N_8730319954273_134527276c"; 

insert
$N_8730319954273_134527276c_0 isa variable-ssa, has hash "N_8730319954273_134527276c_0", has var "ebx_1", has version 1, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730319954273_134527276c_0, from-node: $N_8730319954273_134527276c) isa node-link; 

match
$N_8730319954273_134527276c isa instruction, has hash "N_8730319954273_134527276c"; 

insert
$N_8730319954273_134527276c_1 isa MLIL_SUB, has hash "N_8730319954273_134527276c_1", has edge-label "src";
(to-node: $N_8730319954273_134527276c_1, from-node: $N_8730319954273_134527276c) isa node-link; 

match
$N_8730319954273_134527276c_1 isa operation, has hash "N_8730319954273_134527276c_1"; 

insert
$N_8730319954273_134527276c_1_0 isa MLIL_CONST, has hash "N_8730319954273_134527276c_1_0", has edge-label "left";
(to-node: $N_8730319954273_134527276c_1_0, from-node: $N_8730319954273_134527276c_1) isa node-link; 

match
$N_8730319954273_134527276c_1_0 isa operation, has hash "N_8730319954273_134527276c_1_0"; 

insert
$N_8730319954273_134527276c_1_0_0 isa constant, has hash "N_8730319954273_134527276c_1_0_0", has constant-value "35000", has edge-label "constant";
(to-node: $N_8730319954273_134527276c_1_0_0, from-node: $N_8730319954273_134527276c_1_0) isa node-link; 

match
$N_8730319954273_134527276c_1 isa operation, has hash "N_8730319954273_134527276c_1"; 

insert
$N_8730319954273_134527276c_1_1 isa MLIL_VAR_SSA, has hash "N_8730319954273_134527276c_1_1", has edge-label "right";
(to-node: $N_8730319954273_134527276c_1_1, from-node: $N_8730319954273_134527276c_1) isa node-link; 

match
$N_8730319954273_134527276c_1_1 isa operation, has hash "N_8730319954273_134527276c_1_1"; 

insert
$N_8730319954273_134527276c_1_1_0 isa variable-ssa, has hash "N_8730319954273_134527276c_1_1_0", has var "ecx", has version 1, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730319954273_134527276c_1_1_0, from-node: $N_8730319954273_134527276c_1_1) isa node-link; 

match 
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_safe_memcpy, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_safe_memcpy, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319916697_134527284c isa instruction, has hash "N_8730319916697_134527284c", has il-index 7, has asm-address "0x804b934", has operation-type "MLIL_SET_VAR_SSA_FIELD", has ins-text "ebx_1#2.bx = eax#1.ax @ ebx_1#1";
(contains-instruction: $N_8730319916697_134527284c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319916697_134527284c isa instruction, has hash "N_8730319916697_134527284c"; 

insert
$N_8730319916697_134527284c_0 isa variable-ssa, has hash "N_8730319916697_134527284c_0", has var "ebx_1", has version 2, has edge-label "prev", has var-type "int32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730319916697_134527284c_0, from-node: $N_8730319916697_134527284c) isa node-link; 

match
$N_8730319916697_134527284c isa instruction, has hash "N_8730319916697_134527284c"; 

insert
$N_8730319916697_134527284c_1 isa variable-ssa, has hash "N_8730319916697_134527284c_1", has var "ebx_1", has version 1, has edge-label "offset", has var-type "int32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730319916697_134527284c_1, from-node: $N_8730319916697_134527284c) isa node-link; 

match
$N_8730319916697_134527284c isa instruction, has hash "N_8730319916697_134527284c"; 

insert
$N_8730319916697_134527284c_2 isa constant, has hash "N_8730319916697_134527284c_2", has constant-value "0", has edge-label "src";
(to-node: $N_8730319916697_134527284c_2, from-node: $N_8730319916697_134527284c) isa node-link; 

match
$N_8730319916697_134527284c isa instruction, has hash "N_8730319916697_134527284c"; 

insert
$N_8730319916697_134527284c_3 isa MLIL_VAR_SSA_FIELD, has hash "N_8730319916697_134527284c_3", has edge-label "unimplemented";
(to-node: $N_8730319916697_134527284c_3, from-node: $N_8730319916697_134527284c) isa node-link; 

match
$N_8730319916697_134527284c_3 isa operation, has hash "N_8730319916697_134527284c_3"; 

insert
$N_8730319916697_134527284c_3_0 isa variable-ssa, has hash "N_8730319916697_134527284c_3_0", has var "eax", has version 1, has edge-label "src", has var-type "uint32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730319916697_134527284c_3_0, from-node: $N_8730319916697_134527284c_3) isa node-link; 

match
$N_8730319916697_134527284c_3 isa operation, has hash "N_8730319916697_134527284c_3"; 

insert
$N_8730319916697_134527284c_3_1 isa constant, has hash "N_8730319916697_134527284c_3_1", has constant-value "0", has edge-label "offset";
(to-node: $N_8730319916697_134527284c_3_1, from-node: $N_8730319916697_134527284c_3) isa node-link; 

match
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_safe_memcpy, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319924893_134527284c isa instruction, has hash "N_8730319924893_134527284c", has il-index 8, has asm-address "0x804b934", has operation-type "MLIL_GOTO", has ins-text "goto 10 @ 0x804b938";
(contains-instruction: $N_8730319924893_134527284c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319924893_134527284c isa instruction, has hash "N_8730319924893_134527284c"; 

insert
$N_8730319924893_134527284c_0 isa constant, has hash "N_8730319924893_134527284c_0", has constant-value "10", has edge-label "dest";
(to-node: $N_8730319924893_134527284c_0, from-node: $N_8730319924893_134527284c) isa node-link; 

match
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_safe_memcpy, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730321068957_134527284c isa instruction, has hash "N_8730321068957_134527284c", has il-index 6, has asm-address "0x804b934", has operation-type "MLIL_IF", has ins-text "if (edi_1#2 u<= 0x88b8) then 7 else 9 @ 0x0";
(contains-instruction: $N_8730321068957_134527284c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730321068957_134527284c isa instruction, has hash "N_8730321068957_134527284c"; 

insert
$N_8730321068957_134527284c_0 isa MLIL_CMP_ULE, has hash "N_8730321068957_134527284c_0", has edge-label "condition";
(to-node: $N_8730321068957_134527284c_0, from-node: $N_8730321068957_134527284c) isa node-link; 

match
$N_8730321068957_134527284c_0 isa operation, has hash "N_8730321068957_134527284c_0"; 

insert
$N_8730321068957_134527284c_0_0 isa MLIL_VAR_SSA, has hash "N_8730321068957_134527284c_0_0", has edge-label "left";
(to-node: $N_8730321068957_134527284c_0_0, from-node: $N_8730321068957_134527284c_0) isa node-link; 

match
$N_8730321068957_134527284c_0_0 isa operation, has hash "N_8730321068957_134527284c_0_0"; 

insert
$N_8730321068957_134527284c_0_0_0 isa variable-ssa, has hash "N_8730321068957_134527284c_0_0_0", has var "edi_1", has version 2, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730321068957_134527284c_0_0_0, from-node: $N_8730321068957_134527284c_0_0) isa node-link; 

match
$N_8730321068957_134527284c_0 isa operation, has hash "N_8730321068957_134527284c_0"; 

insert
$N_8730321068957_134527284c_0_1 isa MLIL_CONST, has hash "N_8730321068957_134527284c_0_1", has edge-label "right";
(to-node: $N_8730321068957_134527284c_0_1, from-node: $N_8730321068957_134527284c_0) isa node-link; 

match
$N_8730321068957_134527284c_0_1 isa operation, has hash "N_8730321068957_134527284c_0_1"; 

insert
$N_8730321068957_134527284c_0_1_0 isa constant, has hash "N_8730321068957_134527284c_0_1_0", has constant-value "35000", has edge-label "constant";
(to-node: $N_8730321068957_134527284c_0_1_0, from-node: $N_8730321068957_134527284c_0_1) isa node-link; 

match
$N_8730321068957_134527284c isa instruction, has hash "N_8730321068957_134527284c"; 

insert
$N_8730321068957_134527284c_1 isa constant, has hash "N_8730321068957_134527284c_1", has constant-value "7", has edge-label "true";
(to-node: $N_8730321068957_134527284c_1, from-node: $N_8730321068957_134527284c) isa node-link; 

match
$N_8730321068957_134527284c isa instruction, has hash "N_8730321068957_134527284c"; 

insert
$N_8730321068957_134527284c_2 isa constant, has hash "N_8730321068957_134527284c_2", has constant-value "9", has edge-label "false";
(to-node: $N_8730321068957_134527284c_2, from-node: $N_8730321068957_134527284c) isa node-link; 

match 
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 

insert 
$bb isa basic-block, has bb-start 7, has bb-end 8; 
(contains-basic-block: $bb, in-function: $func_cgc_safe_memcpy) isa has-basic-block; 

match 
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 

insert 
$bb isa basic-block, has bb-start 9, has bb-end 9; 
(contains-basic-block: $bb, in-function: $func_cgc_safe_memcpy) isa has-basic-block; 

match 
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$bb isa basic-block, has bb-start 9, has bb-end 9; 
(in-function: $func_cgc_safe_memcpy, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$bb isa basic-block, has bb-start 9, has bb-end 9; 
(in-function: $func_cgc_safe_memcpy, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319891861_0c isa instruction, has hash "N_8730319891861_0c", has il-index 9, has asm-address "0x0", has operation-type "MLIL_GOTO", has ins-text "goto 10 @ 0x804b938";
(contains-instruction: $N_8730319891861_0c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319891861_0c isa instruction, has hash "N_8730319891861_0c"; 

insert
$N_8730319891861_0c_0 isa constant, has hash "N_8730319891861_0c_0", has constant-value "10", has edge-label "dest";
(to-node: $N_8730319891861_0c_0, from-node: $N_8730319891861_0c) isa node-link; 

match 
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 

insert 
$bb isa basic-block, has bb-start 10, has bb-end 18; 
(contains-basic-block: $bb, in-function: $func_cgc_safe_memcpy) isa has-basic-block; 

match 
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$bb isa basic-block, has bb-start 10, has bb-end 18; 
(in-function: $func_cgc_safe_memcpy, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$bb isa basic-block, has bb-start 10, has bb-end 18; 
(in-function: $func_cgc_safe_memcpy, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319952513_134527288c isa instruction, has hash "N_8730319952513_134527288c", has il-index 11, has asm-address "0x804b938", has operation-type "MLIL_SET_VAR_SSA", has ins-text "eax_1#2 = esi#1 + ecx#1 + 0x80";
(contains-instruction: $N_8730319952513_134527288c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319952513_134527288c isa instruction, has hash "N_8730319952513_134527288c"; 

insert
$N_8730319952513_134527288c_0 isa variable-ssa, has hash "N_8730319952513_134527288c_0", has var "eax_1", has version 2, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730319952513_134527288c_0, from-node: $N_8730319952513_134527288c) isa node-link; 

match
$N_8730319952513_134527288c isa instruction, has hash "N_8730319952513_134527288c"; 

insert
$N_8730319952513_134527288c_1 isa MLIL_ADD, has hash "N_8730319952513_134527288c_1", has edge-label "src";
(to-node: $N_8730319952513_134527288c_1, from-node: $N_8730319952513_134527288c) isa node-link; 

match
$N_8730319952513_134527288c_1 isa operation, has hash "N_8730319952513_134527288c_1"; 

insert
$N_8730319952513_134527288c_1_0 isa MLIL_ADD, has hash "N_8730319952513_134527288c_1_0", has edge-label "left";
(to-node: $N_8730319952513_134527288c_1_0, from-node: $N_8730319952513_134527288c_1) isa node-link; 

match
$N_8730319952513_134527288c_1_0 isa operation, has hash "N_8730319952513_134527288c_1_0"; 

insert
$N_8730319952513_134527288c_1_0_0 isa MLIL_VAR_SSA, has hash "N_8730319952513_134527288c_1_0_0", has edge-label "left";
(to-node: $N_8730319952513_134527288c_1_0_0, from-node: $N_8730319952513_134527288c_1_0) isa node-link; 

match
$N_8730319952513_134527288c_1_0_0 isa operation, has hash "N_8730319952513_134527288c_1_0_0"; 

insert
$N_8730319952513_134527288c_1_0_0_0 isa variable-ssa, has hash "N_8730319952513_134527288c_1_0_0_0", has var "esi", has version 1, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730319952513_134527288c_1_0_0_0, from-node: $N_8730319952513_134527288c_1_0_0) isa node-link; 

match
$N_8730319952513_134527288c_1_0 isa operation, has hash "N_8730319952513_134527288c_1_0"; 

insert
$N_8730319952513_134527288c_1_0_1 isa MLIL_VAR_SSA, has hash "N_8730319952513_134527288c_1_0_1", has edge-label "right";
(to-node: $N_8730319952513_134527288c_1_0_1, from-node: $N_8730319952513_134527288c_1_0) isa node-link; 

match
$N_8730319952513_134527288c_1_0_1 isa operation, has hash "N_8730319952513_134527288c_1_0_1"; 

insert
$N_8730319952513_134527288c_1_0_1_0 isa variable-ssa, has hash "N_8730319952513_134527288c_1_0_1_0", has var "ecx", has version 1, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730319952513_134527288c_1_0_1_0, from-node: $N_8730319952513_134527288c_1_0_1) isa node-link; 

match
$N_8730319952513_134527288c_1 isa operation, has hash "N_8730319952513_134527288c_1"; 

insert
$N_8730319952513_134527288c_1_1 isa MLIL_CONST, has hash "N_8730319952513_134527288c_1_1", has edge-label "right";
(to-node: $N_8730319952513_134527288c_1_1, from-node: $N_8730319952513_134527288c_1) isa node-link; 

match
$N_8730319952513_134527288c_1_1 isa operation, has hash "N_8730319952513_134527288c_1_1"; 

insert
$N_8730319952513_134527288c_1_1_0 isa constant, has hash "N_8730319952513_134527288c_1_1_0", has constant-value "128", has edge-label "constant";
(to-node: $N_8730319952513_134527288c_1_1_0, from-node: $N_8730319952513_134527288c_1_1) isa node-link; 

match
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$bb isa basic-block, has bb-start 10, has bb-end 18; 
(in-function: $func_cgc_safe_memcpy, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730321072781_134527288c isa instruction, has hash "N_8730321072781_134527288c", has il-index 10, has asm-address "0x804b938", has operation-type "MLIL_VAR_PHI", has ins-text "ebx_1#3 = ϕ(ebx_1#1, ebx#2)";
(contains-instruction: $N_8730321072781_134527288c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730321072781_134527288c isa instruction, has hash "N_8730321072781_134527288c"; 

insert
$N_8730321072781_134527288c_0 isa variable-ssa, has hash "N_8730321072781_134527288c_0", has var "ebx_1", has version 3, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730321072781_134527288c_0, from-node: $N_8730321072781_134527288c) isa node-link; 

match
$N_8730321072781_134527288c isa instruction, has hash "N_8730321072781_134527288c"; 

insert
$L_8730321072781_134527288c_1 isa list, has hash "L_8730321072781_134527288c_1", has list-size 2, has edge-label "src";
(to-node: $L_8730321072781_134527288c_1, from-node: $N_8730321072781_134527288c) isa node-link; 

match
$L_8730321072781_134527288c_1 isa list, has hash "L_8730321072781_134527288c_1"; 

insert
$N_8730321072781_134527288c_1_0 isa variable-ssa, has hash "N_8730321072781_134527288c_1_0", has var "ebx_1", has version 1, has edge-label "0", has var-type "int32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730321072781_134527288c_1_0, from-node: $L_8730321072781_134527288c_1) isa node-link; 

match
$L_8730321072781_134527288c_1 isa list, has hash "L_8730321072781_134527288c_1"; 

insert
$N_8730321072781_134527288c_1_1 isa variable-ssa, has hash "N_8730321072781_134527288c_1_1", has var "ebx", has version 2, has edge-label "1", has var-type "int32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730321072781_134527288c_1_1, from-node: $L_8730321072781_134527288c_1) isa node-link; 

match 
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$bb isa basic-block, has bb-start 10, has bb-end 18; 
(in-function: $func_cgc_safe_memcpy, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$bb isa basic-block, has bb-start 10, has bb-end 18; 
(in-function: $func_cgc_safe_memcpy, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319895045_134527295c isa instruction, has hash "N_8730319895045_134527295c", has il-index 12, has asm-address "0x804b93f", has operation-type "MLIL_SET_VAR_SSA", has ins-text "edi_2#3 = zx.d(ebx_1#3.bx)";
(contains-instruction: $N_8730319895045_134527295c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319895045_134527295c isa instruction, has hash "N_8730319895045_134527295c"; 

insert
$N_8730319895045_134527295c_0 isa variable-ssa, has hash "N_8730319895045_134527295c_0", has var "edi_2", has version 3, has edge-label "dest", has var-type "uint32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730319895045_134527295c_0, from-node: $N_8730319895045_134527295c) isa node-link; 

match
$N_8730319895045_134527295c isa instruction, has hash "N_8730319895045_134527295c"; 

insert
$N_8730319895045_134527295c_1 isa MLIL_ZX, has hash "N_8730319895045_134527295c_1", has edge-label "src";
(to-node: $N_8730319895045_134527295c_1, from-node: $N_8730319895045_134527295c) isa node-link; 

match
$N_8730319895045_134527295c_1 isa operation, has hash "N_8730319895045_134527295c_1"; 

insert
$N_8730319895045_134527295c_1_0 isa MLIL_VAR_SSA_FIELD, has hash "N_8730319895045_134527295c_1_0", has edge-label "src";
(to-node: $N_8730319895045_134527295c_1_0, from-node: $N_8730319895045_134527295c_1) isa node-link; 

match
$N_8730319895045_134527295c_1_0 isa operation, has hash "N_8730319895045_134527295c_1_0"; 

insert
$N_8730319895045_134527295c_1_0_0 isa variable-ssa, has hash "N_8730319895045_134527295c_1_0_0", has var "ebx_1", has version 3, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730319895045_134527295c_1_0_0, from-node: $N_8730319895045_134527295c_1_0) isa node-link; 

match
$N_8730319895045_134527295c_1_0 isa operation, has hash "N_8730319895045_134527295c_1_0"; 

insert
$N_8730319895045_134527295c_1_0_1 isa constant, has hash "N_8730319895045_134527295c_1_0_1", has constant-value "0", has edge-label "offset";
(to-node: $N_8730319895045_134527295c_1_0_1, from-node: $N_8730319895045_134527295c_1_0) isa node-link; 

match 
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$bb isa basic-block, has bb-start 10, has bb-end 18; 
(in-function: $func_cgc_safe_memcpy, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$bb isa basic-block, has bb-start 10, has bb-end 18; 
(in-function: $func_cgc_safe_memcpy, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319871357_134527298c isa instruction, has hash "N_8730319871357_134527298c", has il-index 13, has asm-address "0x804b942", has operation-type "MLIL_SET_VAR_SSA", has ins-text "var_18#1 = eax_1#2";
(contains-instruction: $N_8730319871357_134527298c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319871357_134527298c isa instruction, has hash "N_8730319871357_134527298c"; 

insert
$N_8730319871357_134527298c_0 isa variable-ssa, has hash "N_8730319871357_134527298c_0", has var "var_18", has version 1, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730319871357_134527298c_0, from-node: $N_8730319871357_134527298c) isa node-link; 

match
$N_8730319871357_134527298c isa instruction, has hash "N_8730319871357_134527298c"; 

insert
$N_8730319871357_134527298c_1 isa MLIL_VAR_SSA, has hash "N_8730319871357_134527298c_1", has edge-label "src";
(to-node: $N_8730319871357_134527298c_1, from-node: $N_8730319871357_134527298c) isa node-link; 

match
$N_8730319871357_134527298c_1 isa operation, has hash "N_8730319871357_134527298c_1"; 

insert
$N_8730319871357_134527298c_1_0 isa variable-ssa, has hash "N_8730319871357_134527298c_1_0", has var "eax_1", has version 2, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730319871357_134527298c_1_0, from-node: $N_8730319871357_134527298c_1) isa node-link; 

match 
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$bb isa basic-block, has bb-start 10, has bb-end 18; 
(in-function: $func_cgc_safe_memcpy, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$bb isa basic-block, has bb-start 10, has bb-end 18; 
(in-function: $func_cgc_safe_memcpy, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319905541_134527302c isa instruction, has hash "N_8730319905541_134527302c", has il-index 14, has asm-address "0x804b946", has operation-type "MLIL_SET_VAR_SSA", has ins-text "var_1c#1 = arg2#0";
(contains-instruction: $N_8730319905541_134527302c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319905541_134527302c isa instruction, has hash "N_8730319905541_134527302c"; 

insert
$N_8730319905541_134527302c_0 isa variable-ssa, has hash "N_8730319905541_134527302c_0", has var "var_1c", has version 1, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730319905541_134527302c_0, from-node: $N_8730319905541_134527302c) isa node-link; 

match
$N_8730319905541_134527302c isa instruction, has hash "N_8730319905541_134527302c"; 

insert
$N_8730319905541_134527302c_1 isa MLIL_VAR_SSA, has hash "N_8730319905541_134527302c_1", has edge-label "src";
(to-node: $N_8730319905541_134527302c_1, from-node: $N_8730319905541_134527302c) isa node-link; 

match
$N_8730319905541_134527302c_1 isa operation, has hash "N_8730319905541_134527302c_1"; 

insert
$N_8730319905541_134527302c_1_0 isa variable-ssa, has hash "N_8730319905541_134527302c_1_0", has var "arg2", has version 0, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730319905541_134527302c_1_0, from-node: $N_8730319905541_134527302c_1) isa node-link; 

match 
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$bb isa basic-block, has bb-start 10, has bb-end 18; 
(in-function: $func_cgc_safe_memcpy, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$bb isa basic-block, has bb-start 10, has bb-end 18; 
(in-function: $func_cgc_safe_memcpy, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319948549_134527305c isa instruction, has hash "N_8730319948549_134527305c", has il-index 15, has asm-address "0x804b949", has operation-type "MLIL_SET_VAR_SSA", has ins-text "var_14#1 = edi_2#3";
(contains-instruction: $N_8730319948549_134527305c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319948549_134527305c isa instruction, has hash "N_8730319948549_134527305c"; 

insert
$N_8730319948549_134527305c_0 isa variable-ssa, has hash "N_8730319948549_134527305c_0", has var "var_14", has version 1, has edge-label "dest", has var-type "uint32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730319948549_134527305c_0, from-node: $N_8730319948549_134527305c) isa node-link; 

match
$N_8730319948549_134527305c isa instruction, has hash "N_8730319948549_134527305c"; 

insert
$N_8730319948549_134527305c_1 isa MLIL_VAR_SSA, has hash "N_8730319948549_134527305c_1", has edge-label "src";
(to-node: $N_8730319948549_134527305c_1, from-node: $N_8730319948549_134527305c) isa node-link; 

match
$N_8730319948549_134527305c_1 isa operation, has hash "N_8730319948549_134527305c_1"; 

insert
$N_8730319948549_134527305c_1_0 isa variable-ssa, has hash "N_8730319948549_134527305c_1_0", has var "edi_2", has version 3, has edge-label "src", has var-type "uint32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730319948549_134527305c_1_0, from-node: $N_8730319948549_134527305c_1) isa node-link; 

match 
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$bb isa basic-block, has bb-start 10, has bb-end 18; 
(in-function: $func_cgc_safe_memcpy, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$bb isa basic-block, has bb-start 10, has bb-end 18; 
(in-function: $func_cgc_safe_memcpy, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319953669_134527309c isa instruction, has hash "N_8730319953669_134527309c", has il-index 16, has asm-address "0x804b94d", has operation-type "MLIL_CALL_SSA", has ins-text "eax_2#3, mem#1 = 0x804a140(var_1c#1, var_18#1, var_14#1) @ mem#0";
(contains-instruction: $N_8730319953669_134527309c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319953669_134527309c isa instruction, has hash "N_8730319953669_134527309c"; 

insert
$N_8730319953669_134527309c_0 isa MLIL_CALL_OUTPUT_SSA, has hash "N_8730319953669_134527309c_0", has edge-label "output";
(to-node: $N_8730319953669_134527309c_0, from-node: $N_8730319953669_134527309c) isa node-link; 

match
$N_8730319953669_134527309c_0 isa operation, has hash "N_8730319953669_134527309c_0"; 

insert
$N_8730319953669_134527309c_0_0 isa constant, has hash "N_8730319953669_134527309c_0_0", has constant-value "1", has edge-label "dest_memory";
(to-node: $N_8730319953669_134527309c_0_0, from-node: $N_8730319953669_134527309c_0) isa node-link; 

match
$N_8730319953669_134527309c_0 isa operation, has hash "N_8730319953669_134527309c_0"; 

insert
$L_8730319953669_134527309c_0_1 isa list, has hash "L_8730319953669_134527309c_0_1", has list-size 1, has edge-label "dest";
(to-node: $L_8730319953669_134527309c_0_1, from-node: $N_8730319953669_134527309c_0) isa node-link; 

match
$L_8730319953669_134527309c_0_1 isa list, has hash "L_8730319953669_134527309c_0_1"; 

insert
$N_8730319953669_134527309c_0_1_0 isa variable-ssa, has hash "N_8730319953669_134527309c_0_1_0", has var "eax_2", has version 3, has edge-label "0", has var-type "int32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730319953669_134527309c_0_1_0, from-node: $L_8730319953669_134527309c_0_1) isa node-link; 

match
$N_8730319953669_134527309c isa instruction, has hash "N_8730319953669_134527309c"; 

insert
$N_8730319953669_134527309c_1 isa MLIL_CONST_PTR, has hash "N_8730319953669_134527309c_1", has edge-label "dest";
(to-node: $N_8730319953669_134527309c_1, from-node: $N_8730319953669_134527309c) isa node-link; 

match
$N_8730319953669_134527309c_1 isa operation, has hash "N_8730319953669_134527309c_1"; 

insert
$N_8730319953669_134527309c_1_0 isa constant, has hash "N_8730319953669_134527309c_1_0", has constant-value "134521152", has edge-label "constant";
(to-node: $N_8730319953669_134527309c_1_0, from-node: $N_8730319953669_134527309c_1) isa node-link; 

match
$N_8730319953669_134527309c isa instruction, has hash "N_8730319953669_134527309c"; 

insert
$L_8730319953669_134527309c_2 isa list, has hash "L_8730319953669_134527309c_2", has list-size 3, has edge-label "params";
(to-node: $L_8730319953669_134527309c_2, from-node: $N_8730319953669_134527309c) isa node-link; 

match
$L_8730319953669_134527309c_2 isa list, has hash "L_8730319953669_134527309c_2"; 

insert
$N_8730319953669_134527309c_2_0 isa MLIL_VAR_SSA, has hash "N_8730319953669_134527309c_2_0", has edge-label "0";
(to-node: $N_8730319953669_134527309c_2_0, from-node: $L_8730319953669_134527309c_2) isa node-link; 

match
$N_8730319953669_134527309c_2_0 isa operation, has hash "N_8730319953669_134527309c_2_0"; 

insert
$N_8730319953669_134527309c_2_0_0 isa variable-ssa, has hash "N_8730319953669_134527309c_2_0_0", has var "var_1c", has version 1, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730319953669_134527309c_2_0_0, from-node: $N_8730319953669_134527309c_2_0) isa node-link; 

match
$L_8730319953669_134527309c_2 isa list, has hash "L_8730319953669_134527309c_2"; 

insert
$N_8730319953669_134527309c_2_1 isa MLIL_VAR_SSA, has hash "N_8730319953669_134527309c_2_1", has edge-label "1";
(to-node: $N_8730319953669_134527309c_2_1, from-node: $L_8730319953669_134527309c_2) isa node-link; 

match
$N_8730319953669_134527309c_2_1 isa operation, has hash "N_8730319953669_134527309c_2_1"; 

insert
$N_8730319953669_134527309c_2_1_0 isa variable-ssa, has hash "N_8730319953669_134527309c_2_1_0", has var "var_18", has version 1, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730319953669_134527309c_2_1_0, from-node: $N_8730319953669_134527309c_2_1) isa node-link; 

match
$L_8730319953669_134527309c_2 isa list, has hash "L_8730319953669_134527309c_2"; 

insert
$N_8730319953669_134527309c_2_2 isa MLIL_VAR_SSA, has hash "N_8730319953669_134527309c_2_2", has edge-label "2";
(to-node: $N_8730319953669_134527309c_2_2, from-node: $L_8730319953669_134527309c_2) isa node-link; 

match
$N_8730319953669_134527309c_2_2 isa operation, has hash "N_8730319953669_134527309c_2_2"; 

insert
$N_8730319953669_134527309c_2_2_0 isa variable-ssa, has hash "N_8730319953669_134527309c_2_2_0", has var "var_14", has version 1, has edge-label "src", has var-type "uint32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730319953669_134527309c_2_2_0, from-node: $N_8730319953669_134527309c_2_2) isa node-link; 

match
$N_8730319953669_134527309c isa instruction, has hash "N_8730319953669_134527309c"; 

insert
$N_8730319953669_134527309c_3 isa constant, has hash "N_8730319953669_134527309c_3", has constant-value "0", has edge-label "src_memory";
(to-node: $N_8730319953669_134527309c_3, from-node: $N_8730319953669_134527309c) isa node-link; 

match 
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$bb isa basic-block, has bb-start 10, has bb-end 18; 
(in-function: $func_cgc_safe_memcpy, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$bb isa basic-block, has bb-start 10, has bb-end 18; 
(in-function: $func_cgc_safe_memcpy, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319917177_134527314c isa instruction, has hash "N_8730319917177_134527314c", has il-index 17, has asm-address "0x804b952", has operation-type "MLIL_STORE_SSA", has ins-text "[esi#1 + 0x8938].d = [esi#1 + 0x8938].d @ mem#1 + edi_2#3 @ mem#1 -> mem#2";
(contains-instruction: $N_8730319917177_134527314c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319917177_134527314c isa instruction, has hash "N_8730319917177_134527314c"; 

insert
$N_8730319917177_134527314c_0 isa MLIL_ADD, has hash "N_8730319917177_134527314c_0", has edge-label "dest";
(to-node: $N_8730319917177_134527314c_0, from-node: $N_8730319917177_134527314c) isa node-link; 

match
$N_8730319917177_134527314c_0 isa operation, has hash "N_8730319917177_134527314c_0"; 

insert
$N_8730319917177_134527314c_0_0 isa MLIL_VAR_SSA, has hash "N_8730319917177_134527314c_0_0", has edge-label "left";
(to-node: $N_8730319917177_134527314c_0_0, from-node: $N_8730319917177_134527314c_0) isa node-link; 

match
$N_8730319917177_134527314c_0_0 isa operation, has hash "N_8730319917177_134527314c_0_0"; 

insert
$N_8730319917177_134527314c_0_0_0 isa variable-ssa, has hash "N_8730319917177_134527314c_0_0_0", has var "esi", has version 1, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730319917177_134527314c_0_0_0, from-node: $N_8730319917177_134527314c_0_0) isa node-link; 

match
$N_8730319917177_134527314c_0 isa operation, has hash "N_8730319917177_134527314c_0"; 

insert
$N_8730319917177_134527314c_0_1 isa MLIL_CONST, has hash "N_8730319917177_134527314c_0_1", has edge-label "right";
(to-node: $N_8730319917177_134527314c_0_1, from-node: $N_8730319917177_134527314c_0) isa node-link; 

match
$N_8730319917177_134527314c_0_1 isa operation, has hash "N_8730319917177_134527314c_0_1"; 

insert
$N_8730319917177_134527314c_0_1_0 isa constant, has hash "N_8730319917177_134527314c_0_1_0", has constant-value "35128", has edge-label "constant";
(to-node: $N_8730319917177_134527314c_0_1_0, from-node: $N_8730319917177_134527314c_0_1) isa node-link; 

match
$N_8730319917177_134527314c isa instruction, has hash "N_8730319917177_134527314c"; 

insert
$N_8730319917177_134527314c_1 isa constant, has hash "N_8730319917177_134527314c_1", has constant-value "2", has edge-label "dest_memory";
(to-node: $N_8730319917177_134527314c_1, from-node: $N_8730319917177_134527314c) isa node-link; 

match
$N_8730319917177_134527314c isa instruction, has hash "N_8730319917177_134527314c"; 

insert
$N_8730319917177_134527314c_2 isa constant, has hash "N_8730319917177_134527314c_2", has constant-value "1", has edge-label "src_memory";
(to-node: $N_8730319917177_134527314c_2, from-node: $N_8730319917177_134527314c) isa node-link; 

match
$N_8730319917177_134527314c isa instruction, has hash "N_8730319917177_134527314c"; 

insert
$N_8730319917177_134527314c_3 isa MLIL_ADD, has hash "N_8730319917177_134527314c_3", has edge-label "src";
(to-node: $N_8730319917177_134527314c_3, from-node: $N_8730319917177_134527314c) isa node-link; 

match
$N_8730319917177_134527314c_3 isa operation, has hash "N_8730319917177_134527314c_3"; 

insert
$N_8730319917177_134527314c_3_0 isa MLIL_LOAD_SSA, has hash "N_8730319917177_134527314c_3_0", has edge-label "left";
(to-node: $N_8730319917177_134527314c_3_0, from-node: $N_8730319917177_134527314c_3) isa node-link; 

match
$N_8730319917177_134527314c_3_0 isa operation, has hash "N_8730319917177_134527314c_3_0"; 

insert
$N_8730319917177_134527314c_3_0_0 isa MLIL_ADD, has hash "N_8730319917177_134527314c_3_0_0", has edge-label "src";
(to-node: $N_8730319917177_134527314c_3_0_0, from-node: $N_8730319917177_134527314c_3_0) isa node-link; 

match
$N_8730319917177_134527314c_3_0_0 isa operation, has hash "N_8730319917177_134527314c_3_0_0"; 

insert
$N_8730319917177_134527314c_3_0_0_0 isa MLIL_VAR_SSA, has hash "N_8730319917177_134527314c_3_0_0_0", has edge-label "left";
(to-node: $N_8730319917177_134527314c_3_0_0_0, from-node: $N_8730319917177_134527314c_3_0_0) isa node-link; 

match
$N_8730319917177_134527314c_3_0_0_0 isa operation, has hash "N_8730319917177_134527314c_3_0_0_0"; 

insert
$N_8730319917177_134527314c_3_0_0_0_0 isa variable-ssa, has hash "N_8730319917177_134527314c_3_0_0_0_0", has var "esi", has version 1, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730319917177_134527314c_3_0_0_0_0, from-node: $N_8730319917177_134527314c_3_0_0_0) isa node-link; 

match
$N_8730319917177_134527314c_3_0_0 isa operation, has hash "N_8730319917177_134527314c_3_0_0"; 

insert
$N_8730319917177_134527314c_3_0_0_1 isa MLIL_CONST, has hash "N_8730319917177_134527314c_3_0_0_1", has edge-label "right";
(to-node: $N_8730319917177_134527314c_3_0_0_1, from-node: $N_8730319917177_134527314c_3_0_0) isa node-link; 

match
$N_8730319917177_134527314c_3_0_0_1 isa operation, has hash "N_8730319917177_134527314c_3_0_0_1"; 

insert
$N_8730319917177_134527314c_3_0_0_1_0 isa constant, has hash "N_8730319917177_134527314c_3_0_0_1_0", has constant-value "35128", has edge-label "constant";
(to-node: $N_8730319917177_134527314c_3_0_0_1_0, from-node: $N_8730319917177_134527314c_3_0_0_1) isa node-link; 

match
$N_8730319917177_134527314c_3_0 isa operation, has hash "N_8730319917177_134527314c_3_0"; 

insert
$N_8730319917177_134527314c_3_0_1 isa constant, has hash "N_8730319917177_134527314c_3_0_1", has constant-value "1", has edge-label "src_memory";
(to-node: $N_8730319917177_134527314c_3_0_1, from-node: $N_8730319917177_134527314c_3_0) isa node-link; 

match
$N_8730319917177_134527314c_3 isa operation, has hash "N_8730319917177_134527314c_3"; 

insert
$N_8730319917177_134527314c_3_1 isa MLIL_VAR_SSA, has hash "N_8730319917177_134527314c_3_1", has edge-label "right";
(to-node: $N_8730319917177_134527314c_3_1, from-node: $N_8730319917177_134527314c_3) isa node-link; 

match
$N_8730319917177_134527314c_3_1 isa operation, has hash "N_8730319917177_134527314c_3_1"; 

insert
$N_8730319917177_134527314c_3_1_0 isa variable-ssa, has hash "N_8730319917177_134527314c_3_1_0", has var "edi_2", has version 3, has edge-label "src", has var-type "uint32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730319917177_134527314c_3_1_0, from-node: $N_8730319917177_134527314c_3_1) isa node-link; 

match 
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$bb isa basic-block, has bb-start 10, has bb-end 18; 
(in-function: $func_cgc_safe_memcpy, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$bb isa basic-block, has bb-start 10, has bb-end 18; 
(in-function: $func_cgc_safe_memcpy, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319958409_134527326c isa instruction, has hash "N_8730319958409_134527326c", has il-index 18, has asm-address "0x804b95e", has operation-type "MLIL_RET", has ins-text "return eax_2#3";
(contains-instruction: $N_8730319958409_134527326c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319958409_134527326c isa instruction, has hash "N_8730319958409_134527326c"; 

insert
$L_8730319958409_134527326c_0 isa list, has hash "L_8730319958409_134527326c_0", has list-size 1, has edge-label "src";
(to-node: $L_8730319958409_134527326c_0, from-node: $N_8730319958409_134527326c) isa node-link; 

match
$L_8730319958409_134527326c_0 isa list, has hash "L_8730319958409_134527326c_0"; 

insert
$N_8730319958409_134527326c_0_0 isa MLIL_VAR_SSA, has hash "N_8730319958409_134527326c_0_0", has edge-label "0";
(to-node: $N_8730319958409_134527326c_0_0, from-node: $L_8730319958409_134527326c_0) isa node-link; 

match
$N_8730319958409_134527326c_0_0 isa operation, has hash "N_8730319958409_134527326c_0_0"; 

insert
$N_8730319958409_134527326c_0_0_0 isa variable-ssa, has hash "N_8730319958409_134527326c_0_0_0", has var "eax_2", has version 3, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_safe_memcpy";
(to-node: $N_8730319958409_134527326c_0_0_0, from-node: $N_8730319958409_134527326c_0_0) isa node-link; 

match 
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$frombb isa basic-block, has bb-end 6, has bb-start 0; 
$tobb   isa basic-block, has bb-end 8, has bb-start 7; 
(contains-basic-block: $frombb, in-function: $func_cgc_safe_memcpy) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_cgc_safe_memcpy) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$frombb isa basic-block, has bb-end 6, has bb-start 0; 
$tobb   isa basic-block, has bb-end 9, has bb-start 9; 
(contains-basic-block: $frombb, in-function: $func_cgc_safe_memcpy) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_cgc_safe_memcpy) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$frombb isa basic-block, has bb-end 8, has bb-start 7; 
$tobb   isa basic-block, has bb-end 18, has bb-start 10; 
(contains-basic-block: $frombb, in-function: $func_cgc_safe_memcpy) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_cgc_safe_memcpy) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_cgc_safe_memcpy isa function, has name "cgc_safe_memcpy"; 
$frombb isa basic-block, has bb-end 9, has bb-start 9; 
$tobb   isa basic-block, has bb-end 18, has bb-start 10; 
(contains-basic-block: $frombb, in-function: $func_cgc_safe_memcpy) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_cgc_safe_memcpy) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

insert 
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc", has asm-address "0x804b960", has stack "[<var int32_t var_1c>, <var uint32_t var_1c_1>, <var int32_t var_c>, <var int32_t __saved_esi>, <var int32_t __saved_edi>, <var void* const __return_addr>]"; 

match 
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 

insert 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(contains-basic-block: $bb, in-function: $func_cgc_get_string_alloc) isa has-basic-block; 

match 
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319994061_134527333c isa instruction, has hash "N_8730319994061_134527333c", has il-index 0, has asm-address "0x804b965", has operation-type "MLIL_SET_VAR_SSA", has ins-text "esi#1 = arg2#0";
(contains-instruction: $N_8730319994061_134527333c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319994061_134527333c isa instruction, has hash "N_8730319994061_134527333c"; 

insert
$N_8730319994061_134527333c_0 isa variable-ssa, has hash "N_8730319994061_134527333c_0", has var "esi", has version 1, has edge-label "dest", has var-type "int32_t*", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319994061_134527333c_0, from-node: $N_8730319994061_134527333c) isa node-link; 

match
$N_8730319994061_134527333c isa instruction, has hash "N_8730319994061_134527333c"; 

insert
$N_8730319994061_134527333c_1 isa MLIL_VAR_SSA, has hash "N_8730319994061_134527333c_1", has edge-label "src";
(to-node: $N_8730319994061_134527333c_1, from-node: $N_8730319994061_134527333c) isa node-link; 

match
$N_8730319994061_134527333c_1 isa operation, has hash "N_8730319994061_134527333c_1"; 

insert
$N_8730319994061_134527333c_1_0 isa variable-ssa, has hash "N_8730319994061_134527333c_1_0", has var "arg2", has version 0, has edge-label "src", has var-type "int32_t*", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319994061_134527333c_1_0, from-node: $N_8730319994061_134527333c_1) isa node-link; 

match 
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730321074109_134527335c isa instruction, has hash "N_8730321074109_134527335c", has il-index 1, has asm-address "0x804b967", has operation-type "MLIL_SET_VAR_SSA", has ins-text "edi#1 = arg3#0";
(contains-instruction: $N_8730321074109_134527335c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730321074109_134527335c isa instruction, has hash "N_8730321074109_134527335c"; 

insert
$N_8730321074109_134527335c_0 isa variable-ssa, has hash "N_8730321074109_134527335c_0", has var "edi", has version 1, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730321074109_134527335c_0, from-node: $N_8730321074109_134527335c) isa node-link; 

match
$N_8730321074109_134527335c isa instruction, has hash "N_8730321074109_134527335c"; 

insert
$N_8730321074109_134527335c_1 isa MLIL_VAR_SSA, has hash "N_8730321074109_134527335c_1", has edge-label "src";
(to-node: $N_8730321074109_134527335c_1, from-node: $N_8730321074109_134527335c) isa node-link; 

match
$N_8730321074109_134527335c_1 isa operation, has hash "N_8730321074109_134527335c_1"; 

insert
$N_8730321074109_134527335c_1_0 isa variable-ssa, has hash "N_8730321074109_134527335c_1_0", has var "arg3", has version 0, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730321074109_134527335c_1_0, from-node: $N_8730321074109_134527335c_1) isa node-link; 

match 
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319941125_134527337c isa instruction, has hash "N_8730319941125_134527337c", has il-index 2, has asm-address "0x804b969", has operation-type "MLIL_SET_VAR_SSA", has ins-text "edx#1 = &var_c";
(contains-instruction: $N_8730319941125_134527337c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319941125_134527337c isa instruction, has hash "N_8730319941125_134527337c"; 

insert
$N_8730319941125_134527337c_0 isa variable-ssa, has hash "N_8730319941125_134527337c_0", has var "edx", has version 1, has edge-label "dest", has var-type "int32_t*", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319941125_134527337c_0, from-node: $N_8730319941125_134527337c) isa node-link; 

match
$N_8730319941125_134527337c isa instruction, has hash "N_8730319941125_134527337c"; 

insert
$N_8730319941125_134527337c_1 isa MLIL_ADDRESS_OF, has hash "N_8730319941125_134527337c_1", has edge-label "src";
(to-node: $N_8730319941125_134527337c_1, from-node: $N_8730319941125_134527337c) isa node-link; 

match
$N_8730319941125_134527337c_1 isa operation, has hash "N_8730319941125_134527337c_1"; 

insert
$N_8730319941125_134527337c_1_0 isa variable, has hash "N_8730319941125_134527337c_1_0", has var "var_c", has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319941125_134527337c_1_0, from-node: $N_8730319941125_134527337c_1) isa node-link; 

match 
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730320004869_134527341c isa instruction, has hash "N_8730320004869_134527341c", has il-index 3, has asm-address "0x804b96d", has operation-type "MLIL_CALL_SSA", has ins-text "eax#1, mem#1 = 0x804b730(arg1#0, edx#1, arg3#0) @ mem#0";
(contains-instruction: $N_8730320004869_134527341c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730320004869_134527341c isa instruction, has hash "N_8730320004869_134527341c"; 

insert
$N_8730320004869_134527341c_0 isa MLIL_CALL_OUTPUT_SSA, has hash "N_8730320004869_134527341c_0", has edge-label "output";
(to-node: $N_8730320004869_134527341c_0, from-node: $N_8730320004869_134527341c) isa node-link; 

match
$N_8730320004869_134527341c_0 isa operation, has hash "N_8730320004869_134527341c_0"; 

insert
$N_8730320004869_134527341c_0_0 isa constant, has hash "N_8730320004869_134527341c_0_0", has constant-value "1", has edge-label "dest_memory";
(to-node: $N_8730320004869_134527341c_0_0, from-node: $N_8730320004869_134527341c_0) isa node-link; 

match
$N_8730320004869_134527341c_0 isa operation, has hash "N_8730320004869_134527341c_0"; 

insert
$L_8730320004869_134527341c_0_1 isa list, has hash "L_8730320004869_134527341c_0_1", has list-size 1, has edge-label "dest";
(to-node: $L_8730320004869_134527341c_0_1, from-node: $N_8730320004869_134527341c_0) isa node-link; 

match
$L_8730320004869_134527341c_0_1 isa list, has hash "L_8730320004869_134527341c_0_1"; 

insert
$N_8730320004869_134527341c_0_1_0 isa variable-ssa, has hash "N_8730320004869_134527341c_0_1_0", has var "eax", has version 1, has edge-label "0", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730320004869_134527341c_0_1_0, from-node: $L_8730320004869_134527341c_0_1) isa node-link; 

match
$N_8730320004869_134527341c isa instruction, has hash "N_8730320004869_134527341c"; 

insert
$N_8730320004869_134527341c_1 isa MLIL_CONST_PTR, has hash "N_8730320004869_134527341c_1", has edge-label "dest";
(to-node: $N_8730320004869_134527341c_1, from-node: $N_8730320004869_134527341c) isa node-link; 

match
$N_8730320004869_134527341c_1 isa operation, has hash "N_8730320004869_134527341c_1"; 

insert
$N_8730320004869_134527341c_1_0 isa constant, has hash "N_8730320004869_134527341c_1_0", has constant-value "134526768", has edge-label "constant";
(to-node: $N_8730320004869_134527341c_1_0, from-node: $N_8730320004869_134527341c_1) isa node-link; 

match
$N_8730320004869_134527341c isa instruction, has hash "N_8730320004869_134527341c"; 

insert
$L_8730320004869_134527341c_2 isa list, has hash "L_8730320004869_134527341c_2", has list-size 3, has edge-label "params";
(to-node: $L_8730320004869_134527341c_2, from-node: $N_8730320004869_134527341c) isa node-link; 

match
$L_8730320004869_134527341c_2 isa list, has hash "L_8730320004869_134527341c_2"; 

insert
$N_8730320004869_134527341c_2_0 isa MLIL_VAR_SSA, has hash "N_8730320004869_134527341c_2_0", has edge-label "0";
(to-node: $N_8730320004869_134527341c_2_0, from-node: $L_8730320004869_134527341c_2) isa node-link; 

match
$N_8730320004869_134527341c_2_0 isa operation, has hash "N_8730320004869_134527341c_2_0"; 

insert
$N_8730320004869_134527341c_2_0_0 isa variable-ssa, has hash "N_8730320004869_134527341c_2_0_0", has var "arg1", has version 0, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730320004869_134527341c_2_0_0, from-node: $N_8730320004869_134527341c_2_0) isa node-link; 

match
$L_8730320004869_134527341c_2 isa list, has hash "L_8730320004869_134527341c_2"; 

insert
$N_8730320004869_134527341c_2_1 isa MLIL_VAR_SSA, has hash "N_8730320004869_134527341c_2_1", has edge-label "1";
(to-node: $N_8730320004869_134527341c_2_1, from-node: $L_8730320004869_134527341c_2) isa node-link; 

match
$N_8730320004869_134527341c_2_1 isa operation, has hash "N_8730320004869_134527341c_2_1"; 

insert
$N_8730320004869_134527341c_2_1_0 isa variable-ssa, has hash "N_8730320004869_134527341c_2_1_0", has var "edx", has version 1, has edge-label "src", has var-type "int32_t*", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730320004869_134527341c_2_1_0, from-node: $N_8730320004869_134527341c_2_1) isa node-link; 

match
$L_8730320004869_134527341c_2 isa list, has hash "L_8730320004869_134527341c_2"; 

insert
$N_8730320004869_134527341c_2_2 isa MLIL_VAR_SSA, has hash "N_8730320004869_134527341c_2_2", has edge-label "2";
(to-node: $N_8730320004869_134527341c_2_2, from-node: $L_8730320004869_134527341c_2) isa node-link; 

match
$N_8730320004869_134527341c_2_2 isa operation, has hash "N_8730320004869_134527341c_2_2"; 

insert
$N_8730320004869_134527341c_2_2_0 isa variable-ssa, has hash "N_8730320004869_134527341c_2_2_0", has var "arg3", has version 0, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730320004869_134527341c_2_2_0, from-node: $N_8730320004869_134527341c_2_2) isa node-link; 

match
$N_8730320004869_134527341c isa instruction, has hash "N_8730320004869_134527341c"; 

insert
$N_8730320004869_134527341c_3 isa constant, has hash "N_8730320004869_134527341c_3", has constant-value "0", has edge-label "src_memory";
(to-node: $N_8730320004869_134527341c_3, from-node: $N_8730320004869_134527341c) isa node-link; 

match 
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319944065_134527346c isa instruction, has hash "N_8730319944065_134527346c", has il-index 4, has asm-address "0x804b972", has operation-type "MLIL_SET_VAR_SSA", has ins-text "ecx#1 = eax#1";
(contains-instruction: $N_8730319944065_134527346c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319944065_134527346c isa instruction, has hash "N_8730319944065_134527346c"; 

insert
$N_8730319944065_134527346c_0 isa variable-ssa, has hash "N_8730319944065_134527346c_0", has var "ecx", has version 1, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319944065_134527346c_0, from-node: $N_8730319944065_134527346c) isa node-link; 

match
$N_8730319944065_134527346c isa instruction, has hash "N_8730319944065_134527346c"; 

insert
$N_8730319944065_134527346c_1 isa MLIL_VAR_SSA, has hash "N_8730319944065_134527346c_1", has edge-label "src";
(to-node: $N_8730319944065_134527346c_1, from-node: $N_8730319944065_134527346c) isa node-link; 

match
$N_8730319944065_134527346c_1 isa operation, has hash "N_8730319944065_134527346c_1"; 

insert
$N_8730319944065_134527346c_1_0 isa variable-ssa, has hash "N_8730319944065_134527346c_1_0", has var "eax", has version 1, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319944065_134527346c_1_0, from-node: $N_8730319944065_134527346c_1) isa node-link; 

match 
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319886333_134527348c isa instruction, has hash "N_8730319886333_134527348c", has il-index 5, has asm-address "0x804b974", has operation-type "MLIL_SET_VAR_SSA", has ins-text "eax_1#2 = 0";
(contains-instruction: $N_8730319886333_134527348c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319886333_134527348c isa instruction, has hash "N_8730319886333_134527348c"; 

insert
$N_8730319886333_134527348c_0 isa variable-ssa, has hash "N_8730319886333_134527348c_0", has var "eax_1", has version 2, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319886333_134527348c_0, from-node: $N_8730319886333_134527348c) isa node-link; 

match
$N_8730319886333_134527348c isa instruction, has hash "N_8730319886333_134527348c"; 

insert
$N_8730319886333_134527348c_1 isa MLIL_CONST, has hash "N_8730319886333_134527348c_1", has edge-label "src";
(to-node: $N_8730319886333_134527348c_1, from-node: $N_8730319886333_134527348c) isa node-link; 

match
$N_8730319886333_134527348c_1 isa operation, has hash "N_8730319886333_134527348c_1"; 

insert
$N_8730319886333_134527348c_1_0 isa constant, has hash "N_8730319886333_134527348c_1_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8730319886333_134527348c_1_0, from-node: $N_8730319886333_134527348c_1) isa node-link; 

match 
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 0, has bb-end 6; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319901453_134527352c isa instruction, has hash "N_8730319901453_134527352c", has il-index 6, has asm-address "0x804b978", has operation-type "MLIL_IF", has ins-text "if (ecx#1 == 0) then 7 @ 0x0 else 8 @ 0x804b97a";
(contains-instruction: $N_8730319901453_134527352c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319901453_134527352c isa instruction, has hash "N_8730319901453_134527352c"; 

insert
$N_8730319901453_134527352c_0 isa MLIL_CMP_E, has hash "N_8730319901453_134527352c_0", has edge-label "condition";
(to-node: $N_8730319901453_134527352c_0, from-node: $N_8730319901453_134527352c) isa node-link; 

match
$N_8730319901453_134527352c_0 isa operation, has hash "N_8730319901453_134527352c_0"; 

insert
$N_8730319901453_134527352c_0_0 isa MLIL_VAR_SSA, has hash "N_8730319901453_134527352c_0_0", has edge-label "left";
(to-node: $N_8730319901453_134527352c_0_0, from-node: $N_8730319901453_134527352c_0) isa node-link; 

match
$N_8730319901453_134527352c_0_0 isa operation, has hash "N_8730319901453_134527352c_0_0"; 

insert
$N_8730319901453_134527352c_0_0_0 isa variable-ssa, has hash "N_8730319901453_134527352c_0_0_0", has var "ecx", has version 1, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319901453_134527352c_0_0_0, from-node: $N_8730319901453_134527352c_0_0) isa node-link; 

match
$N_8730319901453_134527352c_0 isa operation, has hash "N_8730319901453_134527352c_0"; 

insert
$N_8730319901453_134527352c_0_1 isa MLIL_CONST, has hash "N_8730319901453_134527352c_0_1", has edge-label "right";
(to-node: $N_8730319901453_134527352c_0_1, from-node: $N_8730319901453_134527352c_0) isa node-link; 

match
$N_8730319901453_134527352c_0_1 isa operation, has hash "N_8730319901453_134527352c_0_1"; 

insert
$N_8730319901453_134527352c_0_1_0 isa constant, has hash "N_8730319901453_134527352c_0_1_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8730319901453_134527352c_0_1_0, from-node: $N_8730319901453_134527352c_0_1) isa node-link; 

match
$N_8730319901453_134527352c isa instruction, has hash "N_8730319901453_134527352c"; 

insert
$N_8730319901453_134527352c_1 isa constant, has hash "N_8730319901453_134527352c_1", has constant-value "7", has edge-label "true";
(to-node: $N_8730319901453_134527352c_1, from-node: $N_8730319901453_134527352c) isa node-link; 

match
$N_8730319901453_134527352c isa instruction, has hash "N_8730319901453_134527352c"; 

insert
$N_8730319901453_134527352c_2 isa constant, has hash "N_8730319901453_134527352c_2", has constant-value "8", has edge-label "false";
(to-node: $N_8730319901453_134527352c_2, from-node: $N_8730319901453_134527352c) isa node-link; 

match 
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 

insert 
$bb isa basic-block, has bb-start 7, has bb-end 7; 
(contains-basic-block: $bb, in-function: $func_cgc_get_string_alloc) isa has-basic-block; 

match 
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 7, has bb-end 7; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 7, has bb-end 7; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319945257_0c isa instruction, has hash "N_8730319945257_0c", has il-index 18, has asm-address "0x0", has operation-type "MLIL_GOTO", has ins-text "goto 12 @ 0x804b9a2";
(contains-instruction: $N_8730319945257_0c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319945257_0c isa instruction, has hash "N_8730319945257_0c"; 

insert
$N_8730319945257_0c_0 isa constant, has hash "N_8730319945257_0c_0", has constant-value "12", has edge-label "dest";
(to-node: $N_8730319945257_0c_0, from-node: $N_8730319945257_0c) isa node-link; 

match
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 7, has bb-end 7; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319964545_0c isa instruction, has hash "N_8730319964545_0c", has il-index 7, has asm-address "0x0", has operation-type "MLIL_GOTO", has ins-text "goto 12 @ 0x804b9a2";
(contains-instruction: $N_8730319964545_0c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319964545_0c isa instruction, has hash "N_8730319964545_0c"; 

insert
$N_8730319964545_0c_0 isa constant, has hash "N_8730319964545_0c_0", has constant-value "12", has edge-label "dest";
(to-node: $N_8730319964545_0c_0, from-node: $N_8730319964545_0c) isa node-link; 

match 
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 

insert 
$bb isa basic-block, has bb-start 8, has bb-end 11; 
(contains-basic-block: $bb, in-function: $func_cgc_get_string_alloc) isa has-basic-block; 

match 
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 8, has bb-end 11; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 8, has bb-end 11; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319874673_134527354c isa instruction, has hash "N_8730319874673_134527354c", has il-index 8, has asm-address "0x804b97a", has operation-type "MLIL_SET_VAR_SSA", has ins-text "ecx_1#2 = var_c @ mem#1";
(contains-instruction: $N_8730319874673_134527354c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319874673_134527354c isa instruction, has hash "N_8730319874673_134527354c"; 

insert
$N_8730319874673_134527354c_0 isa variable-ssa, has hash "N_8730319874673_134527354c_0", has var "ecx_1", has version 2, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319874673_134527354c_0, from-node: $N_8730319874673_134527354c) isa node-link; 

match
$N_8730319874673_134527354c isa instruction, has hash "N_8730319874673_134527354c"; 

insert
$N_8730319874673_134527354c_1 isa MLIL_VAR_ALIASED, has hash "N_8730319874673_134527354c_1", has edge-label "src";
(to-node: $N_8730319874673_134527354c_1, from-node: $N_8730319874673_134527354c) isa node-link; 

match
$N_8730319874673_134527354c_1 isa operation, has hash "N_8730319874673_134527354c_1"; 

insert
$N_8730319874673_134527354c_1_0 isa variable-ssa, has hash "N_8730319874673_134527354c_1_0", has var "var_c", has version 1, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319874673_134527354c_1_0, from-node: $N_8730319874673_134527354c_1) isa node-link; 

match 
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 8, has bb-end 11; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 8, has bb-end 11; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319940101_134527358c isa instruction, has hash "N_8730319940101_134527358c", has il-index 9, has asm-address "0x804b97e", has operation-type "MLIL_SET_VAR_SSA", has ins-text "edx_1#2 = [edi#1 + 0x8938].d @ mem#1";
(contains-instruction: $N_8730319940101_134527358c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319940101_134527358c isa instruction, has hash "N_8730319940101_134527358c"; 

insert
$N_8730319940101_134527358c_0 isa variable-ssa, has hash "N_8730319940101_134527358c_0", has var "edx_1", has version 2, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319940101_134527358c_0, from-node: $N_8730319940101_134527358c) isa node-link; 

match
$N_8730319940101_134527358c isa instruction, has hash "N_8730319940101_134527358c"; 

insert
$N_8730319940101_134527358c_1 isa MLIL_LOAD_SSA, has hash "N_8730319940101_134527358c_1", has edge-label "src";
(to-node: $N_8730319940101_134527358c_1, from-node: $N_8730319940101_134527358c) isa node-link; 

match
$N_8730319940101_134527358c_1 isa operation, has hash "N_8730319940101_134527358c_1"; 

insert
$N_8730319940101_134527358c_1_0 isa MLIL_ADD, has hash "N_8730319940101_134527358c_1_0", has edge-label "src";
(to-node: $N_8730319940101_134527358c_1_0, from-node: $N_8730319940101_134527358c_1) isa node-link; 

match
$N_8730319940101_134527358c_1_0 isa operation, has hash "N_8730319940101_134527358c_1_0"; 

insert
$N_8730319940101_134527358c_1_0_0 isa MLIL_VAR_SSA, has hash "N_8730319940101_134527358c_1_0_0", has edge-label "left";
(to-node: $N_8730319940101_134527358c_1_0_0, from-node: $N_8730319940101_134527358c_1_0) isa node-link; 

match
$N_8730319940101_134527358c_1_0_0 isa operation, has hash "N_8730319940101_134527358c_1_0_0"; 

insert
$N_8730319940101_134527358c_1_0_0_0 isa variable-ssa, has hash "N_8730319940101_134527358c_1_0_0_0", has var "edi", has version 1, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319940101_134527358c_1_0_0_0, from-node: $N_8730319940101_134527358c_1_0_0) isa node-link; 

match
$N_8730319940101_134527358c_1_0 isa operation, has hash "N_8730319940101_134527358c_1_0"; 

insert
$N_8730319940101_134527358c_1_0_1 isa MLIL_CONST, has hash "N_8730319940101_134527358c_1_0_1", has edge-label "right";
(to-node: $N_8730319940101_134527358c_1_0_1, from-node: $N_8730319940101_134527358c_1_0) isa node-link; 

match
$N_8730319940101_134527358c_1_0_1 isa operation, has hash "N_8730319940101_134527358c_1_0_1"; 

insert
$N_8730319940101_134527358c_1_0_1_0 isa constant, has hash "N_8730319940101_134527358c_1_0_1_0", has constant-value "35128", has edge-label "constant";
(to-node: $N_8730319940101_134527358c_1_0_1_0, from-node: $N_8730319940101_134527358c_1_0_1) isa node-link; 

match
$N_8730319940101_134527358c_1 isa operation, has hash "N_8730319940101_134527358c_1"; 

insert
$N_8730319940101_134527358c_1_1 isa constant, has hash "N_8730319940101_134527358c_1_1", has constant-value "1", has edge-label "src_memory";
(to-node: $N_8730319940101_134527358c_1_1, from-node: $N_8730319940101_134527358c_1) isa node-link; 

match 
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 8, has bb-end 11; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 8, has bb-end 11; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319972989_134527364c isa instruction, has hash "N_8730319972989_134527364c", has il-index 10, has asm-address "0x804b984", has operation-type "MLIL_SET_VAR_SSA", has ins-text "edx_2#3 = edx_1#2 + ecx_1#2";
(contains-instruction: $N_8730319972989_134527364c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319972989_134527364c isa instruction, has hash "N_8730319972989_134527364c"; 

insert
$N_8730319972989_134527364c_0 isa variable-ssa, has hash "N_8730319972989_134527364c_0", has var "edx_2", has version 3, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319972989_134527364c_0, from-node: $N_8730319972989_134527364c) isa node-link; 

match
$N_8730319972989_134527364c isa instruction, has hash "N_8730319972989_134527364c"; 

insert
$N_8730319972989_134527364c_1 isa MLIL_ADD, has hash "N_8730319972989_134527364c_1", has edge-label "src";
(to-node: $N_8730319972989_134527364c_1, from-node: $N_8730319972989_134527364c) isa node-link; 

match
$N_8730319972989_134527364c_1 isa operation, has hash "N_8730319972989_134527364c_1"; 

insert
$N_8730319972989_134527364c_1_0 isa MLIL_VAR_SSA, has hash "N_8730319972989_134527364c_1_0", has edge-label "left";
(to-node: $N_8730319972989_134527364c_1_0, from-node: $N_8730319972989_134527364c_1) isa node-link; 

match
$N_8730319972989_134527364c_1_0 isa operation, has hash "N_8730319972989_134527364c_1_0"; 

insert
$N_8730319972989_134527364c_1_0_0 isa variable-ssa, has hash "N_8730319972989_134527364c_1_0_0", has var "edx_1", has version 2, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319972989_134527364c_1_0_0, from-node: $N_8730319972989_134527364c_1_0) isa node-link; 

match
$N_8730319972989_134527364c_1 isa operation, has hash "N_8730319972989_134527364c_1"; 

insert
$N_8730319972989_134527364c_1_1 isa MLIL_VAR_SSA, has hash "N_8730319972989_134527364c_1_1", has edge-label "right";
(to-node: $N_8730319972989_134527364c_1_1, from-node: $N_8730319972989_134527364c_1) isa node-link; 

match
$N_8730319972989_134527364c_1_1 isa operation, has hash "N_8730319972989_134527364c_1_1"; 

insert
$N_8730319972989_134527364c_1_1_0 isa variable-ssa, has hash "N_8730319972989_134527364c_1_1_0", has var "ecx_1", has version 2, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319972989_134527364c_1_1_0, from-node: $N_8730319972989_134527364c_1_1) isa node-link; 

match 
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 8, has bb-end 11; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 8, has bb-end 11; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319874733_134527372c isa instruction, has hash "N_8730319874733_134527372c", has il-index 11, has asm-address "0x804b98c", has operation-type "MLIL_IF", has ins-text "if (edx_2#3 u> [edi#1 + 0x893c].d @ mem#1) then 18 @ 0x0 else 19 @ 0x804b98e";
(contains-instruction: $N_8730319874733_134527372c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319874733_134527372c isa instruction, has hash "N_8730319874733_134527372c"; 

insert
$N_8730319874733_134527372c_0 isa MLIL_CMP_UGT, has hash "N_8730319874733_134527372c_0", has edge-label "condition";
(to-node: $N_8730319874733_134527372c_0, from-node: $N_8730319874733_134527372c) isa node-link; 

match
$N_8730319874733_134527372c_0 isa operation, has hash "N_8730319874733_134527372c_0"; 

insert
$N_8730319874733_134527372c_0_0 isa MLIL_VAR_SSA, has hash "N_8730319874733_134527372c_0_0", has edge-label "left";
(to-node: $N_8730319874733_134527372c_0_0, from-node: $N_8730319874733_134527372c_0) isa node-link; 

match
$N_8730319874733_134527372c_0_0 isa operation, has hash "N_8730319874733_134527372c_0_0"; 

insert
$N_8730319874733_134527372c_0_0_0 isa variable-ssa, has hash "N_8730319874733_134527372c_0_0_0", has var "edx_2", has version 3, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319874733_134527372c_0_0_0, from-node: $N_8730319874733_134527372c_0_0) isa node-link; 

match
$N_8730319874733_134527372c_0 isa operation, has hash "N_8730319874733_134527372c_0"; 

insert
$N_8730319874733_134527372c_0_1 isa MLIL_LOAD_SSA, has hash "N_8730319874733_134527372c_0_1", has edge-label "right";
(to-node: $N_8730319874733_134527372c_0_1, from-node: $N_8730319874733_134527372c_0) isa node-link; 

match
$N_8730319874733_134527372c_0_1 isa operation, has hash "N_8730319874733_134527372c_0_1"; 

insert
$N_8730319874733_134527372c_0_1_0 isa MLIL_ADD, has hash "N_8730319874733_134527372c_0_1_0", has edge-label "src";
(to-node: $N_8730319874733_134527372c_0_1_0, from-node: $N_8730319874733_134527372c_0_1) isa node-link; 

match
$N_8730319874733_134527372c_0_1_0 isa operation, has hash "N_8730319874733_134527372c_0_1_0"; 

insert
$N_8730319874733_134527372c_0_1_0_0 isa MLIL_VAR_SSA, has hash "N_8730319874733_134527372c_0_1_0_0", has edge-label "left";
(to-node: $N_8730319874733_134527372c_0_1_0_0, from-node: $N_8730319874733_134527372c_0_1_0) isa node-link; 

match
$N_8730319874733_134527372c_0_1_0_0 isa operation, has hash "N_8730319874733_134527372c_0_1_0_0"; 

insert
$N_8730319874733_134527372c_0_1_0_0_0 isa variable-ssa, has hash "N_8730319874733_134527372c_0_1_0_0_0", has var "edi", has version 1, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319874733_134527372c_0_1_0_0_0, from-node: $N_8730319874733_134527372c_0_1_0_0) isa node-link; 

match
$N_8730319874733_134527372c_0_1_0 isa operation, has hash "N_8730319874733_134527372c_0_1_0"; 

insert
$N_8730319874733_134527372c_0_1_0_1 isa MLIL_CONST, has hash "N_8730319874733_134527372c_0_1_0_1", has edge-label "right";
(to-node: $N_8730319874733_134527372c_0_1_0_1, from-node: $N_8730319874733_134527372c_0_1_0) isa node-link; 

match
$N_8730319874733_134527372c_0_1_0_1 isa operation, has hash "N_8730319874733_134527372c_0_1_0_1"; 

insert
$N_8730319874733_134527372c_0_1_0_1_0 isa constant, has hash "N_8730319874733_134527372c_0_1_0_1_0", has constant-value "35132", has edge-label "constant";
(to-node: $N_8730319874733_134527372c_0_1_0_1_0, from-node: $N_8730319874733_134527372c_0_1_0_1) isa node-link; 

match
$N_8730319874733_134527372c_0_1 isa operation, has hash "N_8730319874733_134527372c_0_1"; 

insert
$N_8730319874733_134527372c_0_1_1 isa constant, has hash "N_8730319874733_134527372c_0_1_1", has constant-value "1", has edge-label "src_memory";
(to-node: $N_8730319874733_134527372c_0_1_1, from-node: $N_8730319874733_134527372c_0_1) isa node-link; 

match
$N_8730319874733_134527372c isa instruction, has hash "N_8730319874733_134527372c"; 

insert
$N_8730319874733_134527372c_1 isa constant, has hash "N_8730319874733_134527372c_1", has constant-value "18", has edge-label "true";
(to-node: $N_8730319874733_134527372c_1, from-node: $N_8730319874733_134527372c) isa node-link; 

match
$N_8730319874733_134527372c isa instruction, has hash "N_8730319874733_134527372c"; 

insert
$N_8730319874733_134527372c_2 isa constant, has hash "N_8730319874733_134527372c_2", has constant-value "19", has edge-label "false";
(to-node: $N_8730319874733_134527372c_2, from-node: $N_8730319874733_134527372c) isa node-link; 

match 
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 

insert 
$bb isa basic-block, has bb-start 12, has bb-end 17; 
(contains-basic-block: $bb, in-function: $func_cgc_get_string_alloc) isa has-basic-block; 

match 
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 12, has bb-end 17; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 12, has bb-end 17; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319874053_134527394c isa instruction, has hash "N_8730319874053_134527394c", has il-index 15, has asm-address "0x804b9a2", has operation-type "MLIL_VAR_PHI", has ins-text "edx_3#5 = ϕ(edx#1, edx_2#3, edx_3#4)";
(contains-instruction: $N_8730319874053_134527394c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319874053_134527394c isa instruction, has hash "N_8730319874053_134527394c"; 

insert
$N_8730319874053_134527394c_0 isa variable-ssa, has hash "N_8730319874053_134527394c_0", has var "edx_3", has version 5, has edge-label "dest", has var-type "int32_t*", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319874053_134527394c_0, from-node: $N_8730319874053_134527394c) isa node-link; 

match
$N_8730319874053_134527394c isa instruction, has hash "N_8730319874053_134527394c"; 

insert
$L_8730319874053_134527394c_1 isa list, has hash "L_8730319874053_134527394c_1", has list-size 3, has edge-label "src";
(to-node: $L_8730319874053_134527394c_1, from-node: $N_8730319874053_134527394c) isa node-link; 

match
$L_8730319874053_134527394c_1 isa list, has hash "L_8730319874053_134527394c_1"; 

insert
$N_8730319874053_134527394c_1_0 isa variable-ssa, has hash "N_8730319874053_134527394c_1_0", has var "edx", has version 1, has edge-label "0", has var-type "int32_t*", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319874053_134527394c_1_0, from-node: $L_8730319874053_134527394c_1) isa node-link; 

match
$L_8730319874053_134527394c_1 isa list, has hash "L_8730319874053_134527394c_1"; 

insert
$N_8730319874053_134527394c_1_1 isa variable-ssa, has hash "N_8730319874053_134527394c_1_1", has var "edx_2", has version 3, has edge-label "1", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319874053_134527394c_1_1, from-node: $L_8730319874053_134527394c_1) isa node-link; 

match
$L_8730319874053_134527394c_1 isa list, has hash "L_8730319874053_134527394c_1"; 

insert
$N_8730319874053_134527394c_1_2 isa variable-ssa, has hash "N_8730319874053_134527394c_1_2", has var "edx_3", has version 4, has edge-label "2", has var-type "int32_t*", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319874053_134527394c_1_2, from-node: $L_8730319874053_134527394c_1) isa node-link; 

match
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 12, has bb-end 17; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319892253_134527394c isa instruction, has hash "N_8730319892253_134527394c", has il-index 17, has asm-address "0x804b9a2", has operation-type "MLIL_RET", has ins-text "return eax_1#5";
(contains-instruction: $N_8730319892253_134527394c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319892253_134527394c isa instruction, has hash "N_8730319892253_134527394c"; 

insert
$L_8730319892253_134527394c_0 isa list, has hash "L_8730319892253_134527394c_0", has list-size 1, has edge-label "src";
(to-node: $L_8730319892253_134527394c_0, from-node: $N_8730319892253_134527394c) isa node-link; 

match
$L_8730319892253_134527394c_0 isa list, has hash "L_8730319892253_134527394c_0"; 

insert
$N_8730319892253_134527394c_0_0 isa MLIL_VAR_SSA, has hash "N_8730319892253_134527394c_0_0", has edge-label "0";
(to-node: $N_8730319892253_134527394c_0_0, from-node: $L_8730319892253_134527394c_0) isa node-link; 

match
$N_8730319892253_134527394c_0_0 isa operation, has hash "N_8730319892253_134527394c_0_0"; 

insert
$N_8730319892253_134527394c_0_0_0 isa variable-ssa, has hash "N_8730319892253_134527394c_0_0_0", has var "eax_1", has version 5, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319892253_134527394c_0_0_0, from-node: $N_8730319892253_134527394c_0_0) isa node-link; 

match
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 12, has bb-end 17; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319908101_134527394c isa instruction, has hash "N_8730319908101_134527394c", has il-index 14, has asm-address "0x804b9a2", has operation-type "MLIL_VAR_PHI", has ins-text "ecx_2#4 = ϕ(ecx#1, ecx_1#2, ecx_2#3)";
(contains-instruction: $N_8730319908101_134527394c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319908101_134527394c isa instruction, has hash "N_8730319908101_134527394c"; 

insert
$N_8730319908101_134527394c_0 isa variable-ssa, has hash "N_8730319908101_134527394c_0", has var "ecx_2", has version 4, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319908101_134527394c_0, from-node: $N_8730319908101_134527394c) isa node-link; 

match
$N_8730319908101_134527394c isa instruction, has hash "N_8730319908101_134527394c"; 

insert
$L_8730319908101_134527394c_1 isa list, has hash "L_8730319908101_134527394c_1", has list-size 3, has edge-label "src";
(to-node: $L_8730319908101_134527394c_1, from-node: $N_8730319908101_134527394c) isa node-link; 

match
$L_8730319908101_134527394c_1 isa list, has hash "L_8730319908101_134527394c_1"; 

insert
$N_8730319908101_134527394c_1_0 isa variable-ssa, has hash "N_8730319908101_134527394c_1_0", has var "ecx", has version 1, has edge-label "0", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319908101_134527394c_1_0, from-node: $L_8730319908101_134527394c_1) isa node-link; 

match
$L_8730319908101_134527394c_1 isa list, has hash "L_8730319908101_134527394c_1"; 

insert
$N_8730319908101_134527394c_1_1 isa variable-ssa, has hash "N_8730319908101_134527394c_1_1", has var "ecx_1", has version 2, has edge-label "1", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319908101_134527394c_1_1, from-node: $L_8730319908101_134527394c_1) isa node-link; 

match
$L_8730319908101_134527394c_1 isa list, has hash "L_8730319908101_134527394c_1"; 

insert
$N_8730319908101_134527394c_1_2 isa variable-ssa, has hash "N_8730319908101_134527394c_1_2", has var "ecx_2", has version 3, has edge-label "2", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319908101_134527394c_1_2, from-node: $L_8730319908101_134527394c_1) isa node-link; 

match
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 12, has bb-end 17; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319919117_134527394c isa instruction, has hash "N_8730319919117_134527394c", has il-index 12, has asm-address "0x804b9a2", has operation-type "MLIL_VAR_PHI", has ins-text "var_1c_1#2 = ϕ(var_1c#0, var_1c_1#1)";
(contains-instruction: $N_8730319919117_134527394c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319919117_134527394c isa instruction, has hash "N_8730319919117_134527394c"; 

insert
$N_8730319919117_134527394c_0 isa variable-ssa, has hash "N_8730319919117_134527394c_0", has var "var_1c_1", has version 2, has edge-label "dest", has var-type "uint32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319919117_134527394c_0, from-node: $N_8730319919117_134527394c) isa node-link; 

match
$N_8730319919117_134527394c isa instruction, has hash "N_8730319919117_134527394c"; 

insert
$L_8730319919117_134527394c_1 isa list, has hash "L_8730319919117_134527394c_1", has list-size 2, has edge-label "src";
(to-node: $L_8730319919117_134527394c_1, from-node: $N_8730319919117_134527394c) isa node-link; 

match
$L_8730319919117_134527394c_1 isa list, has hash "L_8730319919117_134527394c_1"; 

insert
$N_8730319919117_134527394c_1_0 isa variable-ssa, has hash "N_8730319919117_134527394c_1_0", has var "var_1c", has version 0, has edge-label "0", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319919117_134527394c_1_0, from-node: $L_8730319919117_134527394c_1) isa node-link; 

match
$L_8730319919117_134527394c_1 isa list, has hash "L_8730319919117_134527394c_1"; 

insert
$N_8730319919117_134527394c_1_1 isa variable-ssa, has hash "N_8730319919117_134527394c_1_1", has var "var_1c_1", has version 1, has edge-label "1", has var-type "uint32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319919117_134527394c_1_1, from-node: $L_8730319919117_134527394c_1) isa node-link; 

match
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 12, has bb-end 17; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319928069_134527394c isa instruction, has hash "N_8730319928069_134527394c", has il-index 16, has asm-address "0x804b9a2", has operation-type "MLIL_MEM_PHI", has ins-text "mem#3 = ϕ(mem#1, mem#2)";
(contains-instruction: $N_8730319928069_134527394c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319928069_134527394c isa instruction, has hash "N_8730319928069_134527394c"; 

insert
$N_8730319928069_134527394c_0 isa constant, has hash "N_8730319928069_134527394c_0", has constant-value "3", has edge-label "dest_memory";
(to-node: $N_8730319928069_134527394c_0, from-node: $N_8730319928069_134527394c) isa node-link; 

match
$N_8730319928069_134527394c isa instruction, has hash "N_8730319928069_134527394c"; 

insert
$L_8730319928069_134527394c_1 isa list, has hash "L_8730319928069_134527394c_1", has list-size 2, has edge-label "src_memory";
(to-node: $L_8730319928069_134527394c_1, from-node: $N_8730319928069_134527394c) isa node-link; 

match
$L_8730319928069_134527394c_1 isa list, has hash "L_8730319928069_134527394c_1"; 

insert
$N_8730319928069_134527394c_1_0 isa constant, has hash "N_8730319928069_134527394c_1_0", has constant-value "1", has edge-label "0";
(to-node: $N_8730319928069_134527394c_1_0, from-node: $L_8730319928069_134527394c_1) isa node-link; 

match
$L_8730319928069_134527394c_1 isa list, has hash "L_8730319928069_134527394c_1"; 

insert
$N_8730319928069_134527394c_1_1 isa constant, has hash "N_8730319928069_134527394c_1_1", has constant-value "2", has edge-label "1";
(to-node: $N_8730319928069_134527394c_1_1, from-node: $L_8730319928069_134527394c_1) isa node-link; 

match
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 12, has bb-end 17; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319948709_134527394c isa instruction, has hash "N_8730319948709_134527394c", has il-index 13, has asm-address "0x804b9a2", has operation-type "MLIL_VAR_PHI", has ins-text "eax_1#5 = ϕ(eax_1#2, eax_1#4)";
(contains-instruction: $N_8730319948709_134527394c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319948709_134527394c isa instruction, has hash "N_8730319948709_134527394c"; 

insert
$N_8730319948709_134527394c_0 isa variable-ssa, has hash "N_8730319948709_134527394c_0", has var "eax_1", has version 5, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319948709_134527394c_0, from-node: $N_8730319948709_134527394c) isa node-link; 

match
$N_8730319948709_134527394c isa instruction, has hash "N_8730319948709_134527394c"; 

insert
$L_8730319948709_134527394c_1 isa list, has hash "L_8730319948709_134527394c_1", has list-size 2, has edge-label "src";
(to-node: $L_8730319948709_134527394c_1, from-node: $N_8730319948709_134527394c) isa node-link; 

match
$L_8730319948709_134527394c_1 isa list, has hash "L_8730319948709_134527394c_1"; 

insert
$N_8730319948709_134527394c_1_0 isa variable-ssa, has hash "N_8730319948709_134527394c_1_0", has var "eax_1", has version 2, has edge-label "0", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319948709_134527394c_1_0, from-node: $L_8730319948709_134527394c_1) isa node-link; 

match
$L_8730319948709_134527394c_1 isa list, has hash "L_8730319948709_134527394c_1"; 

insert
$N_8730319948709_134527394c_1_1 isa variable-ssa, has hash "N_8730319948709_134527394c_1_1", has var "eax_1", has version 4, has edge-label "1", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319948709_134527394c_1_1, from-node: $L_8730319948709_134527394c_1) isa node-link; 

match 
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 

insert 
$bb isa basic-block, has bb-start 18, has bb-end 18; 
(contains-basic-block: $bb, in-function: $func_cgc_get_string_alloc) isa has-basic-block; 

match 
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 

insert 
$bb isa basic-block, has bb-start 19, has bb-end 24; 
(contains-basic-block: $bb, in-function: $func_cgc_get_string_alloc) isa has-basic-block; 

match 
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 19, has bb-end 24; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 19, has bb-end 24; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319908393_134527374c isa instruction, has hash "N_8730319908393_134527374c", has il-index 19, has asm-address "0x804b98e", has operation-type "MLIL_SET_VAR_SSA", has ins-text "eax_2#3 = zx.d(ecx_1#2.cx)";
(contains-instruction: $N_8730319908393_134527374c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319908393_134527374c isa instruction, has hash "N_8730319908393_134527374c"; 

insert
$N_8730319908393_134527374c_0 isa variable-ssa, has hash "N_8730319908393_134527374c_0", has var "eax_2", has version 3, has edge-label "dest", has var-type "uint32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319908393_134527374c_0, from-node: $N_8730319908393_134527374c) isa node-link; 

match
$N_8730319908393_134527374c isa instruction, has hash "N_8730319908393_134527374c"; 

insert
$N_8730319908393_134527374c_1 isa MLIL_ZX, has hash "N_8730319908393_134527374c_1", has edge-label "src";
(to-node: $N_8730319908393_134527374c_1, from-node: $N_8730319908393_134527374c) isa node-link; 

match
$N_8730319908393_134527374c_1 isa operation, has hash "N_8730319908393_134527374c_1"; 

insert
$N_8730319908393_134527374c_1_0 isa MLIL_VAR_SSA_FIELD, has hash "N_8730319908393_134527374c_1_0", has edge-label "src";
(to-node: $N_8730319908393_134527374c_1_0, from-node: $N_8730319908393_134527374c_1) isa node-link; 

match
$N_8730319908393_134527374c_1_0 isa operation, has hash "N_8730319908393_134527374c_1_0"; 

insert
$N_8730319908393_134527374c_1_0_0 isa variable-ssa, has hash "N_8730319908393_134527374c_1_0_0", has var "ecx_1", has version 2, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319908393_134527374c_1_0_0, from-node: $N_8730319908393_134527374c_1_0) isa node-link; 

match
$N_8730319908393_134527374c_1_0 isa operation, has hash "N_8730319908393_134527374c_1_0"; 

insert
$N_8730319908393_134527374c_1_0_1 isa constant, has hash "N_8730319908393_134527374c_1_0_1", has constant-value "0", has edge-label "offset";
(to-node: $N_8730319908393_134527374c_1_0_1, from-node: $N_8730319908393_134527374c_1_0) isa node-link; 

match 
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 19, has bb-end 24; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 19, has bb-end 24; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319932965_134527377c isa instruction, has hash "N_8730319932965_134527377c", has il-index 20, has asm-address "0x804b991", has operation-type "MLIL_SET_VAR_SSA", has ins-text "var_1c_1#1 = eax_2#3";
(contains-instruction: $N_8730319932965_134527377c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319932965_134527377c isa instruction, has hash "N_8730319932965_134527377c"; 

insert
$N_8730319932965_134527377c_0 isa variable-ssa, has hash "N_8730319932965_134527377c_0", has var "var_1c_1", has version 1, has edge-label "dest", has var-type "uint32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319932965_134527377c_0, from-node: $N_8730319932965_134527377c) isa node-link; 

match
$N_8730319932965_134527377c isa instruction, has hash "N_8730319932965_134527377c"; 

insert
$N_8730319932965_134527377c_1 isa MLIL_VAR_SSA, has hash "N_8730319932965_134527377c_1", has edge-label "src";
(to-node: $N_8730319932965_134527377c_1, from-node: $N_8730319932965_134527377c) isa node-link; 

match
$N_8730319932965_134527377c_1 isa operation, has hash "N_8730319932965_134527377c_1"; 

insert
$N_8730319932965_134527377c_1_0 isa variable-ssa, has hash "N_8730319932965_134527377c_1_0", has var "eax_2", has version 3, has edge-label "src", has var-type "uint32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319932965_134527377c_1_0, from-node: $N_8730319932965_134527377c_1) isa node-link; 

match 
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 19, has bb-end 24; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 19, has bb-end 24; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319954697_134527380c isa instruction, has hash "N_8730319954697_134527380c", has il-index 21, has asm-address "0x804b994", has operation-type "MLIL_SET_VAR_SSA", has ins-text "ecx_2#3 = edi#1";
(contains-instruction: $N_8730319954697_134527380c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319954697_134527380c isa instruction, has hash "N_8730319954697_134527380c"; 

insert
$N_8730319954697_134527380c_0 isa variable-ssa, has hash "N_8730319954697_134527380c_0", has var "ecx_2", has version 3, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319954697_134527380c_0, from-node: $N_8730319954697_134527380c) isa node-link; 

match
$N_8730319954697_134527380c isa instruction, has hash "N_8730319954697_134527380c"; 

insert
$N_8730319954697_134527380c_1 isa MLIL_VAR_SSA, has hash "N_8730319954697_134527380c_1", has edge-label "src";
(to-node: $N_8730319954697_134527380c_1, from-node: $N_8730319954697_134527380c) isa node-link; 

match
$N_8730319954697_134527380c_1 isa operation, has hash "N_8730319954697_134527380c_1"; 

insert
$N_8730319954697_134527380c_1_0 isa variable-ssa, has hash "N_8730319954697_134527380c_1_0", has var "edi", has version 1, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319954697_134527380c_1_0, from-node: $N_8730319954697_134527380c_1) isa node-link; 

match 
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 19, has bb-end 24; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 19, has bb-end 24; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319866373_134527382c isa instruction, has hash "N_8730319866373_134527382c", has il-index 22, has asm-address "0x804b996", has operation-type "MLIL_SET_VAR_SSA", has ins-text "edx_3#4 = esi#1";
(contains-instruction: $N_8730319866373_134527382c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319866373_134527382c isa instruction, has hash "N_8730319866373_134527382c"; 

insert
$N_8730319866373_134527382c_0 isa variable-ssa, has hash "N_8730319866373_134527382c_0", has var "edx_3", has version 4, has edge-label "dest", has var-type "int32_t*", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319866373_134527382c_0, from-node: $N_8730319866373_134527382c) isa node-link; 

match
$N_8730319866373_134527382c isa instruction, has hash "N_8730319866373_134527382c"; 

insert
$N_8730319866373_134527382c_1 isa MLIL_VAR_SSA, has hash "N_8730319866373_134527382c_1", has edge-label "src";
(to-node: $N_8730319866373_134527382c_1, from-node: $N_8730319866373_134527382c) isa node-link; 

match
$N_8730319866373_134527382c_1 isa operation, has hash "N_8730319866373_134527382c_1"; 

insert
$N_8730319866373_134527382c_1_0 isa variable-ssa, has hash "N_8730319866373_134527382c_1_0", has var "esi", has version 1, has edge-label "src", has var-type "int32_t*", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319866373_134527382c_1_0, from-node: $N_8730319866373_134527382c_1) isa node-link; 

match 
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 19, has bb-end 24; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 19, has bb-end 24; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319960585_134527384c isa instruction, has hash "N_8730319960585_134527384c", has il-index 23, has asm-address "0x804b998", has operation-type "MLIL_CALL_SSA", has ins-text "eax_1#4, mem#2 = 0x804bb70(eax_2#3, edx_3#4, ecx_2#3, var_1c_1#1) @ mem#1";
(contains-instruction: $N_8730319960585_134527384c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319960585_134527384c isa instruction, has hash "N_8730319960585_134527384c"; 

insert
$N_8730319960585_134527384c_0 isa MLIL_CALL_OUTPUT_SSA, has hash "N_8730319960585_134527384c_0", has edge-label "output";
(to-node: $N_8730319960585_134527384c_0, from-node: $N_8730319960585_134527384c) isa node-link; 

match
$N_8730319960585_134527384c_0 isa operation, has hash "N_8730319960585_134527384c_0"; 

insert
$N_8730319960585_134527384c_0_0 isa constant, has hash "N_8730319960585_134527384c_0_0", has constant-value "2", has edge-label "dest_memory";
(to-node: $N_8730319960585_134527384c_0_0, from-node: $N_8730319960585_134527384c_0) isa node-link; 

match
$N_8730319960585_134527384c_0 isa operation, has hash "N_8730319960585_134527384c_0"; 

insert
$L_8730319960585_134527384c_0_1 isa list, has hash "L_8730319960585_134527384c_0_1", has list-size 1, has edge-label "dest";
(to-node: $L_8730319960585_134527384c_0_1, from-node: $N_8730319960585_134527384c_0) isa node-link; 

match
$L_8730319960585_134527384c_0_1 isa list, has hash "L_8730319960585_134527384c_0_1"; 

insert
$N_8730319960585_134527384c_0_1_0 isa variable-ssa, has hash "N_8730319960585_134527384c_0_1_0", has var "eax_1", has version 4, has edge-label "0", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319960585_134527384c_0_1_0, from-node: $L_8730319960585_134527384c_0_1) isa node-link; 

match
$N_8730319960585_134527384c isa instruction, has hash "N_8730319960585_134527384c"; 

insert
$N_8730319960585_134527384c_1 isa MLIL_CONST_PTR, has hash "N_8730319960585_134527384c_1", has edge-label "dest";
(to-node: $N_8730319960585_134527384c_1, from-node: $N_8730319960585_134527384c) isa node-link; 

match
$N_8730319960585_134527384c_1 isa operation, has hash "N_8730319960585_134527384c_1"; 

insert
$N_8730319960585_134527384c_1_0 isa constant, has hash "N_8730319960585_134527384c_1_0", has constant-value "134527856", has edge-label "constant";
(to-node: $N_8730319960585_134527384c_1_0, from-node: $N_8730319960585_134527384c_1) isa node-link; 

match
$N_8730319960585_134527384c isa instruction, has hash "N_8730319960585_134527384c"; 

insert
$L_8730319960585_134527384c_2 isa list, has hash "L_8730319960585_134527384c_2", has list-size 4, has edge-label "params";
(to-node: $L_8730319960585_134527384c_2, from-node: $N_8730319960585_134527384c) isa node-link; 

match
$L_8730319960585_134527384c_2 isa list, has hash "L_8730319960585_134527384c_2"; 

insert
$N_8730319960585_134527384c_2_0 isa MLIL_VAR_SSA, has hash "N_8730319960585_134527384c_2_0", has edge-label "0";
(to-node: $N_8730319960585_134527384c_2_0, from-node: $L_8730319960585_134527384c_2) isa node-link; 

match
$N_8730319960585_134527384c_2_0 isa operation, has hash "N_8730319960585_134527384c_2_0"; 

insert
$N_8730319960585_134527384c_2_0_0 isa variable-ssa, has hash "N_8730319960585_134527384c_2_0_0", has var "eax_2", has version 3, has edge-label "src", has var-type "uint32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319960585_134527384c_2_0_0, from-node: $N_8730319960585_134527384c_2_0) isa node-link; 

match
$L_8730319960585_134527384c_2 isa list, has hash "L_8730319960585_134527384c_2"; 

insert
$N_8730319960585_134527384c_2_1 isa MLIL_VAR_SSA, has hash "N_8730319960585_134527384c_2_1", has edge-label "1";
(to-node: $N_8730319960585_134527384c_2_1, from-node: $L_8730319960585_134527384c_2) isa node-link; 

match
$N_8730319960585_134527384c_2_1 isa operation, has hash "N_8730319960585_134527384c_2_1"; 

insert
$N_8730319960585_134527384c_2_1_0 isa variable-ssa, has hash "N_8730319960585_134527384c_2_1_0", has var "edx_3", has version 4, has edge-label "src", has var-type "int32_t*", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319960585_134527384c_2_1_0, from-node: $N_8730319960585_134527384c_2_1) isa node-link; 

match
$L_8730319960585_134527384c_2 isa list, has hash "L_8730319960585_134527384c_2"; 

insert
$N_8730319960585_134527384c_2_2 isa MLIL_VAR_SSA, has hash "N_8730319960585_134527384c_2_2", has edge-label "2";
(to-node: $N_8730319960585_134527384c_2_2, from-node: $L_8730319960585_134527384c_2) isa node-link; 

match
$N_8730319960585_134527384c_2_2 isa operation, has hash "N_8730319960585_134527384c_2_2"; 

insert
$N_8730319960585_134527384c_2_2_0 isa variable-ssa, has hash "N_8730319960585_134527384c_2_2_0", has var "ecx_2", has version 3, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319960585_134527384c_2_2_0, from-node: $N_8730319960585_134527384c_2_2) isa node-link; 

match
$L_8730319960585_134527384c_2 isa list, has hash "L_8730319960585_134527384c_2"; 

insert
$N_8730319960585_134527384c_2_3 isa MLIL_VAR_SSA, has hash "N_8730319960585_134527384c_2_3", has edge-label "3";
(to-node: $N_8730319960585_134527384c_2_3, from-node: $L_8730319960585_134527384c_2) isa node-link; 

match
$N_8730319960585_134527384c_2_3 isa operation, has hash "N_8730319960585_134527384c_2_3"; 

insert
$N_8730319960585_134527384c_2_3_0 isa variable-ssa, has hash "N_8730319960585_134527384c_2_3_0", has var "var_1c_1", has version 1, has edge-label "src", has var-type "uint32_t", has var-size 4, has var-func "cgc_get_string_alloc";
(to-node: $N_8730319960585_134527384c_2_3_0, from-node: $N_8730319960585_134527384c_2_3) isa node-link; 

match
$N_8730319960585_134527384c isa instruction, has hash "N_8730319960585_134527384c"; 

insert
$N_8730319960585_134527384c_3 isa constant, has hash "N_8730319960585_134527384c_3", has constant-value "1", has edge-label "src_memory";
(to-node: $N_8730319960585_134527384c_3, from-node: $N_8730319960585_134527384c) isa node-link; 

match
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$bb isa basic-block, has bb-start 19, has bb-end 24; 
(in-function: $func_cgc_get_string_alloc, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8730319979773_134527384c isa instruction, has hash "N_8730319979773_134527384c", has il-index 24, has asm-address "0x804b998", has operation-type "MLIL_GOTO", has ins-text "goto 12 @ 0x804b9a2";
(contains-instruction: $N_8730319979773_134527384c, in-basic-block: $bb) isa has-instruction; 

match
$N_8730319979773_134527384c isa instruction, has hash "N_8730319979773_134527384c"; 

insert
$N_8730319979773_134527384c_0 isa constant, has hash "N_8730319979773_134527384c_0", has constant-value "12", has edge-label "dest";
(to-node: $N_8730319979773_134527384c_0, from-node: $N_8730319979773_134527384c) isa node-link; 

match 
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$frombb isa basic-block, has bb-end 6, has bb-start 0; 
$tobb   isa basic-block, has bb-end 7, has bb-start 7; 
(contains-basic-block: $frombb, in-function: $func_cgc_get_string_alloc) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_cgc_get_string_alloc) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$frombb isa basic-block, has bb-end 6, has bb-start 0; 
$tobb   isa basic-block, has bb-end 11, has bb-start 8; 
(contains-basic-block: $frombb, in-function: $func_cgc_get_string_alloc) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_cgc_get_string_alloc) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$frombb isa basic-block, has bb-end 7, has bb-start 7; 
$tobb   isa basic-block, has bb-end 17, has bb-start 12; 
(contains-basic-block: $frombb, in-function: $func_cgc_get_string_alloc) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_cgc_get_string_alloc) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$frombb isa basic-block, has bb-end 11, has bb-start 8; 
$tobb   isa basic-block, has bb-end 18, has bb-start 18; 
(contains-basic-block: $frombb, in-function: $func_cgc_get_string_alloc) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_cgc_get_string_alloc) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$frombb isa basic-block, has bb-end 11, has bb-start 8; 
$tobb   isa basic-block, has bb-end 24, has bb-start 19; 
(contains-basic-block: $frombb, in-function: $func_cgc_get_string_alloc) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_cgc_get_string_alloc) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$frombb isa basic-block, has bb-end 18, has bb-start 18; 
$tobb   isa basic-block, has bb-end 17, has bb-start 12; 
(contains-basic-block: $frombb, in-function: $func_cgc_get_string_alloc) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_cgc_get_string_alloc) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_cgc_get_string_alloc isa function, has name "cgc_get_string_alloc"; 
$frombb isa basic-block, has bb-end 24, has bb-start 19; 
$tobb   isa basic-block, has bb-end 17, has bb-start 12; 
(contains-basic-block: $frombb, in-function: $func_cgc_get_string_alloc) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_cgc_get_string_alloc) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 
