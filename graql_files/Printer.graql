insert 

## ENTITIES #####################################
function sub entity
	plays in-function
	has name
	has asm-address
	has stack;

basic-block sub entity
	plays from-basic-block 
	plays to-basic-block
	plays in-basic-block 
	plays contains-basic-block
	has bb-start
	has bb-end;

instruction sub entity
	plays from-node
	plays to-node
	plays in-instruction
	plays contains-instruction
	has hash
	has il-index
	has asm-address
	has ins-text
	has operation-type;

operation sub entity
	plays from-node
	plays to-node
	plays in-operation
	plays contains-operation
	has hash
	has edge-label;

constant sub entity
	plays from-node
	plays to-node
	has hash
	has constant-value
	has edge-label;

variable sub entity
	plays from-node
	plays to-node
	has hash
	has var
	has edge-label
	has var-type
	has var-size
	has var-func;

variable-ssa sub entity
	plays from-node
	plays to-node
	plays trace
	has hash
	has var
	has version
	has edge-label
	has var-type
	has var-size
	has var-func;

list sub entity
	plays from-node
	plays to-node
	has hash
	has list-size
	has edge-label;


## SUB ENTITIES #################################
#### OPERATIONS #################################
MLIL_NOP sub operation;
MLIL_SET_VAR sub operation;
MLIL_SET_VAR_FIELD sub operation;
MLIL_SET_VAR_SPLIT sub operation;
MLIL_LOAD sub operation;
MLIL_STORE sub operation;
MLIL_VAR sub operation
	has var;
MLIL_VAR_FIELD sub operation;
MLIL_ADDRESS_OF sub operation;
MLIL_ADDRESS_OF_FIELD sub operation;
MLIL_CONST sub operation;
MLIL_CONST_PTR sub operation;
MLIL_ADD sub operation;
MLIL_ADC sub operation;
MLIL_SUB sub operation;
MLIL_SBB sub operation;
MLIL_AND sub operation;
MLIL_OR sub operation;
MLIL_XOR sub operation;
MLIL_LSL sub operation;
MLIL_LSR sub operation;
MLIL_ASR sub operation;
MLIL_ROL sub operation;
MLIL_RLC sub operation;
MLIL_ROR sub operation;
MLIL_RRC sub operation;
MLIL_MUL sub operation;
MLIL_MULU_DP sub operation;
MLIL_MULS_DP sub operation;
MLIL_DIVU sub operation;
MLIL_DIVU_DP sub operation;
MLIL_DIVS sub operation;
MLIL_DIVS_DP sub operation;
MLIL_MODU sub operation;
MLIL_MODU_DP sub operation;
MLIL_MODS sub operation;
MLIL_MODS_DP sub operation;
MLIL_NEG sub operation;
MLIL_NOT sub operation;
MLIL_SX sub operation;
MLIL_ZX sub operation;
MLIL_LOW_PART sub operation;
MLIL_JUMP sub operation;
MLIL_JUMP_TO sub operation;
MLIL_CALL sub operation;
MLIL_CALL_UNTYPED sub operation;
MLIL_CALL_OUTPUT sub operation;
MLIL_CALL_PARAM sub operation;
MLIL_RET sub operation;
MLIL_NORET sub operation;
MLIL_IF sub operation;
MLIL_GOTO sub operation;
MLIL_CMP_E sub operation;
MLIL_CMP_NE sub operation;
MLIL_CMP_SLT sub operation;
MLIL_CMP_ULT sub operation;
MLIL_CMP_SLE sub operation;
MLIL_CMP_ULE sub operation;
MLIL_CMP_SGE sub operation;
MLIL_CMP_UGE sub operation;
MLIL_CMP_SGT sub operation;
MLIL_CMP_UGT sub operation;
MLIL_TEST_BIT sub operation;
MLIL_BOOL_TO_INT sub operation;
MLIL_ADD_OVERFLOW sub operation;
MLIL_SYSCALL sub operation;
MLIL_SYSCALL_UNTYPED sub operation;
MLIL_BP sub operation;
MLIL_TRAP sub operation;
MLIL_UNDEF sub operation;
MLIL_UNIMPL sub operation;
MLIL_UNIMPL_MEM sub operation;
MLIL_IMPORT sub operation;
MLIL_SET_VAR_SSA sub operation;
MLIL_SET_VAR_SSA_FIELD sub operation;
MLIL_SET_VAR_SPLIT_SSA sub operation;
MLIL_SET_VAR_ALIASED sub operation;
MLIL_SET_VAR_ALIASED_FIELD sub operation;
MLIL_VAR_SSA sub operation;
MLIL_VAR_SSA_FIELD sub operation;
MLIL_VAR_ALIASED sub operation;
MLIL_VAR_ALIASED_FIELD sub operation;
MLIL_CALL_SSA sub operation;
MLIL_CALL_UNTYPED_SSA sub operation;
MLIL_SYSCALL_SSA sub operation;
MLIL_SYSCALL_UNTYPED_SSA sub operation;
MLIL_CALL_OUTPUT_SSA sub operation;
MLIL_CALL_PARAM_SSA sub operation;
MLIL_LOAD_SSA sub operation;
MLIL_STORE_SSA sub operation;
MLIL_VAR_PHI sub operation;
MLIL_MEM_PHI sub operation;


## RESOURCES (has) ##############################
stack			sub resource datatype string;
operation-type 		sub resource datatype string;
ins-text		sub resource datatype string;
name			sub resource datatype string;
asm-address 		sub resource datatype string;
edge-label 		sub resource datatype string;
constant-value 		sub resource datatype string;
hash 			sub resource datatype string;
var 			sub resource datatype string;
var-type 		sub resource datatype string;
var-func 		sub resource datatype string;
var-size		sub resource datatype long;
bb-start		sub resource datatype long;
bb-end			sub resource datatype long;
il-index 		sub resource datatype long;
list-size 		sub resource datatype long;
int 			sub resource datatype long;
version 		sub resource datatype long;
size			sub resource datatype long;
if-true 		sub resource datatype long;
if-false 		sub resource datatype long;


## ROLES (plays) ################################
in-function 			sub role;

from-basic-block 		sub role;
to-basic-block			sub role;
in-basic-block 			sub role;
contains-basic-block 	sub role;

in-instruction 			sub role;
contains-instruction 	sub role;

in-operation 			sub role;
contains-operation 		sub role;

from-node 				sub role;
to-node					sub role;

trace					sub role;
## RELATIONS ####################################
has-basic-block sub relation
	relates in-function
	relates contains-basic-block;

basic-block-edge sub relation
	relates from-basic-block
	relates to-basic-block;

has-instruction sub relation
    relates contains-instruction
    relates in-basic-block;

instruction-has-operation sub relation
	relates contains-operation
	relates in-instruction;

operation-has-operation sub relation
	relates contains-operation
	relates in-operation;

node-link sub relation
	relates from-node
	relates to-node;

trace-link sub relation
	relates trace;

trace-instruction sub relation
	relates trace;

trace-full sub relation
	relates trace;
## INFERRENCE RULES #############################
$share-var isa inference-rule
when {
	$v1 isa variable-ssa, has var $var;
	$v2 isa variable-ssa, has var $var;
	$v1 != $v2;
},
then {
	(trace:$v1, trace:$v2) isa trace-link;
};
$share-instruction isa inference-rule
when {
	$v1 isa variable-ssa;
	$v2 isa MLIL_VAR_SSA;
	(to-node:$v1, from-node:$v2);
	$v4 isa variable-ssa;
	$v3 isa MLIL_VAR_SSA;
	(to-node:$v4, from-node:$v3);
	(from-node:$inst, to-node:$v2);
	(from-node:$inst, to-node:$v3);
	$inst isa instruction;
	$v1 != $v2;$v2 != $v3;$v3 != $v4;$v1 != $v4;$v2 != $v4;$v1 != $v3;
},
then {
	(trace:$v1, trace:$v4) isa trace-instruction;
};
$trace-goal isa inference-rule
when {
	(trace:$v1,trace:$v2) isa trace-link;
	(trace:$v2,trace:$v3) isa trace-instruction;
	$v1 != $v2;$v2 != $v3;$v1 != $v3;
},
then {
	(trace:$v1, trace:$v3) isa trace-full;
};    

insert 
$func_main isa function, has name "main", has asm-address "0x804e7a0", has stack "[<var int32_t var_94c>, <var char* var_94c_1>, <var int32_t var_94c_2>, <var int32_t* var_94c_3>, <var char* var_94c_4>, <var int32_t* var_94c_5>, <var int32_t* var_94c_6>, <var char* var_94c_7>, <var int32_t* var_94c_8>, <var int32_t* var_94c_9>, <var int32_t* var_94c_10>, <var char* var_94c_11>, <var int32_t* var_94c_12>, <var void** var_94c_13>, <var char* var_94c_14>, <var void** var_94c_15>, <var void* var_94c_16>, <var void* var_94c_17>, <var int32_t* var_94c_18>, <var int32_t var_94c_19>, <var int32_t var_948>, <var int32_t var_948_1>, <var char* var_948_2>, <var void* var_948_3>, <var void* var_948_4>, <var int32_t var_948_5>, <var int32_t var_944>, <var int32_t var_944_1>, <var int32_t var_944_2>, <var int32_t var_940>, <var int32_t var_940_1>, <var int32_t var_93c>, <var int32_t var_938>, <var int32_t var_934>, <var int32_t var_930>, <var int32_t var_92c>, <var int32_t var_928>, <var int32_t var_924>, <var int32_t var_920>, <var int32_t var_91c>, <var int32_t var_918>, <var int32_t var_914>, <var int32_t var_910>, <var int32_t var_90c>, <var int32_t var_908>, <var int32_t var_904>, <var int32_t var_900>, <var int32_t var_8fc>, <var int32_t var_8f8>, <var int32_t var_8f4>, <var int32_t var_8f0>, <var int32_t var_8ec>, <var int32_t var_8e8>, <var int32_t var_8e4>, <var int32_t var_8e0>, <var int32_t var_8dc>, <var int32_t var_8d8>, <var int32_t var_8d4>, <var int32_t var_8d0>, <var int32_t var_8cc>, <var int32_t var_8c8>, <var int32_t var_8c4>, <var int32_t var_8c0>, <var int32_t var_8bc>, <var int32_t var_8b8>, <var int32_t var_8b4>, <var int32_t var_8b0>, <var int32_t var_8ac>, <var int32_t var_8a8>, <var int32_t var_8a4>, <var int32_t var_8a0>, <var int32_t var_89c>, <var int32_t var_898>, <var int32_t var_894>, <var int32_t var_890>, <var int32_t var_88c>, <var int32_t var_888>, <var int32_t var_884>, <var int32_t var_880>, <var int32_t var_87c>, <var int32_t var_878>, <var int32_t var_874>, <var int32_t var_870>, <var int32_t var_86c>, <var int32_t var_868>, <var int32_t var_864>, <var int32_t var_860>, <var int32_t var_85c>, <var int32_t var_858>, <var int32_t var_858_1>, <var int32_t var_854>, <var int32_t var_854_1>, <var int32_t var_850>, <var int32_t var_84c>, <var int32_t var_848>, <var char* var_844>, <var int32_t var_840>, <var int32_t var_83c>, <var int32_t var_838>, <var int32_t var_834>, <var int32_t var_830>, <var int32_t var_82c>, <var int32_t* var_828>, <var char* var_824>, <var void* var_820>, <var char var_81c>, <var void var_81b>, <var int32_t var_1c>, <var int32_t var_18>, <var int32_t var_18_1>, <var int32_t var_14>, <var int32_t var_10>, <var int32_t var_c>, <var int32_t var_8>, <var int32_t __saved_ebp>, <var void* const __return_addr>, <var int32_t argc>, <var char** argv>, <var char** envp>]"; 

match 
$func_main isa function, has name "main"; 

insert 
$bb isa basic-block, has bb-start 0, has bb-end 9; 
(contains-basic-block: $bb, in-function: $func_main) isa has-basic-block; 

match 
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 9; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 9; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8770306402169_134539202c isa instruction, has hash "N_8770306402169_134539202c", has il-index 0, has asm-address "0x804e7c2", has operation-type "MLIL_SET_VAR_SSA", has ins-text "var_1c#1 = 0";
(contains-instruction: $N_8770306402169_134539202c, in-basic-block: $bb) isa has-instruction; 

match
$N_8770306402169_134539202c isa instruction, has hash "N_8770306402169_134539202c"; 

insert
$N_8770306402169_134539202c_0 isa variable-ssa, has hash "N_8770306402169_134539202c_0", has var "var_1c", has version 1, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "main";
(to-node: $N_8770306402169_134539202c_0, from-node: $N_8770306402169_134539202c) isa node-link; 

match
$N_8770306402169_134539202c isa instruction, has hash "N_8770306402169_134539202c"; 

insert
$N_8770306402169_134539202c_1 isa MLIL_CONST, has hash "N_8770306402169_134539202c_1", has edge-label "src";
(to-node: $N_8770306402169_134539202c_1, from-node: $N_8770306402169_134539202c) isa node-link; 

match
$N_8770306402169_134539202c_1 isa operation, has hash "N_8770306402169_134539202c_1"; 

insert
$N_8770306402169_134539202c_1_0 isa constant, has hash "N_8770306402169_134539202c_1_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8770306402169_134539202c_1_0, from-node: $N_8770306402169_134539202c_1) isa node-link; 

match 
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 9; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 9; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8770306405185_134539209c isa instruction, has hash "N_8770306405185_134539209c", has il-index 1, has asm-address "0x804e7c9", has operation-type "MLIL_SET_VAR_SSA", has ins-text "var_828#1 = 0";
(contains-instruction: $N_8770306405185_134539209c, in-basic-block: $bb) isa has-instruction; 

match
$N_8770306405185_134539209c isa instruction, has hash "N_8770306405185_134539209c"; 

insert
$N_8770306405185_134539209c_0 isa variable-ssa, has hash "N_8770306405185_134539209c_0", has var "var_828", has version 1, has edge-label "dest", has var-type "int32_t*", has var-size 4, has var-func "main";
(to-node: $N_8770306405185_134539209c_0, from-node: $N_8770306405185_134539209c) isa node-link; 

match
$N_8770306405185_134539209c isa instruction, has hash "N_8770306405185_134539209c"; 

insert
$N_8770306405185_134539209c_1 isa MLIL_CONST_PTR, has hash "N_8770306405185_134539209c_1", has edge-label "src";
(to-node: $N_8770306405185_134539209c_1, from-node: $N_8770306405185_134539209c) isa node-link; 

match
$N_8770306405185_134539209c_1 isa operation, has hash "N_8770306405185_134539209c_1"; 

insert
$N_8770306405185_134539209c_1_0 isa constant, has hash "N_8770306405185_134539209c_1_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8770306405185_134539209c_1_0, from-node: $N_8770306405185_134539209c_1) isa node-link; 

match 
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 9; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 9; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8770304377693_134539232c isa instruction, has hash "N_8770304377693_134539232c", has il-index 2, has asm-address "0x804e7e0", has operation-type "MLIL_CALL_SSA", has ins-text "eax#1, mem#1 = 0x804b340(0x4e2a78) @ mem#0";
(contains-instruction: $N_8770304377693_134539232c, in-basic-block: $bb) isa has-instruction; 

match
$N_8770304377693_134539232c isa instruction, has hash "N_8770304377693_134539232c"; 

insert
$N_8770304377693_134539232c_0 isa MLIL_CALL_OUTPUT_SSA, has hash "N_8770304377693_134539232c_0", has edge-label "output";
(to-node: $N_8770304377693_134539232c_0, from-node: $N_8770304377693_134539232c) isa node-link; 

match
$N_8770304377693_134539232c_0 isa operation, has hash "N_8770304377693_134539232c_0"; 

insert
$N_8770304377693_134539232c_0_0 isa constant, has hash "N_8770304377693_134539232c_0_0", has constant-value "1", has edge-label "dest_memory";
(to-node: $N_8770304377693_134539232c_0_0, from-node: $N_8770304377693_134539232c_0) isa node-link; 

match
$N_8770304377693_134539232c_0 isa operation, has hash "N_8770304377693_134539232c_0"; 

insert
$L_8770304377693_134539232c_0_1 isa list, has hash "L_8770304377693_134539232c_0_1", has list-size 1, has edge-label "dest";
(to-node: $L_8770304377693_134539232c_0_1, from-node: $N_8770304377693_134539232c_0) isa node-link; 

match
$L_8770304377693_134539232c_0_1 isa list, has hash "L_8770304377693_134539232c_0_1"; 

insert
$N_8770304377693_134539232c_0_1_0 isa variable-ssa, has hash "N_8770304377693_134539232c_0_1_0", has var "eax", has version 1, has edge-label "0", has var-type "int32_t*", has var-size 4, has var-func "main";
(to-node: $N_8770304377693_134539232c_0_1_0, from-node: $L_8770304377693_134539232c_0_1) isa node-link; 

match
$N_8770304377693_134539232c isa instruction, has hash "N_8770304377693_134539232c"; 

insert
$N_8770304377693_134539232c_1 isa MLIL_CONST_PTR, has hash "N_8770304377693_134539232c_1", has edge-label "dest";
(to-node: $N_8770304377693_134539232c_1, from-node: $N_8770304377693_134539232c) isa node-link; 

match
$N_8770304377693_134539232c_1 isa operation, has hash "N_8770304377693_134539232c_1"; 

insert
$N_8770304377693_134539232c_1_0 isa constant, has hash "N_8770304377693_134539232c_1_0", has constant-value "134525760", has edge-label "constant";
(to-node: $N_8770304377693_134539232c_1_0, from-node: $N_8770304377693_134539232c_1) isa node-link; 

match
$N_8770304377693_134539232c isa instruction, has hash "N_8770304377693_134539232c"; 

insert
$L_8770304377693_134539232c_2 isa list, has hash "L_8770304377693_134539232c_2", has list-size 1, has edge-label "params";
(to-node: $L_8770304377693_134539232c_2, from-node: $N_8770304377693_134539232c) isa node-link; 

match
$L_8770304377693_134539232c_2 isa list, has hash "L_8770304377693_134539232c_2"; 

insert
$N_8770304377693_134539232c_2_0 isa MLIL_CONST, has hash "N_8770304377693_134539232c_2_0", has edge-label "0";
(to-node: $N_8770304377693_134539232c_2_0, from-node: $L_8770304377693_134539232c_2) isa node-link; 

match
$N_8770304377693_134539232c_2_0 isa operation, has hash "N_8770304377693_134539232c_2_0"; 

insert
$N_8770304377693_134539232c_2_0_0 isa constant, has hash "N_8770304377693_134539232c_2_0_0", has constant-value "5122680", has edge-label "constant";
(to-node: $N_8770304377693_134539232c_2_0_0, from-node: $N_8770304377693_134539232c_2_0) isa node-link; 

match
$N_8770304377693_134539232c isa instruction, has hash "N_8770304377693_134539232c"; 

insert
$N_8770304377693_134539232c_3 isa constant, has hash "N_8770304377693_134539232c_3", has constant-value "0", has edge-label "src_memory";
(to-node: $N_8770304377693_134539232c_3, from-node: $N_8770304377693_134539232c) isa node-link; 

match 
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 9; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 9; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8770303044917_134539244c isa instruction, has hash "N_8770303044917_134539244c", has il-index 3, has asm-address "0x804e7ec", has operation-type "MLIL_STORE_SSA", has ins-text "[0x805156c].d = eax#1 @ mem#1 -> mem#2";
(contains-instruction: $N_8770303044917_134539244c, in-basic-block: $bb) isa has-instruction; 

match
$N_8770303044917_134539244c isa instruction, has hash "N_8770303044917_134539244c"; 

insert
$N_8770303044917_134539244c_0 isa MLIL_CONST_PTR, has hash "N_8770303044917_134539244c_0", has edge-label "dest";
(to-node: $N_8770303044917_134539244c_0, from-node: $N_8770303044917_134539244c) isa node-link; 

match
$N_8770303044917_134539244c_0 isa operation, has hash "N_8770303044917_134539244c_0"; 

insert
$N_8770303044917_134539244c_0_0 isa constant, has hash "N_8770303044917_134539244c_0_0", has constant-value "134550892", has edge-label "constant";
(to-node: $N_8770303044917_134539244c_0_0, from-node: $N_8770303044917_134539244c_0) isa node-link; 

match
$N_8770303044917_134539244c isa instruction, has hash "N_8770303044917_134539244c"; 

insert
$N_8770303044917_134539244c_1 isa constant, has hash "N_8770303044917_134539244c_1", has constant-value "2", has edge-label "dest_memory";
(to-node: $N_8770303044917_134539244c_1, from-node: $N_8770303044917_134539244c) isa node-link; 

match
$N_8770303044917_134539244c isa instruction, has hash "N_8770303044917_134539244c"; 

insert
$N_8770303044917_134539244c_2 isa constant, has hash "N_8770303044917_134539244c_2", has constant-value "1", has edge-label "src_memory";
(to-node: $N_8770303044917_134539244c_2, from-node: $N_8770303044917_134539244c) isa node-link; 

match
$N_8770303044917_134539244c isa instruction, has hash "N_8770303044917_134539244c"; 

insert
$N_8770303044917_134539244c_3 isa MLIL_VAR_SSA, has hash "N_8770303044917_134539244c_3", has edge-label "src";
(to-node: $N_8770303044917_134539244c_3, from-node: $N_8770303044917_134539244c) isa node-link; 

match
$N_8770303044917_134539244c_3 isa operation, has hash "N_8770303044917_134539244c_3"; 

insert
$N_8770303044917_134539244c_3_0 isa variable-ssa, has hash "N_8770303044917_134539244c_3_0", has var "eax", has version 1, has edge-label "src", has var-type "int32_t*", has var-size 4, has var-func "main";
(to-node: $N_8770303044917_134539244c_3_0, from-node: $N_8770303044917_134539244c_3) isa node-link; 

match 
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 9; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 9; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8770306403969_134539249c isa instruction, has hash "N_8770306403969_134539249c", has il-index 4, has asm-address "0x804e7f1", has operation-type "MLIL_SET_VAR_SSA", has ins-text "eax_1#2 = [0x805156c].d @ mem#2";
(contains-instruction: $N_8770306403969_134539249c, in-basic-block: $bb) isa has-instruction; 

match
$N_8770306403969_134539249c isa instruction, has hash "N_8770306403969_134539249c"; 

insert
$N_8770306403969_134539249c_0 isa variable-ssa, has hash "N_8770306403969_134539249c_0", has var "eax_1", has version 2, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "main";
(to-node: $N_8770306403969_134539249c_0, from-node: $N_8770306403969_134539249c) isa node-link; 

match
$N_8770306403969_134539249c isa instruction, has hash "N_8770306403969_134539249c"; 

insert
$N_8770306403969_134539249c_1 isa MLIL_LOAD_SSA, has hash "N_8770306403969_134539249c_1", has edge-label "src";
(to-node: $N_8770306403969_134539249c_1, from-node: $N_8770306403969_134539249c) isa node-link; 

match
$N_8770306403969_134539249c_1 isa operation, has hash "N_8770306403969_134539249c_1"; 

insert
$N_8770306403969_134539249c_1_0 isa MLIL_CONST_PTR, has hash "N_8770306403969_134539249c_1_0", has edge-label "src";
(to-node: $N_8770306403969_134539249c_1_0, from-node: $N_8770306403969_134539249c_1) isa node-link; 

match
$N_8770306403969_134539249c_1_0 isa operation, has hash "N_8770306403969_134539249c_1_0"; 

insert
$N_8770306403969_134539249c_1_0_0 isa constant, has hash "N_8770306403969_134539249c_1_0_0", has constant-value "134550892", has edge-label "constant";
(to-node: $N_8770306403969_134539249c_1_0_0, from-node: $N_8770306403969_134539249c_1_0) isa node-link; 

match
$N_8770306403969_134539249c_1 isa operation, has hash "N_8770306403969_134539249c_1"; 

insert
$N_8770306403969_134539249c_1_1 isa constant, has hash "N_8770306403969_134539249c_1_1", has constant-value "2", has edge-label "src_memory";
(to-node: $N_8770306403969_134539249c_1_1, from-node: $N_8770306403969_134539249c_1) isa node-link; 

match 
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 9; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 9; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8770295233541_134539254c isa instruction, has hash "N_8770295233541_134539254c", has il-index 5, has asm-address "0x804e7f6", has operation-type "MLIL_SET_VAR_SSA", has ins-text "var_94c#1 = eax_1#2";
(contains-instruction: $N_8770295233541_134539254c, in-basic-block: $bb) isa has-instruction; 

match
$N_8770295233541_134539254c isa instruction, has hash "N_8770295233541_134539254c"; 

insert
$N_8770295233541_134539254c_0 isa variable-ssa, has hash "N_8770295233541_134539254c_0", has var "var_94c", has version 1, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "main";
(to-node: $N_8770295233541_134539254c_0, from-node: $N_8770295233541_134539254c) isa node-link; 

match
$N_8770295233541_134539254c isa instruction, has hash "N_8770295233541_134539254c"; 

insert
$N_8770295233541_134539254c_1 isa MLIL_VAR_SSA, has hash "N_8770295233541_134539254c_1", has edge-label "src";
(to-node: $N_8770295233541_134539254c_1, from-node: $N_8770295233541_134539254c) isa node-link; 

match
$N_8770295233541_134539254c_1 isa operation, has hash "N_8770295233541_134539254c_1"; 

insert
$N_8770295233541_134539254c_1_0 isa variable-ssa, has hash "N_8770295233541_134539254c_1_0", has var "eax_1", has version 2, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "main";
(to-node: $N_8770295233541_134539254c_1_0, from-node: $N_8770295233541_134539254c_1) isa node-link; 

match 
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 9; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

match
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 9; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8770302967301_134539285c isa instruction, has hash "N_8770302967301_134539285c", has il-index 6, has asm-address "0x804e815", has operation-type "MLIL_CALL_SSA", has ins-text "eax_2#3, edx#1, mem#3 = 0x804c400(var_94c#1, 0, 0x4e2a78) @ mem#2";
(contains-instruction: $N_8770302967301_134539285c, in-basic-block: $bb) isa has-instruction; 

match
$N_8770302967301_134539285c isa instruction, has hash "N_8770302967301_134539285c"; 

insert
$N_8770302967301_134539285c_0 isa MLIL_CALL_OUTPUT_SSA, has hash "N_8770302967301_134539285c_0", has edge-label "output";
(to-node: $N_8770302967301_134539285c_0, from-node: $N_8770302967301_134539285c) isa node-link; 

match
$N_8770302967301_134539285c_0 isa operation, has hash "N_8770302967301_134539285c_0"; 

insert
$N_8770302967301_134539285c_0_0 isa constant, has hash "N_8770302967301_134539285c_0_0", has constant-value "3", has edge-label "dest_memory";
(to-node: $N_8770302967301_134539285c_0_0, from-node: $N_8770302967301_134539285c_0) isa node-link; 

match
$N_8770302967301_134539285c_0 isa operation, has hash "N_8770302967301_134539285c_0"; 

insert
$L_8770302967301_134539285c_0_1 isa list, has hash "L_8770302967301_134539285c_0_1", has list-size 2, has edge-label "dest";
(to-node: $L_8770302967301_134539285c_0_1, from-node: $N_8770302967301_134539285c_0) isa node-link; 

match
$L_8770302967301_134539285c_0_1 isa list, has hash "L_8770302967301_134539285c_0_1"; 

insert
$N_8770302967301_134539285c_0_1_0 isa variable-ssa, has hash "N_8770302967301_134539285c_0_1_0", has var "eax_2", has version 3, has edge-label "0", has var-type "int32_t", has var-size 4, has var-func "main";
(to-node: $N_8770302967301_134539285c_0_1_0, from-node: $L_8770302967301_134539285c_0_1) isa node-link; 

match
$L_8770302967301_134539285c_0_1 isa list, has hash "L_8770302967301_134539285c_0_1"; 

insert
$N_8770302967301_134539285c_0_1_1 isa variable-ssa, has hash "N_8770302967301_134539285c_0_1_1", has var "edx", has version 1, has edge-label "1", has var-type "int32_t", has var-size 4, has var-func "main";
(to-node: $N_8770302967301_134539285c_0_1_1, from-node: $L_8770302967301_134539285c_0_1) isa node-link; 

match
$N_8770302967301_134539285c isa instruction, has hash "N_8770302967301_134539285c"; 

insert
$N_8770302967301_134539285c_1 isa MLIL_CONST_PTR, has hash "N_8770302967301_134539285c_1", has edge-label "dest";
(to-node: $N_8770302967301_134539285c_1, from-node: $N_8770302967301_134539285c) isa node-link; 

match
$N_8770302967301_134539285c_1 isa operation, has hash "N_8770302967301_134539285c_1"; 

insert
$N_8770302967301_134539285c_1_0 isa constant, has hash "N_8770302967301_134539285c_1_0", has constant-value "134530048", has edge-label "constant";
(to-node: $N_8770302967301_134539285c_1_0, from-node: $N_8770302967301_134539285c_1) isa node-link; 

match
$N_8770302967301_134539285c isa instruction, has hash "N_8770302967301_134539285c"; 

insert
$L_8770302967301_134539285c_2 isa list, has hash "L_8770302967301_134539285c_2", has list-size 3, has edge-label "params";
(to-node: $L_8770302967301_134539285c_2, from-node: $N_8770302967301_134539285c) isa node-link; 

match
$L_8770302967301_134539285c_2 isa list, has hash "L_8770302967301_134539285c_2"; 

insert
$N_8770302967301_134539285c_2_0 isa MLIL_VAR_SSA, has hash "N_8770302967301_134539285c_2_0", has edge-label "0";
(to-node: $N_8770302967301_134539285c_2_0, from-node: $L_8770302967301_134539285c_2) isa node-link; 

match
$N_8770302967301_134539285c_2_0 isa operation, has hash "N_8770302967301_134539285c_2_0"; 

insert
$N_8770302967301_134539285c_2_0_0 isa variable-ssa, has hash "N_8770302967301_134539285c_2_0_0", has var "var_94c", has version 1, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "main";
(to-node: $N_8770302967301_134539285c_2_0_0, from-node: $N_8770302967301_134539285c_2_0) isa node-link; 

match
$L_8770302967301_134539285c_2 isa list, has hash "L_8770302967301_134539285c_2"; 

insert
$N_8770302967301_134539285c_2_1 isa MLIL_CONST, has hash "N_8770302967301_134539285c_2_1", has edge-label "1";
(to-node: $N_8770302967301_134539285c_2_1, from-node: $L_8770302967301_134539285c_2) isa node-link; 

match
$N_8770302967301_134539285c_2_1 isa operation, has hash "N_8770302967301_134539285c_2_1"; 

insert
$N_8770302967301_134539285c_2_1_0 isa constant, has hash "N_8770302967301_134539285c_2_1_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8770302967301_134539285c_2_1_0, from-node: $N_8770302967301_134539285c_2_1) isa node-link; 

match
$L_8770302967301_134539285c_2 isa list, has hash "L_8770302967301_134539285c_2"; 

insert
$N_8770302967301_134539285c_2_2 isa MLIL_CONST, has hash "N_8770302967301_134539285c_2_2", has edge-label "2";
(to-node: $N_8770302967301_134539285c_2_2, from-node: $L_8770302967301_134539285c_2) isa node-link; 

match
$N_8770302967301_134539285c_2_2 isa operation, has hash "N_8770302967301_134539285c_2_2"; 

insert
$N_8770302967301_134539285c_2_2_0 isa constant, has hash "N_8770302967301_134539285c_2_2_0", has constant-value "5122680", has edge-label "constant";
(to-node: $N_8770302967301_134539285c_2_2_0, from-node: $N_8770302967301_134539285c_2_2) isa node-link; 

match
$N_8770302967301_134539285c isa instruction, has hash "N_8770302967301_134539285c"; 

insert
$N_8770302967301_134539285c_3 isa constant, has hash "N_8770302967301_134539285c_3", has constant-value "2", has edge-label "src_memory";
(to-node: $N_8770302967301_134539285c_3, from-node: $N_8770302967301_134539285c) isa node-link; 

match 
$func_main isa function, has name "main"; 
$bb isa basic-block, has bb-start 0, has bb-end 9; 
(in-function: $func_main, contains-basic-block: $bb) isa has-basic-block; 
