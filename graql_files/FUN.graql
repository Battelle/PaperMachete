insert 

## ENTITIES #####################################
function sub entity
	plays in-function
	has name
	has asm-address
	has stack;

basic-block sub entity
	plays from-basic-block 
	plays to-basic-block
	plays in-basic-block 
	plays contains-basic-block
	has bb-start
	has bb-end;

instruction sub entity
	plays from-node
	plays to-node
	plays in-instruction
	plays contains-instruction
	has hash
	has il-index
	has asm-address
	has ins-text
	has operation-type;

operation sub entity
	plays from-node
	plays to-node
	plays in-operation
	plays contains-operation
	has hash
	has edge-label;

constant sub entity
	plays from-node
	plays to-node
	has hash
	has constant-value
	has edge-label;

variable sub entity
	plays from-node
	plays to-node
	has hash
	has var
	has edge-label
	has var-type
	has var-size
	has var-func;

variable-ssa sub entity
	plays from-node
	plays to-node
	plays trace
	has hash
	has var
	has version
	has edge-label
	has var-type
	has var-size
	has var-func;

list sub entity
	plays from-node
	plays to-node
	has hash
	has list-size
	has edge-label;


## SUB ENTITIES #################################
#### OPERATIONS #################################
MLIL_NOP sub operation;
MLIL_SET_VAR sub operation;
MLIL_SET_VAR_FIELD sub operation;
MLIL_SET_VAR_SPLIT sub operation;
MLIL_LOAD sub operation;
MLIL_STORE sub operation;
MLIL_VAR sub operation
	has var;
MLIL_VAR_FIELD sub operation;
MLIL_ADDRESS_OF sub operation;
MLIL_ADDRESS_OF_FIELD sub operation;
MLIL_CONST sub operation;
MLIL_CONST_PTR sub operation;
MLIL_ADD sub operation;
MLIL_ADC sub operation;
MLIL_SUB sub operation;
MLIL_SBB sub operation;
MLIL_AND sub operation;
MLIL_OR sub operation;
MLIL_XOR sub operation;
MLIL_LSL sub operation;
MLIL_LSR sub operation;
MLIL_ASR sub operation;
MLIL_ROL sub operation;
MLIL_RLC sub operation;
MLIL_ROR sub operation;
MLIL_RRC sub operation;
MLIL_MUL sub operation;
MLIL_MULU_DP sub operation;
MLIL_MULS_DP sub operation;
MLIL_DIVU sub operation;
MLIL_DIVU_DP sub operation;
MLIL_DIVS sub operation;
MLIL_DIVS_DP sub operation;
MLIL_MODU sub operation;
MLIL_MODU_DP sub operation;
MLIL_MODS sub operation;
MLIL_MODS_DP sub operation;
MLIL_NEG sub operation;
MLIL_NOT sub operation;
MLIL_SX sub operation;
MLIL_ZX sub operation;
MLIL_LOW_PART sub operation;
MLIL_JUMP sub operation;
MLIL_JUMP_TO sub operation;
MLIL_CALL sub operation;
MLIL_CALL_UNTYPED sub operation;
MLIL_CALL_OUTPUT sub operation;
MLIL_CALL_PARAM sub operation;
MLIL_RET sub operation;
MLIL_NORET sub operation;
MLIL_IF sub operation;
MLIL_GOTO sub operation;
MLIL_CMP_E sub operation;
MLIL_CMP_NE sub operation;
MLIL_CMP_SLT sub operation;
MLIL_CMP_ULT sub operation;
MLIL_CMP_SLE sub operation;
MLIL_CMP_ULE sub operation;
MLIL_CMP_SGE sub operation;
MLIL_CMP_UGE sub operation;
MLIL_CMP_SGT sub operation;
MLIL_CMP_UGT sub operation;
MLIL_TEST_BIT sub operation;
MLIL_BOOL_TO_INT sub operation;
MLIL_ADD_OVERFLOW sub operation;
MLIL_SYSCALL sub operation;
MLIL_SYSCALL_UNTYPED sub operation;
MLIL_BP sub operation;
MLIL_TRAP sub operation;
MLIL_UNDEF sub operation;
MLIL_UNIMPL sub operation;
MLIL_UNIMPL_MEM sub operation;
MLIL_IMPORT sub operation;
MLIL_SET_VAR_SSA sub operation;
MLIL_SET_VAR_SSA_FIELD sub operation;
MLIL_SET_VAR_SPLIT_SSA sub operation;
MLIL_SET_VAR_ALIASED sub operation;
MLIL_SET_VAR_ALIASED_FIELD sub operation;
MLIL_VAR_SSA sub operation;
MLIL_VAR_SSA_FIELD sub operation;
MLIL_VAR_ALIASED sub operation;
MLIL_VAR_ALIASED_FIELD sub operation;
MLIL_CALL_SSA sub operation;
MLIL_CALL_UNTYPED_SSA sub operation;
MLIL_SYSCALL_SSA sub operation;
MLIL_SYSCALL_UNTYPED_SSA sub operation;
MLIL_CALL_OUTPUT_SSA sub operation;
MLIL_CALL_PARAM_SSA sub operation;
MLIL_LOAD_SSA sub operation;
MLIL_STORE_SSA sub operation;
MLIL_VAR_PHI sub operation;
MLIL_MEM_PHI sub operation;


## RESOURCES (has) ##############################
stack			sub resource datatype string;
operation-type 		sub resource datatype string;
ins-text		sub resource datatype string;
name			sub resource datatype string;
asm-address 		sub resource datatype string;
edge-label 		sub resource datatype string;
constant-value 		sub resource datatype string;
hash 			sub resource datatype string;
var 			sub resource datatype string;
var-type 		sub resource datatype string;
var-func 		sub resource datatype string;
var-size		sub resource datatype long;
bb-start		sub resource datatype long;
bb-end			sub resource datatype long;
il-index 		sub resource datatype long;
list-size 		sub resource datatype long;
int 			sub resource datatype long;
version 		sub resource datatype long;
size			sub resource datatype long;
if-true 		sub resource datatype long;
if-false 		sub resource datatype long;


## ROLES (plays) ################################
in-function 			sub role;

from-basic-block 		sub role;
to-basic-block			sub role;
in-basic-block 			sub role;
contains-basic-block 	sub role;

in-instruction 			sub role;
contains-instruction 	sub role;

in-operation 			sub role;
contains-operation 		sub role;

from-node 				sub role;
to-node					sub role;

trace					sub role;
## RELATIONS ####################################
has-basic-block sub relation
	relates in-function
	relates contains-basic-block;

basic-block-edge sub relation
	relates from-basic-block
	relates to-basic-block;

has-instruction sub relation
    relates contains-instruction
    relates in-basic-block;

instruction-has-operation sub relation
	relates contains-operation
	relates in-instruction;

operation-has-operation sub relation
	relates contains-operation
	relates in-operation;

node-link sub relation
	relates from-node
	relates to-node;

trace-link sub relation
	relates trace;

trace-instruction sub relation
	relates trace;

trace-full sub relation
	relates trace;
## INFERRENCE RULES #############################
$share-var isa inference-rule
when {
	$v1 isa variable-ssa, has var $var;
	$v2 isa variable-ssa, has var $var;
	$v1 != $v2;
},
then {
	(trace:$v1, trace:$v2) isa trace-link;
};
$share-instruction isa inference-rule
when {
	$v1 isa variable-ssa;
	$v2 isa MLIL_VAR_SSA;
	(to-node:$v1, from-node:$v2);
	$v4 isa variable-ssa;
	$v3 isa MLIL_VAR_SSA;
	(to-node:$v4, from-node:$v3);
	(from-node:$inst, to-node:$v2);
	(from-node:$inst, to-node:$v3);
	$inst isa instruction;
	$v1 != $v2;$v2 != $v3;$v3 != $v4;$v1 != $v4;$v2 != $v4;$v1 != $v3;
},
then {
	(trace:$v1, trace:$v4) isa trace-instruction;
};
$trace-goal isa inference-rule
when {
	(trace:$v1,trace:$v2) isa trace-link;
	(trace:$v2,trace:$v3) isa trace-instruction;
	$v1 != $v2;$v2 != $v3;$v1 != $v3;
},
then {
	(trace:$v1, trace:$v3) isa trace-full;
};    

insert 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word", has asm-address "0x804b750", has stack "[<var int32_t var_1c>, <var int32_t var_1c_1>, <var int32_t __saved_esi>, <var int32_t var_8>, <var int32_t var_4>, <var void* const __return_addr>, <var int32_t arg1>]"; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 

insert 
$bb isa basic-block, has bb-start 0, has bb-end 7; 
(contains-basic-block: $bb, in-function: $func_cgc_my_add_word) isa has-basic-block; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 0, has bb-end 7; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 0, has bb-end 7; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797418265_134526806c isa instruction, has hash "N_8761797418265_134526806c", has il-index 0, has asm-address "0x804b756", has operation-type "MLIL_SET_VAR_SSA", has ins-text "esi#1 = arg1#0";
(contains-instruction: $N_8761797418265_134526806c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797418265_134526806c isa instruction, has hash "N_8761797418265_134526806c"; 

insert
$N_8761797418265_134526806c_0 isa variable-ssa, has hash "N_8761797418265_134526806c_0", has var "esi", has version 1, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797418265_134526806c_0, from-node: $N_8761797418265_134526806c) isa node-link; 

match
$N_8761797418265_134526806c isa instruction, has hash "N_8761797418265_134526806c"; 

insert
$N_8761797418265_134526806c_1 isa MLIL_VAR_SSA, has hash "N_8761797418265_134526806c_1", has edge-label "src";
(to-node: $N_8761797418265_134526806c_1, from-node: $N_8761797418265_134526806c) isa node-link; 

match
$N_8761797418265_134526806c_1 isa operation, has hash "N_8761797418265_134526806c_1"; 

insert
$N_8761797418265_134526806c_1_0 isa variable-ssa, has hash "N_8761797418265_134526806c_1_0", has var "arg1", has version 0, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797418265_134526806c_1_0, from-node: $N_8761797418265_134526806c_1) isa node-link; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 0, has bb-end 7; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 0, has bb-end 7; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797437753_134526810c isa instruction, has hash "N_8761797437753_134526810c", has il-index 1, has asm-address "0x804b75a", has operation-type "MLIL_SET_VAR_SSA", has ins-text "eax#1 = [0x806a41c].d @ mem#0";
(contains-instruction: $N_8761797437753_134526810c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797437753_134526810c isa instruction, has hash "N_8761797437753_134526810c"; 

insert
$N_8761797437753_134526810c_0 isa variable-ssa, has hash "N_8761797437753_134526810c_0", has var "eax", has version 1, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797437753_134526810c_0, from-node: $N_8761797437753_134526810c) isa node-link; 

match
$N_8761797437753_134526810c isa instruction, has hash "N_8761797437753_134526810c"; 

insert
$N_8761797437753_134526810c_1 isa MLIL_LOAD_SSA, has hash "N_8761797437753_134526810c_1", has edge-label "src";
(to-node: $N_8761797437753_134526810c_1, from-node: $N_8761797437753_134526810c) isa node-link; 

match
$N_8761797437753_134526810c_1 isa operation, has hash "N_8761797437753_134526810c_1"; 

insert
$N_8761797437753_134526810c_1_0 isa MLIL_CONST_PTR, has hash "N_8761797437753_134526810c_1_0", has edge-label "src";
(to-node: $N_8761797437753_134526810c_1_0, from-node: $N_8761797437753_134526810c_1) isa node-link; 

match
$N_8761797437753_134526810c_1_0 isa operation, has hash "N_8761797437753_134526810c_1_0"; 

insert
$N_8761797437753_134526810c_1_0_0 isa constant, has hash "N_8761797437753_134526810c_1_0_0", has constant-value "134652956", has edge-label "constant";
(to-node: $N_8761797437753_134526810c_1_0_0, from-node: $N_8761797437753_134526810c_1_0) isa node-link; 

match
$N_8761797437753_134526810c_1 isa operation, has hash "N_8761797437753_134526810c_1"; 

insert
$N_8761797437753_134526810c_1_1 isa constant, has hash "N_8761797437753_134526810c_1_1", has constant-value "0", has edge-label "src_memory";
(to-node: $N_8761797437753_134526810c_1_1, from-node: $N_8761797437753_134526810c_1) isa node-link; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 0, has bb-end 7; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 0, has bb-end 7; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797418289_134526815c isa instruction, has hash "N_8761797418289_134526815c", has il-index 2, has asm-address "0x804b75f", has operation-type "MLIL_SET_VAR_SSA", has ins-text "eax_1#2 = eax#1 - [0x8076a78].d @ mem#0";
(contains-instruction: $N_8761797418289_134526815c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797418289_134526815c isa instruction, has hash "N_8761797418289_134526815c"; 

insert
$N_8761797418289_134526815c_0 isa variable-ssa, has hash "N_8761797418289_134526815c_0", has var "eax_1", has version 2, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797418289_134526815c_0, from-node: $N_8761797418289_134526815c) isa node-link; 

match
$N_8761797418289_134526815c isa instruction, has hash "N_8761797418289_134526815c"; 

insert
$N_8761797418289_134526815c_1 isa MLIL_SUB, has hash "N_8761797418289_134526815c_1", has edge-label "src";
(to-node: $N_8761797418289_134526815c_1, from-node: $N_8761797418289_134526815c) isa node-link; 

match
$N_8761797418289_134526815c_1 isa operation, has hash "N_8761797418289_134526815c_1"; 

insert
$N_8761797418289_134526815c_1_0 isa MLIL_VAR_SSA, has hash "N_8761797418289_134526815c_1_0", has edge-label "left";
(to-node: $N_8761797418289_134526815c_1_0, from-node: $N_8761797418289_134526815c_1) isa node-link; 

match
$N_8761797418289_134526815c_1_0 isa operation, has hash "N_8761797418289_134526815c_1_0"; 

insert
$N_8761797418289_134526815c_1_0_0 isa variable-ssa, has hash "N_8761797418289_134526815c_1_0_0", has var "eax", has version 1, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797418289_134526815c_1_0_0, from-node: $N_8761797418289_134526815c_1_0) isa node-link; 

match
$N_8761797418289_134526815c_1 isa operation, has hash "N_8761797418289_134526815c_1"; 

insert
$N_8761797418289_134526815c_1_1 isa MLIL_LOAD_SSA, has hash "N_8761797418289_134526815c_1_1", has edge-label "right";
(to-node: $N_8761797418289_134526815c_1_1, from-node: $N_8761797418289_134526815c_1) isa node-link; 

match
$N_8761797418289_134526815c_1_1 isa operation, has hash "N_8761797418289_134526815c_1_1"; 

insert
$N_8761797418289_134526815c_1_1_0 isa MLIL_CONST_PTR, has hash "N_8761797418289_134526815c_1_1_0", has edge-label "src";
(to-node: $N_8761797418289_134526815c_1_1_0, from-node: $N_8761797418289_134526815c_1_1) isa node-link; 

match
$N_8761797418289_134526815c_1_1_0 isa operation, has hash "N_8761797418289_134526815c_1_1_0"; 

insert
$N_8761797418289_134526815c_1_1_0_0 isa constant, has hash "N_8761797418289_134526815c_1_1_0_0", has constant-value "134703736", has edge-label "constant";
(to-node: $N_8761797418289_134526815c_1_1_0_0, from-node: $N_8761797418289_134526815c_1_1_0) isa node-link; 

match
$N_8761797418289_134526815c_1_1 isa operation, has hash "N_8761797418289_134526815c_1_1"; 

insert
$N_8761797418289_134526815c_1_1_1 isa constant, has hash "N_8761797418289_134526815c_1_1_1", has constant-value "0", has edge-label "src_memory";
(to-node: $N_8761797418289_134526815c_1_1_1, from-node: $N_8761797418289_134526815c_1_1) isa node-link; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 0, has bb-end 7; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 0, has bb-end 7; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797288709_134526821c isa instruction, has hash "N_8761797288709_134526821c", has il-index 3, has asm-address "0x804b765", has operation-type "MLIL_SET_VAR_SSA", has ins-text "var_1c#1 = esi#1";
(contains-instruction: $N_8761797288709_134526821c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797288709_134526821c isa instruction, has hash "N_8761797288709_134526821c"; 

insert
$N_8761797288709_134526821c_0 isa variable-ssa, has hash "N_8761797288709_134526821c_0", has var "var_1c", has version 1, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797288709_134526821c_0, from-node: $N_8761797288709_134526821c) isa node-link; 

match
$N_8761797288709_134526821c isa instruction, has hash "N_8761797288709_134526821c"; 

insert
$N_8761797288709_134526821c_1 isa MLIL_VAR_SSA, has hash "N_8761797288709_134526821c_1", has edge-label "src";
(to-node: $N_8761797288709_134526821c_1, from-node: $N_8761797288709_134526821c) isa node-link; 

match
$N_8761797288709_134526821c_1 isa operation, has hash "N_8761797288709_134526821c_1"; 

insert
$N_8761797288709_134526821c_1_0 isa variable-ssa, has hash "N_8761797288709_134526821c_1_0", has var "esi", has version 1, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797288709_134526821c_1_0, from-node: $N_8761797288709_134526821c_1) isa node-link; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 0, has bb-end 7; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 0, has bb-end 7; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797399049_134526824c isa instruction, has hash "N_8761797399049_134526824c", has il-index 4, has asm-address "0x804b768", has operation-type "MLIL_CALL_SSA", has ins-text "eax_2#3, mem#1 = eax_1#2(var_1c#1) @ mem#0";
(contains-instruction: $N_8761797399049_134526824c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797399049_134526824c isa instruction, has hash "N_8761797399049_134526824c"; 

insert
$N_8761797399049_134526824c_0 isa MLIL_CALL_OUTPUT_SSA, has hash "N_8761797399049_134526824c_0", has edge-label "output";
(to-node: $N_8761797399049_134526824c_0, from-node: $N_8761797399049_134526824c) isa node-link; 

match
$N_8761797399049_134526824c_0 isa operation, has hash "N_8761797399049_134526824c_0"; 

insert
$N_8761797399049_134526824c_0_0 isa constant, has hash "N_8761797399049_134526824c_0_0", has constant-value "1", has edge-label "dest_memory";
(to-node: $N_8761797399049_134526824c_0_0, from-node: $N_8761797399049_134526824c_0) isa node-link; 

match
$N_8761797399049_134526824c_0 isa operation, has hash "N_8761797399049_134526824c_0"; 

insert
$L_8761797399049_134526824c_0_1 isa list, has hash "L_8761797399049_134526824c_0_1", has list-size 1, has edge-label "dest";
(to-node: $L_8761797399049_134526824c_0_1, from-node: $N_8761797399049_134526824c_0) isa node-link; 

match
$L_8761797399049_134526824c_0_1 isa list, has hash "L_8761797399049_134526824c_0_1"; 

insert
$N_8761797399049_134526824c_0_1_0 isa variable-ssa, has hash "N_8761797399049_134526824c_0_1_0", has var "eax_2", has version 3, has edge-label "0", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797399049_134526824c_0_1_0, from-node: $L_8761797399049_134526824c_0_1) isa node-link; 

match
$N_8761797399049_134526824c isa instruction, has hash "N_8761797399049_134526824c"; 

insert
$N_8761797399049_134526824c_1 isa MLIL_VAR_SSA, has hash "N_8761797399049_134526824c_1", has edge-label "dest";
(to-node: $N_8761797399049_134526824c_1, from-node: $N_8761797399049_134526824c) isa node-link; 

match
$N_8761797399049_134526824c_1 isa operation, has hash "N_8761797399049_134526824c_1"; 

insert
$N_8761797399049_134526824c_1_0 isa variable-ssa, has hash "N_8761797399049_134526824c_1_0", has var "eax_1", has version 2, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797399049_134526824c_1_0, from-node: $N_8761797399049_134526824c_1) isa node-link; 

match
$N_8761797399049_134526824c isa instruction, has hash "N_8761797399049_134526824c"; 

insert
$L_8761797399049_134526824c_2 isa list, has hash "L_8761797399049_134526824c_2", has list-size 1, has edge-label "params";
(to-node: $L_8761797399049_134526824c_2, from-node: $N_8761797399049_134526824c) isa node-link; 

match
$L_8761797399049_134526824c_2 isa list, has hash "L_8761797399049_134526824c_2"; 

insert
$N_8761797399049_134526824c_2_0 isa MLIL_VAR_SSA, has hash "N_8761797399049_134526824c_2_0", has edge-label "0";
(to-node: $N_8761797399049_134526824c_2_0, from-node: $L_8761797399049_134526824c_2) isa node-link; 

match
$N_8761797399049_134526824c_2_0 isa operation, has hash "N_8761797399049_134526824c_2_0"; 

insert
$N_8761797399049_134526824c_2_0_0 isa variable-ssa, has hash "N_8761797399049_134526824c_2_0_0", has var "var_1c", has version 1, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797399049_134526824c_2_0_0, from-node: $N_8761797399049_134526824c_2_0) isa node-link; 

match
$N_8761797399049_134526824c isa instruction, has hash "N_8761797399049_134526824c"; 

insert
$N_8761797399049_134526824c_3 isa constant, has hash "N_8761797399049_134526824c_3", has constant-value "0", has edge-label "src_memory";
(to-node: $N_8761797399049_134526824c_3, from-node: $N_8761797399049_134526824c) isa node-link; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 0, has bb-end 7; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 0, has bb-end 7; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797361673_134526826c isa instruction, has hash "N_8761797361673_134526826c", has il-index 5, has asm-address "0x804b76a", has operation-type "MLIL_SET_VAR_SSA", has ins-text "ecx#1 = eax_2#3";
(contains-instruction: $N_8761797361673_134526826c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797361673_134526826c isa instruction, has hash "N_8761797361673_134526826c"; 

insert
$N_8761797361673_134526826c_0 isa variable-ssa, has hash "N_8761797361673_134526826c_0", has var "ecx", has version 1, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797361673_134526826c_0, from-node: $N_8761797361673_134526826c) isa node-link; 

match
$N_8761797361673_134526826c isa instruction, has hash "N_8761797361673_134526826c"; 

insert
$N_8761797361673_134526826c_1 isa MLIL_VAR_SSA, has hash "N_8761797361673_134526826c_1", has edge-label "src";
(to-node: $N_8761797361673_134526826c_1, from-node: $N_8761797361673_134526826c) isa node-link; 

match
$N_8761797361673_134526826c_1 isa operation, has hash "N_8761797361673_134526826c_1"; 

insert
$N_8761797361673_134526826c_1_0 isa variable-ssa, has hash "N_8761797361673_134526826c_1_0", has var "eax_2", has version 3, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797361673_134526826c_1_0, from-node: $N_8761797361673_134526826c_1) isa node-link; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 0, has bb-end 7; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 0, has bb-end 7; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797377113_134526828c isa instruction, has hash "N_8761797377113_134526828c", has il-index 6, has asm-address "0x804b76c", has operation-type "MLIL_SET_VAR_SSA", has ins-text "eax_3#4 = 0";
(contains-instruction: $N_8761797377113_134526828c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797377113_134526828c isa instruction, has hash "N_8761797377113_134526828c"; 

insert
$N_8761797377113_134526828c_0 isa variable-ssa, has hash "N_8761797377113_134526828c_0", has var "eax_3", has version 4, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797377113_134526828c_0, from-node: $N_8761797377113_134526828c) isa node-link; 

match
$N_8761797377113_134526828c isa instruction, has hash "N_8761797377113_134526828c"; 

insert
$N_8761797377113_134526828c_1 isa MLIL_CONST, has hash "N_8761797377113_134526828c_1", has edge-label "src";
(to-node: $N_8761797377113_134526828c_1, from-node: $N_8761797377113_134526828c) isa node-link; 

match
$N_8761797377113_134526828c_1 isa operation, has hash "N_8761797377113_134526828c_1"; 

insert
$N_8761797377113_134526828c_1_0 isa constant, has hash "N_8761797377113_134526828c_1_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8761797377113_134526828c_1_0, from-node: $N_8761797377113_134526828c_1) isa node-link; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 0, has bb-end 7; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 0, has bb-end 7; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797324589_134526832c isa instruction, has hash "N_8761797324589_134526832c", has il-index 7, has asm-address "0x804b770", has operation-type "MLIL_IF", has ins-text "if (ecx#1 == 0) then 8 @ 0x0 else 9 @ 0x804b772";
(contains-instruction: $N_8761797324589_134526832c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797324589_134526832c isa instruction, has hash "N_8761797324589_134526832c"; 

insert
$N_8761797324589_134526832c_0 isa MLIL_CMP_E, has hash "N_8761797324589_134526832c_0", has edge-label "condition";
(to-node: $N_8761797324589_134526832c_0, from-node: $N_8761797324589_134526832c) isa node-link; 

match
$N_8761797324589_134526832c_0 isa operation, has hash "N_8761797324589_134526832c_0"; 

insert
$N_8761797324589_134526832c_0_0 isa MLIL_VAR_SSA, has hash "N_8761797324589_134526832c_0_0", has edge-label "left";
(to-node: $N_8761797324589_134526832c_0_0, from-node: $N_8761797324589_134526832c_0) isa node-link; 

match
$N_8761797324589_134526832c_0_0 isa operation, has hash "N_8761797324589_134526832c_0_0"; 

insert
$N_8761797324589_134526832c_0_0_0 isa variable-ssa, has hash "N_8761797324589_134526832c_0_0_0", has var "ecx", has version 1, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797324589_134526832c_0_0_0, from-node: $N_8761797324589_134526832c_0_0) isa node-link; 

match
$N_8761797324589_134526832c_0 isa operation, has hash "N_8761797324589_134526832c_0"; 

insert
$N_8761797324589_134526832c_0_1 isa MLIL_CONST, has hash "N_8761797324589_134526832c_0_1", has edge-label "right";
(to-node: $N_8761797324589_134526832c_0_1, from-node: $N_8761797324589_134526832c_0) isa node-link; 

match
$N_8761797324589_134526832c_0_1 isa operation, has hash "N_8761797324589_134526832c_0_1"; 

insert
$N_8761797324589_134526832c_0_1_0 isa constant, has hash "N_8761797324589_134526832c_0_1_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8761797324589_134526832c_0_1_0, from-node: $N_8761797324589_134526832c_0_1) isa node-link; 

match
$N_8761797324589_134526832c isa instruction, has hash "N_8761797324589_134526832c"; 

insert
$N_8761797324589_134526832c_1 isa constant, has hash "N_8761797324589_134526832c_1", has constant-value "8", has edge-label "true";
(to-node: $N_8761797324589_134526832c_1, from-node: $N_8761797324589_134526832c) isa node-link; 

match
$N_8761797324589_134526832c isa instruction, has hash "N_8761797324589_134526832c"; 

insert
$N_8761797324589_134526832c_2 isa constant, has hash "N_8761797324589_134526832c_2", has constant-value "9", has edge-label "false";
(to-node: $N_8761797324589_134526832c_2, from-node: $N_8761797324589_134526832c) isa node-link; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 

insert 
$bb isa basic-block, has bb-start 8, has bb-end 8; 
(contains-basic-block: $bb, in-function: $func_cgc_my_add_word) isa has-basic-block; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 8, has bb-end 8; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 8, has bb-end 8; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797296133_0c isa instruction, has hash "N_8761797296133_0c", has il-index 8, has asm-address "0x0", has operation-type "MLIL_GOTO", has ins-text "goto 11 @ 0x804b7b7";
(contains-instruction: $N_8761797296133_0c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797296133_0c isa instruction, has hash "N_8761797296133_0c"; 

insert
$N_8761797296133_0c_0 isa constant, has hash "N_8761797296133_0c_0", has constant-value "11", has edge-label "dest";
(to-node: $N_8761797296133_0c_0, from-node: $N_8761797296133_0c) isa node-link; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 8, has bb-end 8; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797371653_0c isa instruction, has hash "N_8761797371653_0c", has il-index 28, has asm-address "0x0", has operation-type "MLIL_GOTO", has ins-text "goto 19 @ 0x804b780";
(contains-instruction: $N_8761797371653_0c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797371653_0c isa instruction, has hash "N_8761797371653_0c"; 

insert
$N_8761797371653_0c_0 isa constant, has hash "N_8761797371653_0c_0", has constant-value "19", has edge-label "dest";
(to-node: $N_8761797371653_0c_0, from-node: $N_8761797371653_0c) isa node-link; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 

insert 
$bb isa basic-block, has bb-start 9, has bb-end 10; 
(contains-basic-block: $bb, in-function: $func_cgc_my_add_word) isa has-basic-block; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 9, has bb-end 10; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 9, has bb-end 10; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797284601_134526834c isa instruction, has hash "N_8761797284601_134526834c", has il-index 9, has asm-address "0x804b772", has operation-type "MLIL_SET_VAR_SSA", has ins-text "edi_1#1 = 0x806a480";
(contains-instruction: $N_8761797284601_134526834c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797284601_134526834c isa instruction, has hash "N_8761797284601_134526834c"; 

insert
$N_8761797284601_134526834c_0 isa variable-ssa, has hash "N_8761797284601_134526834c_0", has var "edi_1", has version 1, has edge-label "dest", has var-type "int32_t*", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797284601_134526834c_0, from-node: $N_8761797284601_134526834c) isa node-link; 

match
$N_8761797284601_134526834c isa instruction, has hash "N_8761797284601_134526834c"; 

insert
$N_8761797284601_134526834c_1 isa MLIL_CONST_PTR, has hash "N_8761797284601_134526834c_1", has edge-label "src";
(to-node: $N_8761797284601_134526834c_1, from-node: $N_8761797284601_134526834c) isa node-link; 

match
$N_8761797284601_134526834c_1 isa operation, has hash "N_8761797284601_134526834c_1"; 

insert
$N_8761797284601_134526834c_1_0 isa constant, has hash "N_8761797284601_134526834c_1_0", has constant-value "134653056", has edge-label "constant";
(to-node: $N_8761797284601_134526834c_1_0, from-node: $N_8761797284601_134526834c_1) isa node-link; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 9, has bb-end 10; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 9, has bb-end 10; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797257733_134526839c isa instruction, has hash "N_8761797257733_134526839c", has il-index 10, has asm-address "0x804b777", has operation-type "MLIL_GOTO", has ins-text "goto 19 @ 0x804b780";
(contains-instruction: $N_8761797257733_134526839c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797257733_134526839c isa instruction, has hash "N_8761797257733_134526839c"; 

insert
$N_8761797257733_134526839c_0 isa constant, has hash "N_8761797257733_134526839c_0", has constant-value "19", has edge-label "dest";
(to-node: $N_8761797257733_134526839c_0, from-node: $N_8761797257733_134526839c) isa node-link; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 

insert 
$bb isa basic-block, has bb-start 11, has bb-end 18; 
(contains-basic-block: $bb, in-function: $func_cgc_my_add_word) isa has-basic-block; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 11, has bb-end 18; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 11, has bb-end 18; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797327097_134526903c isa instruction, has hash "N_8761797327097_134526903c", has il-index 11, has asm-address "0x804b7b7", has operation-type "MLIL_VAR_PHI", has ins-text "var_1c_1#3 = ϕ(var_1c#1, var_1c_1#2)";
(contains-instruction: $N_8761797327097_134526903c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797327097_134526903c isa instruction, has hash "N_8761797327097_134526903c"; 

insert
$N_8761797327097_134526903c_0 isa variable-ssa, has hash "N_8761797327097_134526903c_0", has var "var_1c_1", has version 3, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797327097_134526903c_0, from-node: $N_8761797327097_134526903c) isa node-link; 

match
$N_8761797327097_134526903c isa instruction, has hash "N_8761797327097_134526903c"; 

insert
$L_8761797327097_134526903c_1 isa list, has hash "L_8761797327097_134526903c_1", has list-size 2, has edge-label "src";
(to-node: $L_8761797327097_134526903c_1, from-node: $N_8761797327097_134526903c) isa node-link; 

match
$L_8761797327097_134526903c_1 isa list, has hash "L_8761797327097_134526903c_1"; 

insert
$N_8761797327097_134526903c_1_0 isa variable-ssa, has hash "N_8761797327097_134526903c_1_0", has var "var_1c", has version 1, has edge-label "0", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797327097_134526903c_1_0, from-node: $L_8761797327097_134526903c_1) isa node-link; 

match
$L_8761797327097_134526903c_1 isa list, has hash "L_8761797327097_134526903c_1"; 

insert
$N_8761797327097_134526903c_1_1 isa variable-ssa, has hash "N_8761797327097_134526903c_1_1", has var "var_1c_1", has version 2, has edge-label "1", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797327097_134526903c_1_1, from-node: $L_8761797327097_134526903c_1) isa node-link; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 11, has bb-end 18; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797348341_134526903c isa instruction, has hash "N_8761797348341_134526903c", has il-index 12, has asm-address "0x804b7b7", has operation-type "MLIL_VAR_PHI", has ins-text "eax_3#9 = ϕ(eax_3#4, eax_3#8)";
(contains-instruction: $N_8761797348341_134526903c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797348341_134526903c isa instruction, has hash "N_8761797348341_134526903c"; 

insert
$N_8761797348341_134526903c_0 isa variable-ssa, has hash "N_8761797348341_134526903c_0", has var "eax_3", has version 9, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797348341_134526903c_0, from-node: $N_8761797348341_134526903c) isa node-link; 

match
$N_8761797348341_134526903c isa instruction, has hash "N_8761797348341_134526903c"; 

insert
$L_8761797348341_134526903c_1 isa list, has hash "L_8761797348341_134526903c_1", has list-size 2, has edge-label "src";
(to-node: $L_8761797348341_134526903c_1, from-node: $N_8761797348341_134526903c) isa node-link; 

match
$L_8761797348341_134526903c_1 isa list, has hash "L_8761797348341_134526903c_1"; 

insert
$N_8761797348341_134526903c_1_0 isa variable-ssa, has hash "N_8761797348341_134526903c_1_0", has var "eax_3", has version 4, has edge-label "0", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797348341_134526903c_1_0, from-node: $L_8761797348341_134526903c_1) isa node-link; 

match
$L_8761797348341_134526903c_1 isa list, has hash "L_8761797348341_134526903c_1"; 

insert
$N_8761797348341_134526903c_1_1 isa variable-ssa, has hash "N_8761797348341_134526903c_1_1", has var "eax_3", has version 8, has edge-label "1", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797348341_134526903c_1_1, from-node: $L_8761797348341_134526903c_1) isa node-link; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 11, has bb-end 18; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797354337_134526903c isa instruction, has hash "N_8761797354337_134526903c", has il-index 13, has asm-address "0x804b7b7", has operation-type "MLIL_VAR_PHI", has ins-text "ecx_2#4 = ϕ(ecx#1, ecx_2#3)";
(contains-instruction: $N_8761797354337_134526903c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797354337_134526903c isa instruction, has hash "N_8761797354337_134526903c"; 

insert
$N_8761797354337_134526903c_0 isa variable-ssa, has hash "N_8761797354337_134526903c_0", has var "ecx_2", has version 4, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797354337_134526903c_0, from-node: $N_8761797354337_134526903c) isa node-link; 

match
$N_8761797354337_134526903c isa instruction, has hash "N_8761797354337_134526903c"; 

insert
$L_8761797354337_134526903c_1 isa list, has hash "L_8761797354337_134526903c_1", has list-size 2, has edge-label "src";
(to-node: $L_8761797354337_134526903c_1, from-node: $N_8761797354337_134526903c) isa node-link; 

match
$L_8761797354337_134526903c_1 isa list, has hash "L_8761797354337_134526903c_1"; 

insert
$N_8761797354337_134526903c_1_0 isa variable-ssa, has hash "N_8761797354337_134526903c_1_0", has var "ecx", has version 1, has edge-label "0", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797354337_134526903c_1_0, from-node: $L_8761797354337_134526903c_1) isa node-link; 

match
$L_8761797354337_134526903c_1 isa list, has hash "L_8761797354337_134526903c_1"; 

insert
$N_8761797354337_134526903c_1_1 isa variable-ssa, has hash "N_8761797354337_134526903c_1_1", has var "ecx_2", has version 3, has edge-label "1", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797354337_134526903c_1_1, from-node: $L_8761797354337_134526903c_1) isa node-link; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 11, has bb-end 18; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797382917_134526903c isa instruction, has hash "N_8761797382917_134526903c", has il-index 17, has asm-address "0x804b7b7", has operation-type "MLIL_MEM_PHI", has ins-text "mem#5 = ϕ(mem#1, mem#4)";
(contains-instruction: $N_8761797382917_134526903c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797382917_134526903c isa instruction, has hash "N_8761797382917_134526903c"; 

insert
$N_8761797382917_134526903c_0 isa constant, has hash "N_8761797382917_134526903c_0", has constant-value "5", has edge-label "dest_memory";
(to-node: $N_8761797382917_134526903c_0, from-node: $N_8761797382917_134526903c) isa node-link; 

match
$N_8761797382917_134526903c isa instruction, has hash "N_8761797382917_134526903c"; 

insert
$L_8761797382917_134526903c_1 isa list, has hash "L_8761797382917_134526903c_1", has list-size 2, has edge-label "src_memory";
(to-node: $L_8761797382917_134526903c_1, from-node: $N_8761797382917_134526903c) isa node-link; 

match
$L_8761797382917_134526903c_1 isa list, has hash "L_8761797382917_134526903c_1"; 

insert
$N_8761797382917_134526903c_1_0 isa constant, has hash "N_8761797382917_134526903c_1_0", has constant-value "1", has edge-label "0";
(to-node: $N_8761797382917_134526903c_1_0, from-node: $L_8761797382917_134526903c_1) isa node-link; 

match
$L_8761797382917_134526903c_1 isa list, has hash "L_8761797382917_134526903c_1"; 

insert
$N_8761797382917_134526903c_1_1 isa constant, has hash "N_8761797382917_134526903c_1_1", has constant-value "4", has edge-label "1";
(to-node: $N_8761797382917_134526903c_1_1, from-node: $L_8761797382917_134526903c_1) isa node-link; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 11, has bb-end 18; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797392009_134526903c isa instruction, has hash "N_8761797392009_134526903c", has il-index 18, has asm-address "0x804b7b7", has operation-type "MLIL_RET", has ins-text "return eax_3#9";
(contains-instruction: $N_8761797392009_134526903c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797392009_134526903c isa instruction, has hash "N_8761797392009_134526903c"; 

insert
$L_8761797392009_134526903c_0 isa list, has hash "L_8761797392009_134526903c_0", has list-size 1, has edge-label "src";
(to-node: $L_8761797392009_134526903c_0, from-node: $N_8761797392009_134526903c) isa node-link; 

match
$L_8761797392009_134526903c_0 isa list, has hash "L_8761797392009_134526903c_0"; 

insert
$N_8761797392009_134526903c_0_0 isa MLIL_VAR_SSA, has hash "N_8761797392009_134526903c_0_0", has edge-label "0";
(to-node: $N_8761797392009_134526903c_0_0, from-node: $L_8761797392009_134526903c_0) isa node-link; 

match
$N_8761797392009_134526903c_0_0 isa operation, has hash "N_8761797392009_134526903c_0_0"; 

insert
$N_8761797392009_134526903c_0_0_0 isa variable-ssa, has hash "N_8761797392009_134526903c_0_0_0", has var "eax_3", has version 9, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797392009_134526903c_0_0_0, from-node: $N_8761797392009_134526903c_0_0) isa node-link; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 11, has bb-end 18; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797412101_134526903c isa instruction, has hash "N_8761797412101_134526903c", has il-index 15, has asm-address "0x804b7b7", has operation-type "MLIL_VAR_PHI", has ins-text "edi_1#4 = ϕ(edi#0, edi_1#3)";
(contains-instruction: $N_8761797412101_134526903c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797412101_134526903c isa instruction, has hash "N_8761797412101_134526903c"; 

insert
$N_8761797412101_134526903c_0 isa variable-ssa, has hash "N_8761797412101_134526903c_0", has var "edi_1", has version 4, has edge-label "dest", has var-type "int32_t*", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797412101_134526903c_0, from-node: $N_8761797412101_134526903c) isa node-link; 

match
$N_8761797412101_134526903c isa instruction, has hash "N_8761797412101_134526903c"; 

insert
$L_8761797412101_134526903c_1 isa list, has hash "L_8761797412101_134526903c_1", has list-size 2, has edge-label "src";
(to-node: $L_8761797412101_134526903c_1, from-node: $N_8761797412101_134526903c) isa node-link; 

match
$L_8761797412101_134526903c_1 isa list, has hash "L_8761797412101_134526903c_1"; 

insert
$N_8761797412101_134526903c_1_0 isa variable-ssa, has hash "N_8761797412101_134526903c_1_0", has var "edi", has version 0, has edge-label "0", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797412101_134526903c_1_0, from-node: $L_8761797412101_134526903c_1) isa node-link; 

match
$L_8761797412101_134526903c_1 isa list, has hash "L_8761797412101_134526903c_1"; 

insert
$N_8761797412101_134526903c_1_1 isa variable-ssa, has hash "N_8761797412101_134526903c_1_1", has var "edi_1", has version 3, has edge-label "1", has var-type "int32_t*", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797412101_134526903c_1_1, from-node: $L_8761797412101_134526903c_1) isa node-link; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 11, has bb-end 18; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797421061_134526903c isa instruction, has hash "N_8761797421061_134526903c", has il-index 14, has asm-address "0x804b7b7", has operation-type "MLIL_VAR_PHI", has ins-text "ebx_1#3 = ϕ(ebx#0, ebx_1#2)";
(contains-instruction: $N_8761797421061_134526903c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797421061_134526903c isa instruction, has hash "N_8761797421061_134526903c"; 

insert
$N_8761797421061_134526903c_0 isa variable-ssa, has hash "N_8761797421061_134526903c_0", has var "ebx_1", has version 3, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797421061_134526903c_0, from-node: $N_8761797421061_134526903c) isa node-link; 

match
$N_8761797421061_134526903c isa instruction, has hash "N_8761797421061_134526903c"; 

insert
$L_8761797421061_134526903c_1 isa list, has hash "L_8761797421061_134526903c_1", has list-size 2, has edge-label "src";
(to-node: $L_8761797421061_134526903c_1, from-node: $N_8761797421061_134526903c) isa node-link; 

match
$L_8761797421061_134526903c_1 isa list, has hash "L_8761797421061_134526903c_1"; 

insert
$N_8761797421061_134526903c_1_0 isa variable-ssa, has hash "N_8761797421061_134526903c_1_0", has var "ebx", has version 0, has edge-label "0", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797421061_134526903c_1_0, from-node: $L_8761797421061_134526903c_1) isa node-link; 

match
$L_8761797421061_134526903c_1 isa list, has hash "L_8761797421061_134526903c_1"; 

insert
$N_8761797421061_134526903c_1_1 isa variable-ssa, has hash "N_8761797421061_134526903c_1_1", has var "ebx_1", has version 2, has edge-label "1", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797421061_134526903c_1_1, from-node: $L_8761797421061_134526903c_1) isa node-link; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 11, has bb-end 18; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797424605_134526903c isa instruction, has hash "N_8761797424605_134526903c", has il-index 16, has asm-address "0x804b7b7", has operation-type "MLIL_VAR_PHI", has ins-text "cond:0_1#3 = ϕ(cond:0#0, cond:0_1#2)";
(contains-instruction: $N_8761797424605_134526903c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797424605_134526903c isa instruction, has hash "N_8761797424605_134526903c"; 

insert
$N_8761797424605_134526903c_0 isa variable-ssa, has hash "N_8761797424605_134526903c_0", has var "cond:0_1", has version 3, has edge-label "dest", has var-type "bool", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797424605_134526903c_0, from-node: $N_8761797424605_134526903c) isa node-link; 

match
$N_8761797424605_134526903c isa instruction, has hash "N_8761797424605_134526903c"; 

insert
$L_8761797424605_134526903c_1 isa list, has hash "L_8761797424605_134526903c_1", has list-size 2, has edge-label "src";
(to-node: $L_8761797424605_134526903c_1, from-node: $N_8761797424605_134526903c) isa node-link; 

match
$L_8761797424605_134526903c_1 isa list, has hash "L_8761797424605_134526903c_1"; 

insert
$N_8761797424605_134526903c_1_0 isa variable-ssa, has hash "N_8761797424605_134526903c_1_0", has var "cond:0", has version 0, has edge-label "0", has var-type "bool", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797424605_134526903c_1_0, from-node: $L_8761797424605_134526903c_1) isa node-link; 

match
$L_8761797424605_134526903c_1 isa list, has hash "L_8761797424605_134526903c_1"; 

insert
$N_8761797424605_134526903c_1_1 isa variable-ssa, has hash "N_8761797424605_134526903c_1_1", has var "cond:0_1", has version 2, has edge-label "1", has var-type "bool", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797424605_134526903c_1_1, from-node: $L_8761797424605_134526903c_1) isa node-link; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 

insert 
$bb isa basic-block, has bb-start 19, has bb-end 27; 
(contains-basic-block: $bb, in-function: $func_cgc_my_add_word) isa has-basic-block; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 19, has bb-end 27; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 19, has bb-end 27; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797242609_134526848c isa instruction, has hash "N_8761797242609_134526848c", has il-index 20, has asm-address "0x804b780", has operation-type "MLIL_VAR_PHI", has ins-text "ebx_1#1 = ϕ(ebx#0, ebx_1#2)";
(contains-instruction: $N_8761797242609_134526848c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797242609_134526848c isa instruction, has hash "N_8761797242609_134526848c"; 

insert
$N_8761797242609_134526848c_0 isa variable-ssa, has hash "N_8761797242609_134526848c_0", has var "ebx_1", has version 1, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797242609_134526848c_0, from-node: $N_8761797242609_134526848c) isa node-link; 

match
$N_8761797242609_134526848c isa instruction, has hash "N_8761797242609_134526848c"; 

insert
$L_8761797242609_134526848c_1 isa list, has hash "L_8761797242609_134526848c_1", has list-size 2, has edge-label "src";
(to-node: $L_8761797242609_134526848c_1, from-node: $N_8761797242609_134526848c) isa node-link; 

match
$L_8761797242609_134526848c_1 isa list, has hash "L_8761797242609_134526848c_1"; 

insert
$N_8761797242609_134526848c_1_0 isa variable-ssa, has hash "N_8761797242609_134526848c_1_0", has var "ebx", has version 0, has edge-label "0", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797242609_134526848c_1_0, from-node: $L_8761797242609_134526848c_1) isa node-link; 

match
$L_8761797242609_134526848c_1 isa list, has hash "L_8761797242609_134526848c_1"; 

insert
$N_8761797242609_134526848c_1_1 isa variable-ssa, has hash "N_8761797242609_134526848c_1_1", has var "ebx_1", has version 2, has edge-label "1", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797242609_134526848c_1_1, from-node: $L_8761797242609_134526848c_1) isa node-link; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 19, has bb-end 27; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797251333_134526848c isa instruction, has hash "N_8761797251333_134526848c", has il-index 22, has asm-address "0x804b780", has operation-type "MLIL_VAR_PHI", has ins-text "cond:0_1#1 = ϕ(cond:0#0, cond:0_1#2)";
(contains-instruction: $N_8761797251333_134526848c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797251333_134526848c isa instruction, has hash "N_8761797251333_134526848c"; 

insert
$N_8761797251333_134526848c_0 isa variable-ssa, has hash "N_8761797251333_134526848c_0", has var "cond:0_1", has version 1, has edge-label "dest", has var-type "bool", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797251333_134526848c_0, from-node: $N_8761797251333_134526848c) isa node-link; 

match
$N_8761797251333_134526848c isa instruction, has hash "N_8761797251333_134526848c"; 

insert
$L_8761797251333_134526848c_1 isa list, has hash "L_8761797251333_134526848c_1", has list-size 2, has edge-label "src";
(to-node: $L_8761797251333_134526848c_1, from-node: $N_8761797251333_134526848c) isa node-link; 

match
$L_8761797251333_134526848c_1 isa list, has hash "L_8761797251333_134526848c_1"; 

insert
$N_8761797251333_134526848c_1_0 isa variable-ssa, has hash "N_8761797251333_134526848c_1_0", has var "cond:0", has version 0, has edge-label "0", has var-type "bool", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797251333_134526848c_1_0, from-node: $L_8761797251333_134526848c_1) isa node-link; 

match
$L_8761797251333_134526848c_1 isa list, has hash "L_8761797251333_134526848c_1"; 

insert
$N_8761797251333_134526848c_1_1 isa variable-ssa, has hash "N_8761797251333_134526848c_1_1", has var "cond:0_1", has version 2, has edge-label "1", has var-type "bool", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797251333_134526848c_1_1, from-node: $L_8761797251333_134526848c_1) isa node-link; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 19, has bb-end 27; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797253381_134526848c isa instruction, has hash "N_8761797253381_134526848c", has il-index 23, has asm-address "0x804b780", has operation-type "MLIL_SET_VAR_SSA", has ins-text "ebx_1#2 = eax_3#5";
(contains-instruction: $N_8761797253381_134526848c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797253381_134526848c isa instruction, has hash "N_8761797253381_134526848c"; 

insert
$N_8761797253381_134526848c_0 isa variable-ssa, has hash "N_8761797253381_134526848c_0", has var "ebx_1", has version 2, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797253381_134526848c_0, from-node: $N_8761797253381_134526848c) isa node-link; 

match
$N_8761797253381_134526848c isa instruction, has hash "N_8761797253381_134526848c"; 

insert
$N_8761797253381_134526848c_1 isa MLIL_VAR_SSA, has hash "N_8761797253381_134526848c_1", has edge-label "src";
(to-node: $N_8761797253381_134526848c_1, from-node: $N_8761797253381_134526848c) isa node-link; 

match
$N_8761797253381_134526848c_1 isa operation, has hash "N_8761797253381_134526848c_1"; 

insert
$N_8761797253381_134526848c_1_0 isa variable-ssa, has hash "N_8761797253381_134526848c_1_0", has var "eax_3", has version 5, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797253381_134526848c_1_0, from-node: $N_8761797253381_134526848c_1) isa node-link; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 19, has bb-end 27; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797272069_134526848c isa instruction, has hash "N_8761797272069_134526848c", has il-index 21, has asm-address "0x804b780", has operation-type "MLIL_VAR_PHI", has ins-text "edi_1#2 = ϕ(edi_1#1, edi_1#3)";
(contains-instruction: $N_8761797272069_134526848c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797272069_134526848c isa instruction, has hash "N_8761797272069_134526848c"; 

insert
$N_8761797272069_134526848c_0 isa variable-ssa, has hash "N_8761797272069_134526848c_0", has var "edi_1", has version 2, has edge-label "dest", has var-type "int32_t*", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797272069_134526848c_0, from-node: $N_8761797272069_134526848c) isa node-link; 

match
$N_8761797272069_134526848c isa instruction, has hash "N_8761797272069_134526848c"; 

insert
$L_8761797272069_134526848c_1 isa list, has hash "L_8761797272069_134526848c_1", has list-size 2, has edge-label "src";
(to-node: $L_8761797272069_134526848c_1, from-node: $N_8761797272069_134526848c) isa node-link; 

match
$L_8761797272069_134526848c_1 isa list, has hash "L_8761797272069_134526848c_1"; 

insert
$N_8761797272069_134526848c_1_0 isa variable-ssa, has hash "N_8761797272069_134526848c_1_0", has var "edi_1", has version 1, has edge-label "0", has var-type "int32_t*", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797272069_134526848c_1_0, from-node: $L_8761797272069_134526848c_1) isa node-link; 

match
$L_8761797272069_134526848c_1 isa list, has hash "L_8761797272069_134526848c_1"; 

insert
$N_8761797272069_134526848c_1_1 isa variable-ssa, has hash "N_8761797272069_134526848c_1_1", has var "edi_1", has version 3, has edge-label "1", has var-type "int32_t*", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797272069_134526848c_1_1, from-node: $L_8761797272069_134526848c_1) isa node-link; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 19, has bb-end 27; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797287549_134526848c isa instruction, has hash "N_8761797287549_134526848c", has il-index 19, has asm-address "0x804b780", has operation-type "MLIL_VAR_PHI", has ins-text "eax_3#5 = ϕ(eax_3#4, eax_3#6)";
(contains-instruction: $N_8761797287549_134526848c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797287549_134526848c isa instruction, has hash "N_8761797287549_134526848c"; 

insert
$N_8761797287549_134526848c_0 isa variable-ssa, has hash "N_8761797287549_134526848c_0", has var "eax_3", has version 5, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797287549_134526848c_0, from-node: $N_8761797287549_134526848c) isa node-link; 

match
$N_8761797287549_134526848c isa instruction, has hash "N_8761797287549_134526848c"; 

insert
$L_8761797287549_134526848c_1 isa list, has hash "L_8761797287549_134526848c_1", has list-size 2, has edge-label "src";
(to-node: $L_8761797287549_134526848c_1, from-node: $N_8761797287549_134526848c) isa node-link; 

match
$L_8761797287549_134526848c_1 isa list, has hash "L_8761797287549_134526848c_1"; 

insert
$N_8761797287549_134526848c_1_0 isa variable-ssa, has hash "N_8761797287549_134526848c_1_0", has var "eax_3", has version 4, has edge-label "0", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797287549_134526848c_1_0, from-node: $L_8761797287549_134526848c_1) isa node-link; 

match
$L_8761797287549_134526848c_1 isa list, has hash "L_8761797287549_134526848c_1"; 

insert
$N_8761797287549_134526848c_1_1 isa variable-ssa, has hash "N_8761797287549_134526848c_1_1", has var "eax_3", has version 6, has edge-label "1", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797287549_134526848c_1_1, from-node: $L_8761797287549_134526848c_1) isa node-link; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 19, has bb-end 27; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 19, has bb-end 27; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797392645_134526850c isa instruction, has hash "N_8761797392645_134526850c", has il-index 24, has asm-address "0x804b782", has operation-type "MLIL_SET_VAR_SSA", has ins-text "eax_3#6 = ebx_1#2 + 1";
(contains-instruction: $N_8761797392645_134526850c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797392645_134526850c isa instruction, has hash "N_8761797392645_134526850c"; 

insert
$N_8761797392645_134526850c_0 isa variable-ssa, has hash "N_8761797392645_134526850c_0", has var "eax_3", has version 6, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797392645_134526850c_0, from-node: $N_8761797392645_134526850c) isa node-link; 

match
$N_8761797392645_134526850c isa instruction, has hash "N_8761797392645_134526850c"; 

insert
$N_8761797392645_134526850c_1 isa MLIL_ADD, has hash "N_8761797392645_134526850c_1", has edge-label "src";
(to-node: $N_8761797392645_134526850c_1, from-node: $N_8761797392645_134526850c) isa node-link; 

match
$N_8761797392645_134526850c_1 isa operation, has hash "N_8761797392645_134526850c_1"; 

insert
$N_8761797392645_134526850c_1_0 isa MLIL_VAR_SSA, has hash "N_8761797392645_134526850c_1_0", has edge-label "left";
(to-node: $N_8761797392645_134526850c_1_0, from-node: $N_8761797392645_134526850c_1) isa node-link; 

match
$N_8761797392645_134526850c_1_0 isa operation, has hash "N_8761797392645_134526850c_1_0"; 

insert
$N_8761797392645_134526850c_1_0_0 isa variable-ssa, has hash "N_8761797392645_134526850c_1_0_0", has var "ebx_1", has version 2, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797392645_134526850c_1_0_0, from-node: $N_8761797392645_134526850c_1_0) isa node-link; 

match
$N_8761797392645_134526850c_1 isa operation, has hash "N_8761797392645_134526850c_1"; 

insert
$N_8761797392645_134526850c_1_1 isa MLIL_CONST, has hash "N_8761797392645_134526850c_1_1", has edge-label "right";
(to-node: $N_8761797392645_134526850c_1_1, from-node: $N_8761797392645_134526850c_1) isa node-link; 

match
$N_8761797392645_134526850c_1_1 isa operation, has hash "N_8761797392645_134526850c_1_1"; 

insert
$N_8761797392645_134526850c_1_1_0 isa constant, has hash "N_8761797392645_134526850c_1_1_0", has constant-value "1", has edge-label "constant";
(to-node: $N_8761797392645_134526850c_1_1_0, from-node: $N_8761797392645_134526850c_1_1) isa node-link; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 19, has bb-end 27; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 19, has bb-end 27; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797340677_134526853c isa instruction, has hash "N_8761797340677_134526853c", has il-index 25, has asm-address "0x804b785", has operation-type "MLIL_SET_VAR_SSA", has ins-text "cond:0_1#2 = [edi_1#2 + 4].d @ mem#1 != 0";
(contains-instruction: $N_8761797340677_134526853c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797340677_134526853c isa instruction, has hash "N_8761797340677_134526853c"; 

insert
$N_8761797340677_134526853c_0 isa variable-ssa, has hash "N_8761797340677_134526853c_0", has var "cond:0_1", has version 2, has edge-label "dest", has var-type "bool", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797340677_134526853c_0, from-node: $N_8761797340677_134526853c) isa node-link; 

match
$N_8761797340677_134526853c isa instruction, has hash "N_8761797340677_134526853c"; 

insert
$N_8761797340677_134526853c_1 isa MLIL_CMP_NE, has hash "N_8761797340677_134526853c_1", has edge-label "src";
(to-node: $N_8761797340677_134526853c_1, from-node: $N_8761797340677_134526853c) isa node-link; 

match
$N_8761797340677_134526853c_1 isa operation, has hash "N_8761797340677_134526853c_1"; 

insert
$N_8761797340677_134526853c_1_0 isa MLIL_LOAD_SSA, has hash "N_8761797340677_134526853c_1_0", has edge-label "left";
(to-node: $N_8761797340677_134526853c_1_0, from-node: $N_8761797340677_134526853c_1) isa node-link; 

match
$N_8761797340677_134526853c_1_0 isa operation, has hash "N_8761797340677_134526853c_1_0"; 

insert
$N_8761797340677_134526853c_1_0_0 isa MLIL_ADD, has hash "N_8761797340677_134526853c_1_0_0", has edge-label "src";
(to-node: $N_8761797340677_134526853c_1_0_0, from-node: $N_8761797340677_134526853c_1_0) isa node-link; 

match
$N_8761797340677_134526853c_1_0_0 isa operation, has hash "N_8761797340677_134526853c_1_0_0"; 

insert
$N_8761797340677_134526853c_1_0_0_0 isa MLIL_VAR_SSA, has hash "N_8761797340677_134526853c_1_0_0_0", has edge-label "left";
(to-node: $N_8761797340677_134526853c_1_0_0_0, from-node: $N_8761797340677_134526853c_1_0_0) isa node-link; 

match
$N_8761797340677_134526853c_1_0_0_0 isa operation, has hash "N_8761797340677_134526853c_1_0_0_0"; 

insert
$N_8761797340677_134526853c_1_0_0_0_0 isa variable-ssa, has hash "N_8761797340677_134526853c_1_0_0_0_0", has var "edi_1", has version 2, has edge-label "src", has var-type "int32_t*", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797340677_134526853c_1_0_0_0_0, from-node: $N_8761797340677_134526853c_1_0_0_0) isa node-link; 

match
$N_8761797340677_134526853c_1_0_0 isa operation, has hash "N_8761797340677_134526853c_1_0_0"; 

insert
$N_8761797340677_134526853c_1_0_0_1 isa MLIL_CONST, has hash "N_8761797340677_134526853c_1_0_0_1", has edge-label "right";
(to-node: $N_8761797340677_134526853c_1_0_0_1, from-node: $N_8761797340677_134526853c_1_0_0) isa node-link; 

match
$N_8761797340677_134526853c_1_0_0_1 isa operation, has hash "N_8761797340677_134526853c_1_0_0_1"; 

insert
$N_8761797340677_134526853c_1_0_0_1_0 isa constant, has hash "N_8761797340677_134526853c_1_0_0_1_0", has constant-value "4", has edge-label "constant";
(to-node: $N_8761797340677_134526853c_1_0_0_1_0, from-node: $N_8761797340677_134526853c_1_0_0_1) isa node-link; 

match
$N_8761797340677_134526853c_1_0 isa operation, has hash "N_8761797340677_134526853c_1_0"; 

insert
$N_8761797340677_134526853c_1_0_1 isa constant, has hash "N_8761797340677_134526853c_1_0_1", has constant-value "1", has edge-label "src_memory";
(to-node: $N_8761797340677_134526853c_1_0_1, from-node: $N_8761797340677_134526853c_1_0) isa node-link; 

match
$N_8761797340677_134526853c_1 isa operation, has hash "N_8761797340677_134526853c_1"; 

insert
$N_8761797340677_134526853c_1_1 isa MLIL_CONST, has hash "N_8761797340677_134526853c_1_1", has edge-label "right";
(to-node: $N_8761797340677_134526853c_1_1, from-node: $N_8761797340677_134526853c_1) isa node-link; 

match
$N_8761797340677_134526853c_1_1 isa operation, has hash "N_8761797340677_134526853c_1_1"; 

insert
$N_8761797340677_134526853c_1_1_0 isa constant, has hash "N_8761797340677_134526853c_1_1_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8761797340677_134526853c_1_1_0, from-node: $N_8761797340677_134526853c_1_1) isa node-link; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 19, has bb-end 27; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 19, has bb-end 27; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797378565_134526857c isa instruction, has hash "N_8761797378565_134526857c", has il-index 26, has asm-address "0x804b789", has operation-type "MLIL_SET_VAR_SSA", has ins-text "edi_1#3 = edi_1#2 + 4";
(contains-instruction: $N_8761797378565_134526857c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797378565_134526857c isa instruction, has hash "N_8761797378565_134526857c"; 

insert
$N_8761797378565_134526857c_0 isa variable-ssa, has hash "N_8761797378565_134526857c_0", has var "edi_1", has version 3, has edge-label "dest", has var-type "int32_t*", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797378565_134526857c_0, from-node: $N_8761797378565_134526857c) isa node-link; 

match
$N_8761797378565_134526857c isa instruction, has hash "N_8761797378565_134526857c"; 

insert
$N_8761797378565_134526857c_1 isa MLIL_ADD, has hash "N_8761797378565_134526857c_1", has edge-label "src";
(to-node: $N_8761797378565_134526857c_1, from-node: $N_8761797378565_134526857c) isa node-link; 

match
$N_8761797378565_134526857c_1 isa operation, has hash "N_8761797378565_134526857c_1"; 

insert
$N_8761797378565_134526857c_1_0 isa MLIL_VAR_SSA, has hash "N_8761797378565_134526857c_1_0", has edge-label "left";
(to-node: $N_8761797378565_134526857c_1_0, from-node: $N_8761797378565_134526857c_1) isa node-link; 

match
$N_8761797378565_134526857c_1_0 isa operation, has hash "N_8761797378565_134526857c_1_0"; 

insert
$N_8761797378565_134526857c_1_0_0 isa variable-ssa, has hash "N_8761797378565_134526857c_1_0_0", has var "edi_1", has version 2, has edge-label "src", has var-type "int32_t*", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797378565_134526857c_1_0_0, from-node: $N_8761797378565_134526857c_1_0) isa node-link; 

match
$N_8761797378565_134526857c_1 isa operation, has hash "N_8761797378565_134526857c_1"; 

insert
$N_8761797378565_134526857c_1_1 isa MLIL_CONST, has hash "N_8761797378565_134526857c_1_1", has edge-label "right";
(to-node: $N_8761797378565_134526857c_1_1, from-node: $N_8761797378565_134526857c_1) isa node-link; 

match
$N_8761797378565_134526857c_1_1 isa operation, has hash "N_8761797378565_134526857c_1_1"; 

insert
$N_8761797378565_134526857c_1_1_0 isa constant, has hash "N_8761797378565_134526857c_1_1_0", has constant-value "4", has edge-label "constant";
(to-node: $N_8761797378565_134526857c_1_1_0, from-node: $N_8761797378565_134526857c_1_1) isa node-link; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 19, has bb-end 27; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 19, has bb-end 27; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797281797_134526860c isa instruction, has hash "N_8761797281797_134526860c", has il-index 27, has asm-address "0x804b78c", has operation-type "MLIL_IF", has ins-text "if (cond:0_1#2) then 28 @ 0x0 else 29 @ 0x804b78e";
(contains-instruction: $N_8761797281797_134526860c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797281797_134526860c isa instruction, has hash "N_8761797281797_134526860c"; 

insert
$N_8761797281797_134526860c_0 isa MLIL_VAR_SSA, has hash "N_8761797281797_134526860c_0", has edge-label "condition";
(to-node: $N_8761797281797_134526860c_0, from-node: $N_8761797281797_134526860c) isa node-link; 

match
$N_8761797281797_134526860c_0 isa operation, has hash "N_8761797281797_134526860c_0"; 

insert
$N_8761797281797_134526860c_0_0 isa variable-ssa, has hash "N_8761797281797_134526860c_0_0", has var "cond:0_1", has version 2, has edge-label "src", has var-type "bool", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797281797_134526860c_0_0, from-node: $N_8761797281797_134526860c_0) isa node-link; 

match
$N_8761797281797_134526860c isa instruction, has hash "N_8761797281797_134526860c"; 

insert
$N_8761797281797_134526860c_1 isa constant, has hash "N_8761797281797_134526860c_1", has constant-value "28", has edge-label "true";
(to-node: $N_8761797281797_134526860c_1, from-node: $N_8761797281797_134526860c) isa node-link; 

match
$N_8761797281797_134526860c isa instruction, has hash "N_8761797281797_134526860c"; 

insert
$N_8761797281797_134526860c_2 isa constant, has hash "N_8761797281797_134526860c_2", has constant-value "29", has edge-label "false";
(to-node: $N_8761797281797_134526860c_2, from-node: $N_8761797281797_134526860c) isa node-link; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 

insert 
$bb isa basic-block, has bb-start 28, has bb-end 28; 
(contains-basic-block: $bb, in-function: $func_cgc_my_add_word) isa has-basic-block; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 

insert 
$bb isa basic-block, has bb-start 29, has bb-end 36; 
(contains-basic-block: $bb, in-function: $func_cgc_my_add_word) isa has-basic-block; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 29, has bb-end 36; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 29, has bb-end 36; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797374029_134526862c isa instruction, has hash "N_8761797374029_134526862c", has il-index 29, has asm-address "0x804b78e", has operation-type "MLIL_SET_VAR_SSA", has ins-text "ecx_1#2 = [0x806a3f4].d @ mem#1";
(contains-instruction: $N_8761797374029_134526862c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797374029_134526862c isa instruction, has hash "N_8761797374029_134526862c"; 

insert
$N_8761797374029_134526862c_0 isa variable-ssa, has hash "N_8761797374029_134526862c_0", has var "ecx_1", has version 2, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797374029_134526862c_0, from-node: $N_8761797374029_134526862c) isa node-link; 

match
$N_8761797374029_134526862c isa instruction, has hash "N_8761797374029_134526862c"; 

insert
$N_8761797374029_134526862c_1 isa MLIL_LOAD_SSA, has hash "N_8761797374029_134526862c_1", has edge-label "src";
(to-node: $N_8761797374029_134526862c_1, from-node: $N_8761797374029_134526862c) isa node-link; 

match
$N_8761797374029_134526862c_1 isa operation, has hash "N_8761797374029_134526862c_1"; 

insert
$N_8761797374029_134526862c_1_0 isa MLIL_CONST_PTR, has hash "N_8761797374029_134526862c_1_0", has edge-label "src";
(to-node: $N_8761797374029_134526862c_1_0, from-node: $N_8761797374029_134526862c_1) isa node-link; 

match
$N_8761797374029_134526862c_1_0 isa operation, has hash "N_8761797374029_134526862c_1_0"; 

insert
$N_8761797374029_134526862c_1_0_0 isa constant, has hash "N_8761797374029_134526862c_1_0_0", has constant-value "134652916", has edge-label "constant";
(to-node: $N_8761797374029_134526862c_1_0_0, from-node: $N_8761797374029_134526862c_1_0) isa node-link; 

match
$N_8761797374029_134526862c_1 isa operation, has hash "N_8761797374029_134526862c_1"; 

insert
$N_8761797374029_134526862c_1_1 isa constant, has hash "N_8761797374029_134526862c_1_1", has constant-value "1", has edge-label "src_memory";
(to-node: $N_8761797374029_134526862c_1_1, from-node: $N_8761797374029_134526862c_1) isa node-link; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 29, has bb-end 36; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 29, has bb-end 36; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797291345_134526868c isa instruction, has hash "N_8761797291345_134526868c", has il-index 30, has asm-address "0x804b794", has operation-type "MLIL_SET_VAR_SSA", has ins-text "ecx_2#3 = ecx_1#2 - [0x8076a78].d @ mem#1";
(contains-instruction: $N_8761797291345_134526868c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797291345_134526868c isa instruction, has hash "N_8761797291345_134526868c"; 

insert
$N_8761797291345_134526868c_0 isa variable-ssa, has hash "N_8761797291345_134526868c_0", has var "ecx_2", has version 3, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797291345_134526868c_0, from-node: $N_8761797291345_134526868c) isa node-link; 

match
$N_8761797291345_134526868c isa instruction, has hash "N_8761797291345_134526868c"; 

insert
$N_8761797291345_134526868c_1 isa MLIL_SUB, has hash "N_8761797291345_134526868c_1", has edge-label "src";
(to-node: $N_8761797291345_134526868c_1, from-node: $N_8761797291345_134526868c) isa node-link; 

match
$N_8761797291345_134526868c_1 isa operation, has hash "N_8761797291345_134526868c_1"; 

insert
$N_8761797291345_134526868c_1_0 isa MLIL_VAR_SSA, has hash "N_8761797291345_134526868c_1_0", has edge-label "left";
(to-node: $N_8761797291345_134526868c_1_0, from-node: $N_8761797291345_134526868c_1) isa node-link; 

match
$N_8761797291345_134526868c_1_0 isa operation, has hash "N_8761797291345_134526868c_1_0"; 

insert
$N_8761797291345_134526868c_1_0_0 isa variable-ssa, has hash "N_8761797291345_134526868c_1_0_0", has var "ecx_1", has version 2, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797291345_134526868c_1_0_0, from-node: $N_8761797291345_134526868c_1_0) isa node-link; 

match
$N_8761797291345_134526868c_1 isa operation, has hash "N_8761797291345_134526868c_1"; 

insert
$N_8761797291345_134526868c_1_1 isa MLIL_LOAD_SSA, has hash "N_8761797291345_134526868c_1_1", has edge-label "right";
(to-node: $N_8761797291345_134526868c_1_1, from-node: $N_8761797291345_134526868c_1) isa node-link; 

match
$N_8761797291345_134526868c_1_1 isa operation, has hash "N_8761797291345_134526868c_1_1"; 

insert
$N_8761797291345_134526868c_1_1_0 isa MLIL_CONST_PTR, has hash "N_8761797291345_134526868c_1_1_0", has edge-label "src";
(to-node: $N_8761797291345_134526868c_1_1_0, from-node: $N_8761797291345_134526868c_1_1) isa node-link; 

match
$N_8761797291345_134526868c_1_1_0 isa operation, has hash "N_8761797291345_134526868c_1_1_0"; 

insert
$N_8761797291345_134526868c_1_1_0_0 isa constant, has hash "N_8761797291345_134526868c_1_1_0_0", has constant-value "134703736", has edge-label "constant";
(to-node: $N_8761797291345_134526868c_1_1_0_0, from-node: $N_8761797291345_134526868c_1_1_0) isa node-link; 

match
$N_8761797291345_134526868c_1_1 isa operation, has hash "N_8761797291345_134526868c_1_1"; 

insert
$N_8761797291345_134526868c_1_1_1 isa constant, has hash "N_8761797291345_134526868c_1_1_1", has constant-value "1", has edge-label "src_memory";
(to-node: $N_8761797291345_134526868c_1_1_1, from-node: $N_8761797291345_134526868c_1_1) isa node-link; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 29, has bb-end 36; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 29, has bb-end 36; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797357573_134526874c isa instruction, has hash "N_8761797357573_134526874c", has il-index 31, has asm-address "0x804b79a", has operation-type "MLIL_SET_VAR_SSA", has ins-text "var_1c_1#2 = esi#1";
(contains-instruction: $N_8761797357573_134526874c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797357573_134526874c isa instruction, has hash "N_8761797357573_134526874c"; 

insert
$N_8761797357573_134526874c_0 isa variable-ssa, has hash "N_8761797357573_134526874c_0", has var "var_1c_1", has version 2, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797357573_134526874c_0, from-node: $N_8761797357573_134526874c) isa node-link; 

match
$N_8761797357573_134526874c isa instruction, has hash "N_8761797357573_134526874c"; 

insert
$N_8761797357573_134526874c_1 isa MLIL_VAR_SSA, has hash "N_8761797357573_134526874c_1", has edge-label "src";
(to-node: $N_8761797357573_134526874c_1, from-node: $N_8761797357573_134526874c) isa node-link; 

match
$N_8761797357573_134526874c_1 isa operation, has hash "N_8761797357573_134526874c_1"; 

insert
$N_8761797357573_134526874c_1_0 isa variable-ssa, has hash "N_8761797357573_134526874c_1_0", has var "esi", has version 1, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797357573_134526874c_1_0, from-node: $N_8761797357573_134526874c_1) isa node-link; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 29, has bb-end 36; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 29, has bb-end 36; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797391621_134526877c isa instruction, has hash "N_8761797391621_134526877c", has il-index 32, has asm-address "0x804b79d", has operation-type "MLIL_CALL_SSA", has ins-text "eax_4#7, mem#2 = ecx_2#3(var_1c_1#2) @ mem#1";
(contains-instruction: $N_8761797391621_134526877c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797391621_134526877c isa instruction, has hash "N_8761797391621_134526877c"; 

insert
$N_8761797391621_134526877c_0 isa MLIL_CALL_OUTPUT_SSA, has hash "N_8761797391621_134526877c_0", has edge-label "output";
(to-node: $N_8761797391621_134526877c_0, from-node: $N_8761797391621_134526877c) isa node-link; 

match
$N_8761797391621_134526877c_0 isa operation, has hash "N_8761797391621_134526877c_0"; 

insert
$N_8761797391621_134526877c_0_0 isa constant, has hash "N_8761797391621_134526877c_0_0", has constant-value "2", has edge-label "dest_memory";
(to-node: $N_8761797391621_134526877c_0_0, from-node: $N_8761797391621_134526877c_0) isa node-link; 

match
$N_8761797391621_134526877c_0 isa operation, has hash "N_8761797391621_134526877c_0"; 

insert
$L_8761797391621_134526877c_0_1 isa list, has hash "L_8761797391621_134526877c_0_1", has list-size 1, has edge-label "dest";
(to-node: $L_8761797391621_134526877c_0_1, from-node: $N_8761797391621_134526877c_0) isa node-link; 

match
$L_8761797391621_134526877c_0_1 isa list, has hash "L_8761797391621_134526877c_0_1"; 

insert
$N_8761797391621_134526877c_0_1_0 isa variable-ssa, has hash "N_8761797391621_134526877c_0_1_0", has var "eax_4", has version 7, has edge-label "0", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797391621_134526877c_0_1_0, from-node: $L_8761797391621_134526877c_0_1) isa node-link; 

match
$N_8761797391621_134526877c isa instruction, has hash "N_8761797391621_134526877c"; 

insert
$N_8761797391621_134526877c_1 isa MLIL_VAR_SSA, has hash "N_8761797391621_134526877c_1", has edge-label "dest";
(to-node: $N_8761797391621_134526877c_1, from-node: $N_8761797391621_134526877c) isa node-link; 

match
$N_8761797391621_134526877c_1 isa operation, has hash "N_8761797391621_134526877c_1"; 

insert
$N_8761797391621_134526877c_1_0 isa variable-ssa, has hash "N_8761797391621_134526877c_1_0", has var "ecx_2", has version 3, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797391621_134526877c_1_0, from-node: $N_8761797391621_134526877c_1) isa node-link; 

match
$N_8761797391621_134526877c isa instruction, has hash "N_8761797391621_134526877c"; 

insert
$L_8761797391621_134526877c_2 isa list, has hash "L_8761797391621_134526877c_2", has list-size 1, has edge-label "params";
(to-node: $L_8761797391621_134526877c_2, from-node: $N_8761797391621_134526877c) isa node-link; 

match
$L_8761797391621_134526877c_2 isa list, has hash "L_8761797391621_134526877c_2"; 

insert
$N_8761797391621_134526877c_2_0 isa MLIL_VAR_SSA, has hash "N_8761797391621_134526877c_2_0", has edge-label "0";
(to-node: $N_8761797391621_134526877c_2_0, from-node: $L_8761797391621_134526877c_2) isa node-link; 

match
$N_8761797391621_134526877c_2_0 isa operation, has hash "N_8761797391621_134526877c_2_0"; 

insert
$N_8761797391621_134526877c_2_0_0 isa variable-ssa, has hash "N_8761797391621_134526877c_2_0_0", has var "var_1c_1", has version 2, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797391621_134526877c_2_0_0, from-node: $N_8761797391621_134526877c_2_0) isa node-link; 

match
$N_8761797391621_134526877c isa instruction, has hash "N_8761797391621_134526877c"; 

insert
$N_8761797391621_134526877c_3 isa constant, has hash "N_8761797391621_134526877c_3", has constant-value "1", has edge-label "src_memory";
(to-node: $N_8761797391621_134526877c_3, from-node: $N_8761797391621_134526877c) isa node-link; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 29, has bb-end 36; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 29, has bb-end 36; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797350477_134526879c isa instruction, has hash "N_8761797350477_134526879c", has il-index 33, has asm-address "0x804b79f", has operation-type "MLIL_STORE_SSA", has ins-text "[edi_1#3].d = eax_4#7 @ mem#2 -> mem#3";
(contains-instruction: $N_8761797350477_134526879c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797350477_134526879c isa instruction, has hash "N_8761797350477_134526879c"; 

insert
$N_8761797350477_134526879c_0 isa MLIL_VAR_SSA, has hash "N_8761797350477_134526879c_0", has edge-label "dest";
(to-node: $N_8761797350477_134526879c_0, from-node: $N_8761797350477_134526879c) isa node-link; 

match
$N_8761797350477_134526879c_0 isa operation, has hash "N_8761797350477_134526879c_0"; 

insert
$N_8761797350477_134526879c_0_0 isa variable-ssa, has hash "N_8761797350477_134526879c_0_0", has var "edi_1", has version 3, has edge-label "src", has var-type "int32_t*", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797350477_134526879c_0_0, from-node: $N_8761797350477_134526879c_0) isa node-link; 

match
$N_8761797350477_134526879c isa instruction, has hash "N_8761797350477_134526879c"; 

insert
$N_8761797350477_134526879c_1 isa constant, has hash "N_8761797350477_134526879c_1", has constant-value "3", has edge-label "dest_memory";
(to-node: $N_8761797350477_134526879c_1, from-node: $N_8761797350477_134526879c) isa node-link; 

match
$N_8761797350477_134526879c isa instruction, has hash "N_8761797350477_134526879c"; 

insert
$N_8761797350477_134526879c_2 isa constant, has hash "N_8761797350477_134526879c_2", has constant-value "2", has edge-label "src_memory";
(to-node: $N_8761797350477_134526879c_2, from-node: $N_8761797350477_134526879c) isa node-link; 

match
$N_8761797350477_134526879c isa instruction, has hash "N_8761797350477_134526879c"; 

insert
$N_8761797350477_134526879c_3 isa MLIL_VAR_SSA, has hash "N_8761797350477_134526879c_3", has edge-label "src";
(to-node: $N_8761797350477_134526879c_3, from-node: $N_8761797350477_134526879c) isa node-link; 

match
$N_8761797350477_134526879c_3 isa operation, has hash "N_8761797350477_134526879c_3"; 

insert
$N_8761797350477_134526879c_3_0 isa variable-ssa, has hash "N_8761797350477_134526879c_3_0", has var "eax_4", has version 7, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797350477_134526879c_3_0, from-node: $N_8761797350477_134526879c_3) isa node-link; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 29, has bb-end 36; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 29, has bb-end 36; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797390429_134526881c isa instruction, has hash "N_8761797390429_134526881c", has il-index 34, has asm-address "0x804b7a1", has operation-type "MLIL_STORE_SSA", has ins-text "[(ebx_1#2 << 2) + 0x806a488].d = 0 @ mem#3 -> mem#4";
(contains-instruction: $N_8761797390429_134526881c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797390429_134526881c isa instruction, has hash "N_8761797390429_134526881c"; 

insert
$N_8761797390429_134526881c_0 isa MLIL_ADD, has hash "N_8761797390429_134526881c_0", has edge-label "dest";
(to-node: $N_8761797390429_134526881c_0, from-node: $N_8761797390429_134526881c) isa node-link; 

match
$N_8761797390429_134526881c_0 isa operation, has hash "N_8761797390429_134526881c_0"; 

insert
$N_8761797390429_134526881c_0_0 isa MLIL_LSL, has hash "N_8761797390429_134526881c_0_0", has edge-label "left";
(to-node: $N_8761797390429_134526881c_0_0, from-node: $N_8761797390429_134526881c_0) isa node-link; 

match
$N_8761797390429_134526881c_0_0 isa operation, has hash "N_8761797390429_134526881c_0_0"; 

insert
$N_8761797390429_134526881c_0_0_0 isa MLIL_VAR_SSA, has hash "N_8761797390429_134526881c_0_0_0", has edge-label "left";
(to-node: $N_8761797390429_134526881c_0_0_0, from-node: $N_8761797390429_134526881c_0_0) isa node-link; 

match
$N_8761797390429_134526881c_0_0_0 isa operation, has hash "N_8761797390429_134526881c_0_0_0"; 

insert
$N_8761797390429_134526881c_0_0_0_0 isa variable-ssa, has hash "N_8761797390429_134526881c_0_0_0_0", has var "ebx_1", has version 2, has edge-label "src", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797390429_134526881c_0_0_0_0, from-node: $N_8761797390429_134526881c_0_0_0) isa node-link; 

match
$N_8761797390429_134526881c_0_0 isa operation, has hash "N_8761797390429_134526881c_0_0"; 

insert
$N_8761797390429_134526881c_0_0_1 isa MLIL_CONST, has hash "N_8761797390429_134526881c_0_0_1", has edge-label "right";
(to-node: $N_8761797390429_134526881c_0_0_1, from-node: $N_8761797390429_134526881c_0_0) isa node-link; 

match
$N_8761797390429_134526881c_0_0_1 isa operation, has hash "N_8761797390429_134526881c_0_0_1"; 

insert
$N_8761797390429_134526881c_0_0_1_0 isa constant, has hash "N_8761797390429_134526881c_0_0_1_0", has constant-value "2", has edge-label "constant";
(to-node: $N_8761797390429_134526881c_0_0_1_0, from-node: $N_8761797390429_134526881c_0_0_1) isa node-link; 

match
$N_8761797390429_134526881c_0 isa operation, has hash "N_8761797390429_134526881c_0"; 

insert
$N_8761797390429_134526881c_0_1 isa MLIL_CONST, has hash "N_8761797390429_134526881c_0_1", has edge-label "right";
(to-node: $N_8761797390429_134526881c_0_1, from-node: $N_8761797390429_134526881c_0) isa node-link; 

match
$N_8761797390429_134526881c_0_1 isa operation, has hash "N_8761797390429_134526881c_0_1"; 

insert
$N_8761797390429_134526881c_0_1_0 isa constant, has hash "N_8761797390429_134526881c_0_1_0", has constant-value "134653064", has edge-label "constant";
(to-node: $N_8761797390429_134526881c_0_1_0, from-node: $N_8761797390429_134526881c_0_1) isa node-link; 

match
$N_8761797390429_134526881c isa instruction, has hash "N_8761797390429_134526881c"; 

insert
$N_8761797390429_134526881c_1 isa constant, has hash "N_8761797390429_134526881c_1", has constant-value "4", has edge-label "dest_memory";
(to-node: $N_8761797390429_134526881c_1, from-node: $N_8761797390429_134526881c) isa node-link; 

match
$N_8761797390429_134526881c isa instruction, has hash "N_8761797390429_134526881c"; 

insert
$N_8761797390429_134526881c_2 isa constant, has hash "N_8761797390429_134526881c_2", has constant-value "3", has edge-label "src_memory";
(to-node: $N_8761797390429_134526881c_2, from-node: $N_8761797390429_134526881c) isa node-link; 

match
$N_8761797390429_134526881c isa instruction, has hash "N_8761797390429_134526881c"; 

insert
$N_8761797390429_134526881c_3 isa MLIL_CONST, has hash "N_8761797390429_134526881c_3", has edge-label "src";
(to-node: $N_8761797390429_134526881c_3, from-node: $N_8761797390429_134526881c) isa node-link; 

match
$N_8761797390429_134526881c_3 isa operation, has hash "N_8761797390429_134526881c_3"; 

insert
$N_8761797390429_134526881c_3_0 isa constant, has hash "N_8761797390429_134526881c_3_0", has constant-value "0", has edge-label "constant";
(to-node: $N_8761797390429_134526881c_3_0, from-node: $N_8761797390429_134526881c_3) isa node-link; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 29, has bb-end 36; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 29, has bb-end 36; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797339729_134526892c isa instruction, has hash "N_8761797339729_134526892c", has il-index 35, has asm-address "0x804b7ac", has operation-type "MLIL_SET_VAR_SSA", has ins-text "eax_3#8 = 1";
(contains-instruction: $N_8761797339729_134526892c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797339729_134526892c isa instruction, has hash "N_8761797339729_134526892c"; 

insert
$N_8761797339729_134526892c_0 isa variable-ssa, has hash "N_8761797339729_134526892c_0", has var "eax_3", has version 8, has edge-label "dest", has var-type "int32_t", has var-size 4, has var-func "cgc_my_add_word";
(to-node: $N_8761797339729_134526892c_0, from-node: $N_8761797339729_134526892c) isa node-link; 

match
$N_8761797339729_134526892c isa instruction, has hash "N_8761797339729_134526892c"; 

insert
$N_8761797339729_134526892c_1 isa MLIL_CONST, has hash "N_8761797339729_134526892c_1", has edge-label "src";
(to-node: $N_8761797339729_134526892c_1, from-node: $N_8761797339729_134526892c) isa node-link; 

match
$N_8761797339729_134526892c_1 isa operation, has hash "N_8761797339729_134526892c_1"; 

insert
$N_8761797339729_134526892c_1_0 isa constant, has hash "N_8761797339729_134526892c_1_0", has constant-value "1", has edge-label "constant";
(to-node: $N_8761797339729_134526892c_1_0, from-node: $N_8761797339729_134526892c_1) isa node-link; 

match
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$bb isa basic-block, has bb-start 29, has bb-end 36; 
(in-function: $func_cgc_my_add_word, contains-basic-block: $bb) isa has-basic-block; 

insert
$N_8761797351945_134526892c isa instruction, has hash "N_8761797351945_134526892c", has il-index 36, has asm-address "0x804b7ac", has operation-type "MLIL_GOTO", has ins-text "goto 11 @ 0x804b7b7";
(contains-instruction: $N_8761797351945_134526892c, in-basic-block: $bb) isa has-instruction; 

match
$N_8761797351945_134526892c isa instruction, has hash "N_8761797351945_134526892c"; 

insert
$N_8761797351945_134526892c_0 isa constant, has hash "N_8761797351945_134526892c_0", has constant-value "11", has edge-label "dest";
(to-node: $N_8761797351945_134526892c_0, from-node: $N_8761797351945_134526892c) isa node-link; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$frombb isa basic-block, has bb-end 7, has bb-start 0; 
$tobb   isa basic-block, has bb-end 8, has bb-start 8; 
(contains-basic-block: $frombb, in-function: $func_cgc_my_add_word) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_cgc_my_add_word) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$frombb isa basic-block, has bb-end 7, has bb-start 0; 
$tobb   isa basic-block, has bb-end 10, has bb-start 9; 
(contains-basic-block: $frombb, in-function: $func_cgc_my_add_word) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_cgc_my_add_word) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$frombb isa basic-block, has bb-end 8, has bb-start 8; 
$tobb   isa basic-block, has bb-end 18, has bb-start 11; 
(contains-basic-block: $frombb, in-function: $func_cgc_my_add_word) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_cgc_my_add_word) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$frombb isa basic-block, has bb-end 10, has bb-start 9; 
$tobb   isa basic-block, has bb-end 27, has bb-start 19; 
(contains-basic-block: $frombb, in-function: $func_cgc_my_add_word) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_cgc_my_add_word) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$frombb isa basic-block, has bb-end 27, has bb-start 19; 
$tobb   isa basic-block, has bb-end 28, has bb-start 28; 
(contains-basic-block: $frombb, in-function: $func_cgc_my_add_word) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_cgc_my_add_word) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$frombb isa basic-block, has bb-end 27, has bb-start 19; 
$tobb   isa basic-block, has bb-end 36, has bb-start 29; 
(contains-basic-block: $frombb, in-function: $func_cgc_my_add_word) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_cgc_my_add_word) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$frombb isa basic-block, has bb-end 28, has bb-start 28; 
$tobb   isa basic-block, has bb-end 27, has bb-start 19; 
(contains-basic-block: $frombb, in-function: $func_cgc_my_add_word) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_cgc_my_add_word) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 

match 
$func_cgc_my_add_word isa function, has name "cgc_my_add_word"; 
$frombb isa basic-block, has bb-end 36, has bb-start 29; 
$tobb   isa basic-block, has bb-end 18, has bb-start 11; 
(contains-basic-block: $frombb, in-function: $func_cgc_my_add_word) isa has-basic-block; 
(contains-basic-block: $tobb, in-function: $func_cgc_my_add_word) isa has-basic-block; 

insert 
(from-basic-block: $frombb, to-basic-block: $tobb) isa basic-block-edge; 
